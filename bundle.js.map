{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://google-docs-to-markdown/./node_modules/extend/index.js","webpack://google-docs-to-markdown/./node_modules/is-buffer/index.js","webpack://google-docs-to-markdown/webpack/bootstrap","webpack://google-docs-to-markdown/webpack/runtime/define property getters","webpack://google-docs-to-markdown/webpack/runtime/hasOwnProperty shorthand","webpack://google-docs-to-markdown/webpack/runtime/make namespace object","webpack://google-docs-to-markdown/./node_modules/property-information/lib/util/schema.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/util/merge.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/normalize.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/util/info.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/util/types.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/util/defined-info.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/util/create.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/xlink.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/xml.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/util/case-sensitive-transform.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/util/case-insensitive-transform.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/xmlns.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/aria.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/html.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/svg.js","webpack://google-docs-to-markdown/./node_modules/property-information/index.js","webpack://google-docs-to-markdown/./node_modules/comma-separated-tokens/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-parse-selector/lib/index.js","webpack://google-docs-to-markdown/./node_modules/property-information/lib/find.js","webpack://google-docs-to-markdown/./node_modules/space-separated-tokens/index.js","webpack://google-docs-to-markdown/./node_modules/hastscript/lib/create-h.js","webpack://google-docs-to-markdown/./node_modules/hastscript/lib/svg-case-sensitive-tag-names.js","webpack://google-docs-to-markdown/./node_modules/hastscript/lib/index.js","webpack://google-docs-to-markdown/./node_modules/unist-util-visit-parents/node_modules/unist-util-is/lib/index.js","webpack://google-docs-to-markdown/./node_modules/unist-util-visit-parents/lib/index.js","webpack://google-docs-to-markdown/./node_modules/unist-util-visit/lib/index.js","webpack://google-docs-to-markdown/./lib/css.js","webpack://google-docs-to-markdown/./lib/fix-google-html.js","webpack://google-docs-to-markdown/./node_modules/web-namespaces/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-from-dom/node_modules/hast-util-parse-selector/lib/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-from-dom/node_modules/hastscript/lib/core.js","webpack://google-docs-to-markdown/./node_modules/hast-util-from-dom/node_modules/hastscript/lib/svg-case-sensitive-tag-names.js","webpack://google-docs-to-markdown/./node_modules/hast-util-from-dom/node_modules/hastscript/lib/svg.js","webpack://google-docs-to-markdown/./node_modules/hast-util-from-dom/node_modules/hastscript/lib/html.js","webpack://google-docs-to-markdown/./node_modules/hast-util-from-dom/lib/index.js","webpack://google-docs-to-markdown/./node_modules/rehype-dom-parse/lib/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/util/own.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/util/wrap-text.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/one.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/all.js","webpack://google-docs-to-markdown/./node_modules/hast-util-is-element/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-embedded/index.js","webpack://google-docs-to-markdown/./node_modules/unist-util-is/lib/index.js","webpack://google-docs-to-markdown/./node_modules/rehype-minify-whitespace/block.js","webpack://google-docs-to-markdown/./node_modules/rehype-minify-whitespace/content.js","webpack://google-docs-to-markdown/./node_modules/rehype-minify-whitespace/skippable.js","webpack://google-docs-to-markdown/./node_modules/rehype-minify-whitespace/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-whitespace/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/node_modules/unist-util-visit-parents/lib/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/node_modules/unist-util-visit/lib/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-phrasing/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/util/wrap.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/util/wrap-children.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/util/resolve.js","webpack://google-docs-to-markdown/./node_modules/unist-util-find-after/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-text/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/code.js","webpack://google-docs-to-markdown/./node_modules/trim-trailing-lines/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/del.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/util/list-items-spread.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/util/wrap-list-items.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/dl.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/em.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/heading.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/img.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/inline-code.js","webpack://google-docs-to-markdown/./node_modules/hast-util-has-property/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/util/find-selected-options.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/input.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/li.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/list.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-string/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/media.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/p.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/strong.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/table-cell.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/table.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/index.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/root.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/text.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/comment.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/a.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/base.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/blockquote.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/br.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/hr.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/iframe.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/q.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/select.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/textarea.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/table-row.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/handlers/wbr.js","webpack://google-docs-to-markdown/./node_modules/hast-util-to-mdast/lib/index.js","webpack://google-docs-to-markdown/./node_modules/rehype-remark/lib/index.js","webpack://google-docs-to-markdown/./node_modules/micromark-util-chunked/index.js","webpack://google-docs-to-markdown/./node_modules/micromark-util-combine-extensions/index.js","webpack://google-docs-to-markdown/./node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","webpack://google-docs-to-markdown/./node_modules/micromark-util-character/index.js","webpack://google-docs-to-markdown/./node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","webpack://google-docs-to-markdown/./node_modules/micromark-factory-space/index.js","webpack://google-docs-to-markdown/./node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://google-docs-to-markdown/./node_modules/micromark-util-normalize-identifier/index.js","webpack://google-docs-to-markdown/./node_modules/micromark-extension-gfm-footnote/lib/syntax.js","webpack://google-docs-to-markdown/./node_modules/micromark-util-classify-character/index.js","webpack://google-docs-to-markdown/./node_modules/micromark-util-resolve-all/index.js","webpack://google-docs-to-markdown/./node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","webpack://google-docs-to-markdown/./node_modules/micromark-extension-gfm-table/lib/edit-map.js","webpack://google-docs-to-markdown/./node_modules/micromark-extension-gfm-table/lib/infer.js","webpack://google-docs-to-markdown/./node_modules/micromark-extension-gfm-table/lib/syntax.js","webpack://google-docs-to-markdown/./node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","webpack://google-docs-to-markdown/./node_modules/ccount/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-find-and-replace/node_modules/unist-util-visit-parents/lib/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-find-and-replace/lib/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-gfm-autolink-literal/lib/index.js","webpack://google-docs-to-markdown/./node_modules/decode-named-character-reference/index.dom.js","webpack://google-docs-to-markdown/./node_modules/micromark-util-decode-string/index.js","webpack://google-docs-to-markdown/./node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/association.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/container-flow.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/indent-lines.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/safe.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/track.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-gfm-footnote/lib/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-gfm-strikethrough/lib/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","webpack://google-docs-to-markdown/./node_modules/markdown-table/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-gfm-table/lib/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/list-item.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-gfm-task-list-item/lib/index.js","webpack://google-docs-to-markdown/./node_modules/zwitch/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/configure.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/break.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/code.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-quote.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/node_modules/unist-util-visit-parents/lib/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/node_modules/unist-util-visit/lib/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/html.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/image.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/link.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-rule.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/strong.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-strong.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-fence.js","webpack://google-docs-to-markdown/./node_modules/longest-streak/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/definition.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/heading.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/list.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered-other.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/root.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/text.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/join.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/unsafe.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-to-markdown/lib/index.js","webpack://google-docs-to-markdown/./node_modules/bail/index.js","webpack://google-docs-to-markdown/./node_modules/is-plain-obj/index.js","webpack://google-docs-to-markdown/./node_modules/unist-util-stringify-position/index.js","webpack://google-docs-to-markdown/./node_modules/vfile-message/index.js","webpack://google-docs-to-markdown/./node_modules/vfile/lib/minpath.browser.js","webpack://google-docs-to-markdown/./node_modules/vfile/lib/minproc.browser.js","webpack://google-docs-to-markdown/./node_modules/vfile/lib/minurl.shared.js","webpack://google-docs-to-markdown/./node_modules/vfile/lib/index.js","webpack://google-docs-to-markdown/./node_modules/vfile/lib/minurl.browser.js","webpack://google-docs-to-markdown/./node_modules/unified/lib/index.js","webpack://google-docs-to-markdown/./node_modules/trough/index.js","webpack://google-docs-to-markdown/./lib/convert.js","webpack://google-docs-to-markdown/./lib/rehype-to-remark-with-spaces.js","webpack://google-docs-to-markdown/./node_modules/remark-gfm/index.js","webpack://google-docs-to-markdown/./node_modules/micromark-extension-gfm/index.js","webpack://google-docs-to-markdown/./node_modules/mdast-util-gfm/lib/index.js","webpack://google-docs-to-markdown/./node_modules/remark-stringify/lib/index.js","webpack://google-docs-to-markdown/./node_modules/github-slugger/regex.js","webpack://google-docs-to-markdown/./node_modules/github-slugger/index.js","webpack://google-docs-to-markdown/./index.js"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Object.<string, Info>} Properties\n * @typedef {Object.<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","import {Schema} from './schema.js'\n\n/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\n/**\n * @param {import('./schema.js').Schema[]} definitions\n * @param {string} space\n * @returns {import('./schema.js').Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  var property = {}\n  /** @type {Normal} */\n  var normal = {}\n  var index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    this.property = property\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.attribute = null\nInfo.prototype.property = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","var powers = 0\n\nexport var boolean = increment()\nexport var booleanish = increment()\nexport var overloadedBoolean = increment()\nexport var number = increment()\nexport var spaceSeparated = increment()\nexport var commaSeparated = increment()\nexport var commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\nvar checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    var index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    while (++index < checks.length) {\n      mark(\n        this,\n        checks[index],\n        (mask & types[checks[index]]) === types[checks[index]]\n      )\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {InstanceType<typeof DefinedInfo>} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    values[key] = value\n  }\n}\n","import {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\n/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n * @typedef {import('./info.js').Info} Info\n */\n\n/**\n * @typedef {Object.<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Object.<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array.<string>} [mustUseProperty]\n */\n\nvar own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {import('./schema.js').Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  var property = {}\n  /** @type {Normal} */\n  var normal = {}\n  /** @type {string} */\n  var prop\n  /** @type {Info} */\n  var info\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes, prop),\n        definition.properties[prop],\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport var xlink = create({\n  space: 'xlink',\n  transform: xlinkTransform,\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n\n/**\n * @param {unknown} _\n * @param {string} prop\n * @returns {string}\n */\nfunction xlinkTransform(_, prop) {\n  return 'xlink:' + prop.slice(5).toLowerCase()\n}\n","import {create} from './util/create.js'\n\nexport var xml = create({\n  space: 'xml',\n  transform: xmlTransform,\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n\n/**\n * @param {unknown} _\n * @param {string} prop\n * @returns {string}\n */\nfunction xmlTransform(_, prop) {\n  return 'xml:' + prop.slice(3).toLowerCase()\n}\n","/**\n * @param {Object.<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Object.<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport var xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport var aria = create({\n  transform: ariaTransform,\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n\n/**\n * @param {unknown} _\n * @param {string} prop\n * @returns {string}\n */\nfunction ariaTransform(_, prop) {\n  return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n}\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport var html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: commaSeparated,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextMenu: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: commaSeparated,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport var svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport var html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport var svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {Object} StringifyOptions\n * @property {boolean} [padLeft=true] Whether to pad a space before a token (`boolean`, default: `true`).\n * @property {boolean} [padRight=false] Whether to pad a space after a token (`boolean`, default: `false`).\n */\n\n/**\n * Parse comma separated tokens to an array.\n *\n * @param {string} value\n * @returns {Array.<string>}\n */\nexport function parse(value) {\n  /** @type {Array.<string>} */\n  var tokens = []\n  var input = String(value || '')\n  var index = input.indexOf(',')\n  var start = 0\n  /** @type {boolean} */\n  var end\n  /** @type {string} */\n  var token\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings to comma separated tokens.\n *\n * @param {Array.<string|number>} values\n * @param {StringifyOptions} [options]\n * @returns {string}\n */\nexport function stringify(values, options) {\n  var settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  if (values[values.length - 1] === '') {\n    values = values.concat('')\n  }\n\n  return values\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n */\n\n/**\n * @template {string} SimpleSelector\n *   Selector type.\n * @template {string} DefaultTagName\n *   Default tag name.\n * @typedef {(\n *   SimpleSelector extends ''\n *     ? DefaultTagName\n *     : SimpleSelector extends `${infer TagName}.${infer Rest}`\n *     ? ExtractTagName<TagName, DefaultTagName>\n *     : SimpleSelector extends `${infer TagName}#${infer Rest}`\n *     ? ExtractTagName<TagName, DefaultTagName>\n *     : SimpleSelector extends string\n *     ? SimpleSelector\n *     : DefaultTagName\n * )} ExtractTagName\n *   Extract tag name from a simple selector.\n */\n\nconst search = /[#.]/g\n\n/**\n * Create a hast element from a simple CSS selector.\n *\n * @template {string} Selector\n *   Type of selector.\n * @template {string} [DefaultTagName='div']\n *   Type of default tag name (default: `'div'`).\n * @param {Selector | null | undefined} [selector]\n *   Simple CSS selector (optional).\n *\n *   Can contain a tag name (`foo`), classes (`.bar`), and an ID (`#baz`).\n *   Multiple classes are allowed.\n *   Uses the last ID if multiple IDs are found.\n * @param {DefaultTagName | null | undefined} [defaultTagName='div']\n *   Tag name to use if `selector` does not specify one (default: `'div'`).\n * @returns {Element & {tagName: ExtractTagName<Selector, DefaultTagName>}}\n *   Built element.\n */\nexport function parseSelector(selector, defaultTagName) {\n  const value = selector || ''\n  /** @type {Properties} */\n  const props = {}\n  let start = 0\n  /** @type {string | undefined} */\n  let previous\n  /** @type {string | undefined} */\n  let tagName\n\n  while (start < value.length) {\n    search.lastIndex = start\n    const match = search.exec(value)\n    const subvalue = value.slice(start, match ? match.index : value.length)\n\n    if (subvalue) {\n      if (!previous) {\n        tagName = subvalue\n      } else if (previous === '#') {\n        props.id = subvalue\n      } else if (Array.isArray(props.className)) {\n        props.className.push(subvalue)\n      } else {\n        props.className = [subvalue]\n      }\n\n      start += subvalue.length\n    }\n\n    if (match) {\n      previous = match[0]\n      start++\n    }\n  }\n\n  return {\n    type: 'element',\n    // @ts-expect-error: tag name is parsed.\n    tagName: tagName || defaultTagName || 'div',\n    properties: props,\n    children: []\n  }\n}\n","import {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nvar valid = /^data[-\\w.:]+$/i\nvar dash = /-[a-z]/g\nvar cap = /[A-Z]/g\n\n/**\n * @param {import('./util/schema.js').Schema} schema\n * @param {string} value\n * @returns {import('./util/info.js').Info}\n */\nexport function find(schema, value) {\n  var normal = normalize(value)\n  var prop = value\n  var Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      prop = datasetToProperty(value)\n    } else {\n      value = datasetToAttribute(value)\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} attribute\n * @returns {string}\n */\nfunction datasetToProperty(attribute) {\n  var value = attribute.slice(5).replace(dash, camelcase)\n  return 'data' + value.charAt(0).toUpperCase() + value.slice(1)\n}\n\n/**\n * @param {string} property\n * @returns {string}\n */\nfunction datasetToAttribute(property) {\n  var value = property.slice(4)\n\n  if (dash.test(value)) {\n    return property\n  }\n\n  value = value.replace(cap, kebab)\n\n  if (value.charAt(0) !== '-') {\n    value = '-' + value\n  }\n\n  return 'data' + value\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * Parse space separated tokens to an array of strings.\n *\n * @param {string} value Space separated tokens\n * @returns {Array.<string>} Tokens\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated tokens.\n *\n * @param {Array.<string|number>} values Tokens\n * @returns {string} Space separated tokens\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').RootContent} RootContent\n *\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n */\n\n/**\n * @typedef {Element | Root} Result\n *   Result from a `h` (or `s`) call.\n *\n * @typedef {number | string} StyleValue\n *   Value for a CSS style field.\n * @typedef {Record<string, StyleValue>} Style\n *   Supported value of a `style` prop.\n * @typedef {boolean | number | string | null | undefined} PrimitiveValue\n *   Primitive property value.\n * @typedef {Array<number | string>} ArrayValue\n *   List of property values for space- or comma separated values (such as `className`).\n * @typedef {ArrayValue | PrimitiveValue} PropertyValue\n *   Primitive value or list value.\n * @typedef {{[property: string]: PropertyValue | Style}} Properties\n *   Acceptable value for element properties.\n *\n * @typedef {number | string | null | undefined} PrimitiveChild\n *   Primitive children, either ignored (nullish), or turned into text nodes.\n * @typedef {Array<ArrayChildNested | Nodes | PrimitiveChild>} ArrayChild\n *   List of children.\n * @typedef {Array<Nodes | PrimitiveChild>} ArrayChildNested\n *   List of children (deep).\n * @typedef {ArrayChild | Nodes | PrimitiveChild} Child\n *   Acceptable child value.\n */\n\nimport {parse as commas} from 'comma-separated-tokens'\nimport {parseSelector} from 'hast-util-parse-selector'\nimport {find, normalize} from 'property-information'\nimport {parse as spaces} from 'space-separated-tokens'\n\nconst buttonTypes = new Set(['button', 'menu', 'reset', 'submit'])\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Schema} schema\n *   Schema to use.\n * @param {string} defaultTagName\n *   Default tag name.\n * @param {Array<string> | undefined} [caseSensitive]\n *   Case-sensitive tag names (default: `undefined`).\n * @returns\n *   `h`.\n */\nexport function createH(schema, defaultTagName, caseSensitive) {\n  const adjust = caseSensitive && createAdjustMap(caseSensitive)\n\n  /**\n   * Hyperscript compatible DSL for creating virtual hast trees.\n   *\n   * @overload\n   * @param {null | undefined} [selector]\n   * @param {...Child} children\n   * @returns {Root}\n   *\n   * @overload\n   * @param {string} selector\n   * @param {Properties} properties\n   * @param {...Child} children\n   * @returns {Element}\n   *\n   * @overload\n   * @param {string} selector\n   * @param {...Child} children\n   * @returns {Element}\n   *\n   * @param {string | null | undefined} [selector]\n   *   Selector.\n   * @param {Child | Properties | null | undefined} [properties]\n   *   Properties (or first child) (default: `undefined`).\n   * @param {...Child} children\n   *   Children.\n   * @returns {Result}\n   *   Result.\n   */\n  function h(selector, properties, ...children) {\n    let index = -1\n    /** @type {Result} */\n    let node\n\n    if (selector === undefined || selector === null) {\n      node = {type: 'root', children: []}\n      // Properties are not supported for roots.\n      const child = /** @type {Child} */ (properties)\n      children.unshift(child)\n    } else {\n      node = parseSelector(selector, defaultTagName)\n      // Normalize the name.\n      node.tagName = node.tagName.toLowerCase()\n      if (adjust && own.call(adjust, node.tagName)) {\n        node.tagName = adjust[node.tagName]\n      }\n\n      // Handle props.\n      if (isProperties(properties, node.tagName)) {\n        /** @type {string} */\n        let key\n\n        for (key in properties) {\n          if (own.call(properties, key)) {\n            addProperty(schema, node.properties, key, properties[key])\n          }\n        }\n      } else {\n        children.unshift(properties)\n      }\n    }\n\n    // Handle children.\n    while (++index < children.length) {\n      addChild(node.children, children[index])\n    }\n\n    if (node.type === 'element' && node.tagName === 'template') {\n      node.content = {type: 'root', children: node.children}\n      node.children = []\n    }\n\n    return node\n  }\n\n  return h\n}\n\n/**\n * Check if something is properties or a child.\n *\n * @param {Child | Properties} value\n *   Value to check.\n * @param {string} name\n *   Tag name.\n * @returns {value is Properties}\n *   Whether `value` is a properties object.\n */\nfunction isProperties(value, name) {\n  if (\n    value === null ||\n    value === undefined ||\n    typeof value !== 'object' ||\n    Array.isArray(value)\n  ) {\n    return false\n  }\n\n  if (name === 'input' || !value.type || typeof value.type !== 'string') {\n    return true\n  }\n\n  if ('children' in value && Array.isArray(value.children)) {\n    return false\n  }\n\n  if (name === 'button') {\n    return buttonTypes.has(value.type.toLowerCase())\n  }\n\n  return !('value' in value)\n}\n\n/**\n * @param {Schema} schema\n *   Schema.\n * @param {Properties} properties\n *   Properties object.\n * @param {string} key\n *   Property name.\n * @param {PropertyValue | Style} value\n *   Property value.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addProperty(schema, properties, key, value) {\n  const info = find(schema, key)\n  let index = -1\n  /** @type {PropertyValue} */\n  let result\n\n  // Ignore nullish and NaN values.\n  if (value === undefined || value === null) return\n\n  if (typeof value === 'number') {\n    // Ignore NaN.\n    if (Number.isNaN(value)) return\n\n    result = value\n  }\n  // Booleans.\n  else if (typeof value === 'boolean') {\n    result = value\n  }\n  // Handle list values.\n  else if (typeof value === 'string') {\n    if (info.spaceSeparated) {\n      result = spaces(value)\n    } else if (info.commaSeparated) {\n      result = commas(value)\n    } else if (info.commaOrSpaceSeparated) {\n      result = spaces(commas(value).join(' '))\n    } else {\n      result = parsePrimitive(info, info.property, value)\n    }\n  } else if (Array.isArray(value)) {\n    result = value.concat()\n  } else {\n    result = info.property === 'style' ? style(value) : String(value)\n  }\n\n  if (Array.isArray(result)) {\n    /** @type {Array<number | string>} */\n    const finalResult = []\n\n    while (++index < result.length) {\n      // Assume no booleans in array.\n      const value = /** @type {number | string} */ (\n        parsePrimitive(info, info.property, result[index])\n      )\n      finalResult[index] = value\n    }\n\n    result = finalResult\n  }\n\n  // Class names (which can be added both on the `selector` and here).\n  if (info.property === 'className' && Array.isArray(properties.className)) {\n    // Assume no booleans in `className`.\n    const value = /** @type {number | string} */ (result)\n    result = properties.className.concat(value)\n  }\n\n  properties[info.property] = result\n}\n\n/**\n * @param {Array<RootContent>} nodes\n *   Children.\n * @param {Child} value\n *   Child.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChild(nodes, value) {\n  let index = -1\n\n  if (value === undefined || value === null) {\n    // Empty.\n  } else if (typeof value === 'string' || typeof value === 'number') {\n    nodes.push({type: 'text', value: String(value)})\n  } else if (Array.isArray(value)) {\n    while (++index < value.length) {\n      addChild(nodes, value[index])\n    }\n  } else if (typeof value === 'object' && 'type' in value) {\n    if (value.type === 'root') {\n      addChild(nodes, value.children)\n    } else {\n      nodes.push(value)\n    }\n  } else {\n    throw new Error('Expected node, nodes, or string, got `' + value + '`')\n  }\n}\n\n/**\n * Parse a single primitives.\n *\n * @param {Info} info\n *   Property information.\n * @param {string} name\n *   Property name.\n * @param {PrimitiveValue} value\n *   Property value.\n * @returns {PrimitiveValue}\n *   Property value.\n */\nfunction parsePrimitive(info, name, value) {\n  if (typeof value === 'string') {\n    if (info.number && value && !Number.isNaN(Number(value))) {\n      return Number(value)\n    }\n\n    if (\n      (info.boolean || info.overloadedBoolean) &&\n      (value === '' || normalize(value) === normalize(name))\n    ) {\n      return true\n    }\n  }\n\n  return value\n}\n\n/**\n * Serialize a `style` object as a string.\n *\n * @param {Style} value\n *   Style object.\n * @returns {string}\n *   CSS string.\n */\nfunction style(value) {\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      result.push([key, value[key]].join(': '))\n    }\n  }\n\n  return result.join('; ')\n}\n\n/**\n * Create a map to adjust casing.\n *\n * @param {Array<string>} values\n *   List of properly cased keys.\n * @returns {Record<string, string>}\n *   Map of lowercase keys to uppercase keys.\n */\nfunction createAdjustMap(values) {\n  /** @type {Record<string, string>} */\n  const result = {}\n  let index = -1\n\n  while (++index < values.length) {\n    result[values[index].toLowerCase()] = values[index]\n  }\n\n  return result\n}\n","export const svgCaseSensitiveTagNames = [\n  'altGlyph',\n  'altGlyphDef',\n  'altGlyphItem',\n  'animateColor',\n  'animateMotion',\n  'animateTransform',\n  'clipPath',\n  'feBlend',\n  'feColorMatrix',\n  'feComponentTransfer',\n  'feComposite',\n  'feConvolveMatrix',\n  'feDiffuseLighting',\n  'feDisplacementMap',\n  'feDistantLight',\n  'feDropShadow',\n  'feFlood',\n  'feFuncA',\n  'feFuncB',\n  'feFuncG',\n  'feFuncR',\n  'feGaussianBlur',\n  'feImage',\n  'feMerge',\n  'feMergeNode',\n  'feMorphology',\n  'feOffset',\n  'fePointLight',\n  'feSpecularLighting',\n  'feSpotLight',\n  'feTile',\n  'feTurbulence',\n  'foreignObject',\n  'glyphRef',\n  'linearGradient',\n  'radialGradient',\n  'solidColor',\n  'textArea',\n  'textPath'\n]\n","/**\n * @typedef {import('./create-h.js').Child} Child\n *   Acceptable child value.\n * @typedef {import('./create-h.js').Properties} Properties\n *   Acceptable value for element properties.\n * @typedef {import('./create-h.js').Result} Result\n *   Result from a `h` (or `s`) call.\n */\n\n// Register the JSX namespace on `h`.\n/**\n * @typedef {import('./jsx-classic.js').Element} h.JSX.Element\n * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} h.JSX.ElementChildrenAttribute\n * @typedef {import('./jsx-classic.js').IntrinsicAttributes} h.JSX.IntrinsicAttributes\n * @typedef {import('./jsx-classic.js').IntrinsicElements} h.JSX.IntrinsicElements\n */\n\n// Register the JSX namespace on `s`.\n/**\n * @typedef {import('./jsx-classic.js').Element} s.JSX.Element\n * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} s.JSX.ElementChildrenAttribute\n * @typedef {import('./jsx-classic.js').IntrinsicAttributes} s.JSX.IntrinsicAttributes\n * @typedef {import('./jsx-classic.js').IntrinsicElements} s.JSX.IntrinsicElements\n */\n\nimport {html, svg} from 'property-information'\nimport {createH} from './create-h.js'\nimport {svgCaseSensitiveTagNames} from './svg-case-sensitive-tag-names.js'\n\n// Note: this explicit type is needed, otherwise TS creates broken types.\n/** @type {ReturnType<createH>} */\nexport const h = createH(html, 'div')\n\n// Note: this explicit type is needed, otherwise TS creates broken types.\n/** @type {ReturnType<createH>} */\nexport const s = createH(svg, 'g', svgCaseSensitiveTagNames)\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * Light-Weight CSS Tooling\n *\n * The code here is meant to be a pretty light-weight and minimal approach to\n * CSS handling that meets the needs of the rest of the GDoc2Md library. It is\n * not meant to apply much validation or strictness to the CSS it handles, or\n * to handle particularly complex CSS content that we don't expect to see from\n * Google Docs.\n *\n * If our needs get drastically more complex in the future, we should switch to\n * using a dedicated third-party CSS parser like css-tree or postcss.\n */\n\n/** @typedef {{[index: string]: string}} Style */\n\n/**\n * Check whether a string is empty or only contains whitespace.\n * @param {string} text\n * @returns {boolean}\n */\nfunction isBlank(text) {\n  return /^\\s*$/.test(text);\n}\n\n/**\n * Parse a CSS property list (e.g. from an HTML `style` attribute) into a simple\n * object where the keys are the property names and the values are the property\n * values (as strings).\n * Value strings are lower-cased for easier handling (since most CSS values are\n * case insensitive), but this doesn't break out individual properties from\n * shorthand properties or do other specialized property/value handling.\n * @param {string} text\n * @returns {Style}\n */\nexport function parseCssPropertyList(text) {\n  const properties = Object.create(null);\n  if (!text) return properties;\n\n  // This is pretty simplistic, and there are significant caveats:\n  // - The semicolon could be inside a quoted string, in which case it shouldn't\n  //   split properties.\n  // - The property names and values are not limited to the actual allowed\n  //   characters (the rules used here are much simpler than in real CSS).\n  //\n  // For the most part, this library doesn't need to be too concerned with\n  // invalid input. We expect to be working with valid HTML & CSS that was\n  // output by Google Docs. We haven't seen content that violates the above\n  // caveats, so this is OK for now, but that could potentially change.\n  for (const property of text.split(';')) {\n    if (isBlank(property)) continue;\n\n    try {\n      const {name, value} = property\n        .match(/^\\s*(?<name>[\\w-]+)\\s*:\\s*(?<value>.+)\\s*$/)\n        .groups;\n      // Lower-case values for easier lookups and comparisons. Technically this\n      // should only happen for parts of the value that are not quoted.\n      properties[name] = value.toLowerCase();\n    }\n    catch(error) {\n      console.warn(`Could not parse CSS property \"${property}\" (${error})`);\n    }\n  }\n\n  return properties;\n}\n\n/**\n * Get the content of the node's `style` attribute as a parsed object. This\n * caches the results on the node for easy retrieval.\n * @param {RehypeNode} node\n * @returns {Style}\n */\nfunction getNodeStyle(node) {\n  return node._style ||= parseCssPropertyList(node.properties?.style);\n}\n\n/**\n * Resolve the actual, inherited value of a single style property based on the\n * whole tree of nodes. This caches results on the node for easy retrieval.\n * @param {string} propertyName\n * @param {RehypeNode} node\n * @param {RehypeNode[]} ancestors List of ancestor nodes, ordered shallowest to\n *        deepest in the tree.\n * @returns {string|undefined}\n */\nfunction getResolvedStyleProperty(propertyName, node, ancestors) {\n  node._resolvedStyle ||= Object.create(null);\n  if (propertyName in node._resolvedStyle) {\n    return node._resolvedStyle[propertyName];\n  }\n\n  let value = getNodeStyle(node)[propertyName];\n  if ((value && value !== 'inherit') || !ancestors?.length) {\n    node._resolvedStyle[propertyName] = value;\n    return value;\n  }\n\n  // WARNING: Not all properties are inheritable, but this code doesn't check\n  // for inheritability. If it turns out we need to do so, MDN has nice data\n  // to build an allow/block-list from:\n  // https://github.com/mdn/data/blob/main/css/properties.json\n  const parentAncestors = ancestors.slice(0, -1);\n  const parent = ancestors[parentAncestors.length];\n  return getResolvedStyleProperty(propertyName, parent, parentAncestors);\n}\n\n/**\n * Get an object with properties representing a node's fully resolved styles,\n * including anything inherited from ancestors.\n * @param {RehypeNode} node\n * @param {RehypeNode[]} ancestors Ancestors of `node`, starting with the tree\n *        root and ending with the parent of `node`.\n * @returns {Style}\n */\nexport function resolveNodeStyle(node, ancestors) {\n  return new Proxy(Object.create(null), {\n    get (target, property, _receiver) {\n      if (!(property in target)) {\n        target[property] = getResolvedStyleProperty(property, node, ancestors);\n      }\n      return target[property];\n    }\n  });\n}\n","'use strict';\n\nimport { h as hast } from 'hastscript';\nimport { CONTINUE, EXIT, visit } from 'unist-util-visit';\nimport { visitParents } from 'unist-util-visit-parents';\nimport { resolveNodeStyle } from './css.js';\n\nconst blockElements = new Set([\n  'address',\n  'article',\n  'aside',\n  'blockquote',\n  'caption',\n  'center',  // historic\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',  // historic\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'frameset',  // historic\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'header',\n  'hgroup',\n  'hr',\n  'isindex',  // historic\n  'li',\n  'main',\n  'menu',\n  'nav',\n  'noframes',  // historic\n  'ol',\n  'p',\n  'pre',\n  'section',\n  'summary',\n  'table',\n  'thead',\n  'tbody',\n  'tfoot',\n  'td',\n  'th',\n  'tr',\n  'ul'\n]);\n\n// These elements convert to Markdown nodes that can't start or end with spaces.\n// For example, you can't start emphasis with a space: `This * is emphasized*`.\nconst spaceSensitiveElements = new Set([\n  'em',\n  'strong',\n]);\n\nconst isList = node => node.tagName === 'ul' || node.tagName === 'ol';\nconst isStyled = node => node.type === 'element' && node.properties.style;\nconst isBlock = node => node && blockElements.has(node.tagName);\nconst isSpaceSensitive = node => node && spaceSensitiveElements.has(node.tagName);\nconst isCell = (node) => node.tagName === 'th' || node.tagName === 'td';\n\nconst spaceAtStartPattern = /^(\\s+)/;\nconst spaceAtEndPattern = /(\\s+)$/;\n\n// Wrap the children of `node` with the `wrapper` node.\nfunction wrapChildren (node, wrapper) {\n  wrapper.children = node.children;\n  node.children = [wrapper];\n  return wrapper;\n}\n\n/**\n * Fix the incorrect formatting of nested lists in Google Docs's HTML. Lists\n * can only have `div` and `li` children, but Google Docs has other lists as\n * direct descendents. This moves those free-floating lists into the previous\n * `li` element under the assumption that they represent subitems of it.\n *\n * @param {RehypeNode} node Fix the tree below this node\n *\n * @example\n * Input a tree like:\n *    <ul>\n *      <li>An item!</li>\n *      <ul>\n *        <li>A subitem!</li>\n *      </ul>\n *    </ul>\n *\n * Output:\n *    <ul>\n *      <li>An Item!\n *        <ul>\n *          <li>A subitem!</li>\n *        </ul>\n *      </li>\n *    </ul>\n */\nexport function fixNestedLists (node) {\n  visit(node, isList, (node, index, parent) => {\n    if (isList(parent)) {\n      const previous = parent.children[index - 1];\n      if (previous && previous.tagName === 'li') {\n        previous.children.push(node);\n        parent.children.splice(index, 1);\n        return index;\n      }\n      else {\n        console.warn('No previous list item to move nested list into!');\n      }\n    }\n  });\n}\n\n/**\n * Google Docs does italics/bolds/etc on `<span>`s with style attributes, but\n * rehype-remark does not pick up on those. Instead, transform them into\n * semantic `em`, `strong`, etc. elements.\n *\n * @param {RehypeNode} node Fix the tree below this node\n */\nexport function unInlineStyles (node) {\n  convertInlineStylesToElements(node);\n  mergeConsecutiveInlineStyles(node);\n}\n\n/**\n * @private\n * Convert CSS in style attribtutes to semantic elements that are more readily\n * converted to Markdown.\n * @param {RehypeNode} node Fix the tree below this node\n */\nfunction convertInlineStylesToElements(node) {\n  visitParents(node, n => isStyled(n) && !isBlock(n), (node, parents) => {\n    const style = resolveNodeStyle(node, parents);\n\n    if (style['font-style'] === 'italic') {\n      wrapChildren(node, hast('em'));\n    }\n\n    const weight = style['font-weight'];\n    if (weight === 'bold' || weight === '700') {\n      wrapChildren(node, hast('strong'));\n    }\n\n    const verticalAlign = style['vertical-align'];\n    if (verticalAlign === 'super') {\n      wrapChildren(node, hast('sup'));\n    }\n    else if (verticalAlign === 'sub') {\n      wrapChildren(node, hast('sub'));\n    }\n\n    // Some browsers paste with the `text-decoration` property and some use the\n    // newer `text-decoration-line`, so we need to support both.\n    const decorationLine = style['text-decoration'] || style['text-decoration-line'];\n    if (decorationLine?.startsWith('line-through')) {\n      wrapChildren(node, hast('del'));\n    }\n\n    // Google docs doesn't really have anything that represents \"code\", so infer\n    // it from the use of monospace fonts.\n    if (/,\\s*monospace/.test(style['font-family'])) {\n      wrapChildren(node, hast('code'));\n    }\n\n    // Keep the structure as flat as possible by removing semantically\n    // meaningless elements once we've extracted formatting from them.\n    if (node.tagName === 'span') {\n      const parent = parents[parents.length - 1];\n      const index = parent.children.indexOf(node);\n      if (index === -1) {\n        throw new Error('Could not find visited node in its parent');\n      }\n\n      const childrenCount = node.children.length;\n      parent.children.splice(index, 1, ...node.children);\n      return index + childrenCount;\n    }\n  });\n}\n\n/**\n * @private\n * Find consecutive inline elements of the same type and merge their contents.\n * For example, this would convert:\n *\n *     <code>const </code><code>name</code>\n *\n * To:\n *\n *     <code>const name</code>\n * @param {RehypeNode} node Fix the tree below this node\n */\nfunction mergeConsecutiveInlineStyles (node) {\n  visit(node, n => n.tagName && n.children?.length, (node, _index, _parent) => {\n    const newChildren = [];\n    let activeNode = null;\n    for (const child of node.children) {\n      if (activeNode) {\n        if (child.tagName === activeNode.tagName) {\n          activeNode.children.push(...child.children);\n        }\n        else {\n          activeNode = null;\n        }\n      }\n      if (!activeNode) {\n        newChildren.push(child);\n        if (child.tagName && !isBlock(child)) {\n          activeNode = child;\n        }\n      }\n    }\n    node.children = newChildren;\n  });\n}\n\n/**\n * Line breaks frequently wind up wrapped with a somewhat pointless `<span>`\n * element that makes them hard to deal correctly with. Unwrap those line breaks\n * so that they are bare `<br>` elements.\n *\n * Changes this:\n *     <span><br></span>\n * To:\n *     <br>\n * @param {RehypeNode} node Fix the tree below this node\n */\nexport function unwrapLineBreaks (node) {\n  const children = node.children;\n  for (let i = 0; i < children.length; i++) {\n    const child = children[i];\n    if (\n      child.tagName === 'span'\n      && child.children.length === 1\n      && child.children[0].tagName === 'br'\n    ) {\n      children.splice(i, 1, child.children[0]);\n    }\n    else if (child.children) {\n      unwrapLineBreaks(child);\n    }\n  }\n  node.children = children;\n}\n\n/**\n * Paragraphs and other block elements frequently wind up preceded with\n * pointless `<br>` elements. This is probably because paragraphs do not, by\n * default, have any space around them in a Google doc, even though having a\n * blank line is what causes Google Docs to spit out `<p>` elements instead of\n * just `<br>` elements.\n *\n * Changes this:\n *     <br><p>Blah</p>\n * To:\n *     <p>Blah</p>\n * @param {RehypeNode} node Fix the tree below this node\n */\nexport function removeLineBreaksBeforeBlocks (node) {\n  const children = node.children;\n  for (let i = 0; i < children.length; i++) {\n    const child = children[i];\n    if (child.tagName === 'br' && isBlock(children[i + 1])) {\n      children.splice(i, 1);\n      i -= 1;\n    }\n    else if (child.children) {\n      removeLineBreaksBeforeBlocks(child);\n    }\n  }\n  node.children = children;\n}\n\n/**\n * Remove spaces from the start or end of nodes where it's not valid in Markdown\n * (e.g. `<em>`) and return the removed spaces. Works recursively to handle\n * nested nodes with surrounding spaces.\n * @param {RehypeNode} node\n * @returns {string}\n */\nfunction _extractInvalidSpace (node, side = 'start') {\n  let totalSpace = '';\n\n  const reverse = side === 'start' ? false : true;\n  visit(node, (child, index, parent) => {\n    if (child.type === 'text') {\n      const pattern = side === 'start' ? spaceAtStartPattern : spaceAtEndPattern;\n      const spaceMatch = child.value.match(pattern);\n      if (spaceMatch) {\n        const space = spaceMatch[1];\n        const body = side === 'start'\n          ? child.value.slice(space.length)\n          : child.value.slice(0, -space.length);\n        totalSpace = side === 'start'\n          ? (totalSpace + space)\n          : (space + totalSpace);\n        if (body.length) {\n          child.value = body;\n          return EXIT;\n        }\n        else {\n          parent.children.splice(index, 1);\n          return side === 'start' ? index : index - 1;\n        }\n      }\n      else {\n        return EXIT;\n      }\n    }\n    else if (isSpaceSensitive(child)) {\n      return CONTINUE;\n    }\n    else {\n      return EXIT;\n    }\n  }, reverse);\n\n  return totalSpace;\n}\n\n/**\n * In Google Docs (and HTML in general), an element that formats some text can\n * start with spaces, tabs, etc. However, in Markdown, some inline markup\n * (mainly emphasis marks like `**bold**` and `_italic_`) can't start or end\n * with spaces. This finds such elements and moves leading and trailing spaces\n * from inside to outside them.\n *\n * For example, this turns a tree like:\n *\n *     <p>Hello<em> italics </em></p>\n *\n * Into:\n *\n *     <p>Hello <em>italics</em> </p>\n *\n * @param {RehypeNode} node Fix the tree below this node\n */\nexport function moveSpaceOutsideSensitiveChildren (node) {\n  visit(node, isSpaceSensitive, (node, index, parent) => {\n    let nextIndex = index + 1;\n\n    const startSpace = _extractInvalidSpace(node, 'start');\n    if (startSpace) {\n      parent.children.splice(index, 0, { type: 'text', value: startSpace });\n      nextIndex++;\n    }\n\n    const endSpace = _extractInvalidSpace(node, 'end');\n    if (endSpace) {\n      parent.children.splice(nextIndex, 0, { type: 'text', value: endSpace });\n      nextIndex++;\n    }\n\n    return nextIndex;\n  });\n}\n\n/**\n * @param {RehypeNode} node\n * @returns {string|null}\n */\nfunction getNodeTextAlignment (node) {\n  const style = resolveNodeStyle(node);\n  const alignMatch = style['text-align']?.match(/^(left|center|right)/);\n  if (alignMatch) {\n    return alignMatch[1];\n  }\n  return null;\n}\n\n/**\n * Tables in Google Docs don't actually put alignment info on the columns or\n * cells. Instead, cells have paragraphs that are aligned. This detects the\n * alignment of the content of table cells so that the Markdown conversion will\n * set the correct alignment for columns.\n * @param {RehypeNode} node Fix the tree below this node\n */\nexport function detectTableColumnAlignment(node) {\n  visit(node, isCell, (node, _index, _parent) => {\n    if (!node.properties.align) {\n      let alignment = getNodeTextAlignment(node);\n      if (!alignment && node.children) {\n        for (let i = 0; i < node.children.length; i++) {\n          const childAlignment = getNodeTextAlignment(node.children[i]);\n          if (i === 0) {\n            alignment = childAlignment;\n          }\n          else if (childAlignment !== alignment) {\n            alignment = null;\n            break;\n          }\n        }\n      }\n\n      if (alignment) {\n        node.properties.align = alignment;\n      }\n    }\n  });\n}\n\n/**\n * @private\n * Determine whether all the text nodes that are descendents of this node are\n * wrapped inside nodes represent `<code>` elements. Returns `null` if the\n * node has no text descendents, otherwise returns a boolean.\n * @param {RehypeNode} parent Check children of this node.\n * @returns {boolean|null}\n */\nfunction isAllTextCode(parent) {\n  if (!parent.children?.length) return null;\n\n  let hasText = false;\n  for (const child of parent.children) {\n    if (child.tagName === 'code') {\n      hasText = true;\n      continue;\n    }\n    else if (child.type === 'text') {\n      return false;\n    }\n    else {\n      const childResult = isAllTextCode(child);\n      if (childResult === false) {\n        return false;\n      }\n      else if (childResult === true) {\n        hasText = true;\n      }\n    }\n  }\n\n  return hasText ? true : null;\n}\n\n/**\n * Identify paragraphs where all the text is wrapped in `<code>` nodes and wrap\n * the entire pagraph in a `<pre><code>` node. Merge consecutive all-code\n * paragraphs into a single `<pre><code>` block.\n * @param {RehypeNode} node Fix the tree below this node\n */\nexport function createCodeBlocks(node) {\n  if (!node.children?.length) return;\n\n  // TODO: identify *lines* that are all code (not just block elements) by\n  // splitting on `<br>` nodes, and break up parent blocks that have complete\n  // code lines in them.\n\n  const codeBlocks = [];\n  let activeCodeBlock = null;\n  for (let i = 0; i < node.children.length; i++) {\n    const child = node.children[i];\n    if (isBlock(child)) {\n      if (isAllTextCode(child)) {\n        if (!activeCodeBlock) {\n          activeCodeBlock = { start: i, end: 0 };\n          codeBlocks.push(activeCodeBlock);\n        }\n      }\n      else {\n        if (activeCodeBlock) {\n          activeCodeBlock.end = i;\n          activeCodeBlock = null;\n        }\n      }\n    }\n    else {\n      createCodeBlocks(child);\n    }\n  }\n  if (activeCodeBlock) {\n    activeCodeBlock.end = node.children.length;\n  }\n\n  // Go in reverse order so we can use the indexes as is, without worrying about\n  // how replacing each block changes the indexes of the next one.\n  for (const block of codeBlocks.reverse()) {\n    const length = block.end - block.start;\n    const contents = node.children\n      .slice(block.start, block.end)\n      .flatMap(node =>\n        // Unwrap paragraphs and replace them with their contents + a line break\n        // so we don't wind up adding blank lines around each line of code.\n        node.tagName === 'p'\n          ? [...node.children, {type:'element', tagName: 'br'}]\n          : [node]\n      );\n    node.children.splice(block.start, length, {\n      type: 'element',\n      tagName: 'pre',\n      children: [{\n        type: 'element',\n        tagName: 'code',\n        children: contents\n      }]\n    });\n  }\n}\n\nconst isChecklistItem = (node) => node.tagName === 'li' && node.properties?.role === 'checkbox';\n\n/**\n * Insert actual `<input>` checkboxes at the start of items in checklists.\n *\n * Google Docs checklists use ARIA attributes to indicate that items are\n * checklist items, and in some browsers include an image (!) of a checkbox.\n * Neither of these cleanly translate to Markdown on their own.\n * @param {RehypeNode} node Fix the tree below this node\n */\nfunction fixChecklists (node) {\n  visit(node, isChecklistItem, (node, _index, _parent) => {\n    // As of 2023-08-16, Chrome Canary starts checklist items with an inline,\n    // b64-encoded image of an (un)checked checkbox. Remove it so we don't get\n    // images in our Markdown output.\n    for (let i = 0; i < node.children.length; i++) {\n      const child = node.children[i];\n      if (child.type === 'element') {\n        if (\n          child.tagName === 'img' &&\n          child.properties?.ariaRoleDescription?.includes('checkbox')\n        ) {\n          node.children.splice(i, 1);\n        }\n        break;\n      }\n    }\n\n    const checked = node.properties.ariaChecked?.toLowerCase() === 'true';\n    // The checkbox must be in a <p> element.\n    // See: https://github.com/syntax-tree/hast-util-to-mdast/issues/80\n    node.children.splice(0, 0, {\n      type: 'element',\n      tagName: 'p',\n      children: [{\n        type: 'element',\n        tagName: 'input',\n        properties: { type: 'checkbox', checked }\n      }]\n    });\n  });\n}\n\n/**\n * A rehype plugin to clean up the HTML of a Google Doc. .This applies to the\n * live HTML of Doc, as when you copy and paste it; not *exported* HTML (it\n * might apply there, too; I haven’t looked into it).\n */\nexport default function fixGoogleHtml () {\n  return (tree, _file) => {\n    unInlineStyles(tree);\n    createCodeBlocks(tree);\n    moveSpaceOutsideSensitiveChildren(tree);\n    fixNestedLists(tree);\n    detectTableColumnAlignment(tree);\n    unwrapLineBreaks(tree);\n    removeLineBreaksBeforeBlocks(tree);\n    fixChecklists(tree);\n    return tree;\n  };\n}\n","export var webNamespaces = {\n  html: 'http://www.w3.org/1999/xhtml',\n  mathml: 'http://www.w3.org/1998/Math/MathML',\n  svg: 'http://www.w3.org/2000/svg',\n  xlink: 'http://www.w3.org/1999/xlink',\n  xml: 'http://www.w3.org/XML/1998/namespace',\n  xmlns: 'http://www.w3.org/2000/xmlns/'\n}\n","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n */\n\nconst search = /[#.]/g\n\n/**\n * Create a hast element from a simple CSS selector.\n *\n * @template {string} Selector\n *   Type of selector.\n * @template {string} [DefaultTagName='div']\n *   Type of default tag name.\n * @param {Selector | null | undefined} [selector]\n *   Simple CSS selector.\n *\n *   Can contain a tag name (`foo`), classes (`.bar`), and an ID (`#baz`).\n *   Multiple classes are allowed.\n *   Uses the last ID if multiple IDs are found.\n * @param {DefaultTagName | null | undefined} [defaultTagName='div']\n *   Tag name to use if `selector` does not specify one (default: `'div'`).\n * @returns {Element & {tagName: import('./extract.js').ExtractTagName<Selector, DefaultTagName>}}\n *   Built element.\n */\nexport function parseSelector(selector, defaultTagName) {\n  const value = selector || ''\n  /** @type {Properties} */\n  const props = {}\n  let start = 0\n  /** @type {string | undefined} */\n  let previous\n  /** @type {string | undefined} */\n  let tagName\n\n  while (start < value.length) {\n    search.lastIndex = start\n    const match = search.exec(value)\n    const subvalue = value.slice(start, match ? match.index : value.length)\n\n    if (subvalue) {\n      if (!previous) {\n        tagName = subvalue\n      } else if (previous === '#') {\n        props.id = subvalue\n      } else if (Array.isArray(props.className)) {\n        props.className.push(subvalue)\n      } else {\n        props.className = [subvalue]\n      }\n\n      start += subvalue.length\n    }\n\n    if (match) {\n      previous = match[0]\n      start++\n    }\n  }\n\n  return {\n    type: 'element',\n    // @ts-expect-error: fine.\n    tagName: tagName || defaultTagName || 'div',\n    properties: props,\n    children: []\n  }\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Content} Content\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n */\n\n/**\n * @typedef {Content | Root} Node\n *   Any concrete `hast` node.\n * @typedef {Root | Element} HResult\n *   Result from a `h` (or `s`) call.\n *\n * @typedef {string | number} HStyleValue\n *   Value for a CSS style field.\n * @typedef {Record<string, HStyleValue>} HStyle\n *   Supported value of a `style` prop.\n * @typedef {string | number | boolean | null | undefined} HPrimitiveValue\n *   Primitive property value.\n * @typedef {Array<string | number>} HArrayValue\n *   List of property values for space- or comma separated values (such as `className`).\n * @typedef {HPrimitiveValue | HArrayValue} HPropertyValue\n *   Primitive value or list value.\n * @typedef {{[property: string]: HPropertyValue | HStyle}} HProperties\n *   Acceptable value for element properties.\n *\n * @typedef {string | number | null | undefined} HPrimitiveChild\n *   Primitive children, either ignored (nullish), or turned into text nodes.\n * @typedef {Array<Node | HPrimitiveChild>} HArrayChild\n *   List of children.\n * @typedef {Node | HPrimitiveChild | HArrayChild} HChild\n *   Acceptable child value.\n */\n\nimport {find, normalize} from 'property-information'\nimport {parseSelector} from 'hast-util-parse-selector'\nimport {parse as spaces} from 'space-separated-tokens'\nimport {parse as commas} from 'comma-separated-tokens'\n\nconst buttonTypes = new Set(['menu', 'submit', 'reset', 'button'])\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Schema} schema\n * @param {string} defaultTagName\n * @param {Array<string>} [caseSensitive]\n */\nexport function core(schema, defaultTagName, caseSensitive) {\n  const adjust = caseSensitive && createAdjustMap(caseSensitive)\n\n  const h =\n    /**\n     * @type {{\n     *   (): Root\n     *   (selector: null | undefined, ...children: Array<HChild>): Root\n     *   (selector: string, properties?: HProperties, ...children: Array<HChild>): Element\n     *   (selector: string, ...children: Array<HChild>): Element\n     * }}\n     */\n    (\n      /**\n       * Hyperscript compatible DSL for creating virtual hast trees.\n       *\n       * @param {string | null} [selector]\n       * @param {HProperties | HChild} [properties]\n       * @param {Array<HChild>} children\n       * @returns {HResult}\n       */\n      function (selector, properties, ...children) {\n        let index = -1\n        /** @type {HResult} */\n        let node\n\n        if (selector === undefined || selector === null) {\n          node = {type: 'root', children: []}\n          // @ts-expect-error Properties are not supported for roots.\n          children.unshift(properties)\n        } else {\n          node = parseSelector(selector, defaultTagName)\n          // Normalize the name.\n          node.tagName = node.tagName.toLowerCase()\n          if (adjust && own.call(adjust, node.tagName)) {\n            node.tagName = adjust[node.tagName]\n          }\n\n          // Handle props.\n          if (isProperties(properties, node.tagName)) {\n            /** @type {string} */\n            let key\n\n            for (key in properties) {\n              if (own.call(properties, key)) {\n                // @ts-expect-error `node.properties` is set.\n                addProperty(schema, node.properties, key, properties[key])\n              }\n            }\n          } else {\n            children.unshift(properties)\n          }\n        }\n\n        // Handle children.\n        while (++index < children.length) {\n          addChild(node.children, children[index])\n        }\n\n        if (node.type === 'element' && node.tagName === 'template') {\n          node.content = {type: 'root', children: node.children}\n          node.children = []\n        }\n\n        return node\n      }\n    )\n\n  return h\n}\n\n/**\n * @param {HProperties | HChild} value\n * @param {string} name\n * @returns {value is HProperties}\n */\nfunction isProperties(value, name) {\n  if (\n    value === null ||\n    value === undefined ||\n    typeof value !== 'object' ||\n    Array.isArray(value)\n  ) {\n    return false\n  }\n\n  if (name === 'input' || !value.type || typeof value.type !== 'string') {\n    return true\n  }\n\n  if ('children' in value && Array.isArray(value.children)) {\n    return false\n  }\n\n  if (name === 'button') {\n    return buttonTypes.has(value.type.toLowerCase())\n  }\n\n  return !('value' in value)\n}\n\n/**\n * @param {Schema} schema\n * @param {Properties} properties\n * @param {string} key\n * @param {HStyle | HPropertyValue} value\n * @returns {void}\n */\nfunction addProperty(schema, properties, key, value) {\n  const info = find(schema, key)\n  let index = -1\n  /** @type {HPropertyValue} */\n  let result\n\n  // Ignore nullish and NaN values.\n  if (value === undefined || value === null) return\n\n  if (typeof value === 'number') {\n    // Ignore NaN.\n    if (Number.isNaN(value)) return\n\n    result = value\n  }\n  // Booleans.\n  else if (typeof value === 'boolean') {\n    result = value\n  }\n  // Handle list values.\n  else if (typeof value === 'string') {\n    if (info.spaceSeparated) {\n      result = spaces(value)\n    } else if (info.commaSeparated) {\n      result = commas(value)\n    } else if (info.commaOrSpaceSeparated) {\n      result = spaces(commas(value).join(' '))\n    } else {\n      result = parsePrimitive(info, info.property, value)\n    }\n  } else if (Array.isArray(value)) {\n    result = value.concat()\n  } else {\n    result = info.property === 'style' ? style(value) : String(value)\n  }\n\n  if (Array.isArray(result)) {\n    /** @type {Array<string | number>} */\n    const finalResult = []\n\n    while (++index < result.length) {\n      // @ts-expect-error Assume no booleans in array.\n      finalResult[index] = parsePrimitive(info, info.property, result[index])\n    }\n\n    result = finalResult\n  }\n\n  // Class names (which can be added both on the `selector` and here).\n  if (info.property === 'className' && Array.isArray(properties.className)) {\n    // @ts-expect-error Assume no booleans in `className`.\n    result = properties.className.concat(result)\n  }\n\n  properties[info.property] = result\n}\n\n/**\n * @param {Array<Content>} nodes\n * @param {HChild} value\n * @returns {void}\n */\nfunction addChild(nodes, value) {\n  let index = -1\n\n  if (value === undefined || value === null) {\n    // Empty.\n  } else if (typeof value === 'string' || typeof value === 'number') {\n    nodes.push({type: 'text', value: String(value)})\n  } else if (Array.isArray(value)) {\n    while (++index < value.length) {\n      addChild(nodes, value[index])\n    }\n  } else if (typeof value === 'object' && 'type' in value) {\n    if (value.type === 'root') {\n      addChild(nodes, value.children)\n    } else {\n      nodes.push(value)\n    }\n  } else {\n    throw new Error('Expected node, nodes, or string, got `' + value + '`')\n  }\n}\n\n/**\n * Parse a single primitives.\n *\n * @param {Info} info\n * @param {string} name\n * @param {HPrimitiveValue} value\n * @returns {HPrimitiveValue}\n */\nfunction parsePrimitive(info, name, value) {\n  if (typeof value === 'string') {\n    if (info.number && value && !Number.isNaN(Number(value))) {\n      return Number(value)\n    }\n\n    if (\n      (info.boolean || info.overloadedBoolean) &&\n      (value === '' || normalize(value) === normalize(name))\n    ) {\n      return true\n    }\n  }\n\n  return value\n}\n\n/**\n * Serialize a `style` object as a string.\n *\n * @param {HStyle} value\n *   Style object.\n * @returns {string}\n *   CSS string.\n */\nfunction style(value) {\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      result.push([key, value[key]].join(': '))\n    }\n  }\n\n  return result.join('; ')\n}\n\n/**\n * Create a map to adjust casing.\n *\n * @param {Array<string>} values\n *   List of properly cased keys.\n * @returns {Record<string, string>}\n *   Map of lowercase keys to uppercase keys.\n */\nfunction createAdjustMap(values) {\n  /** @type {Record<string, string>} */\n  const result = {}\n  let index = -1\n\n  while (++index < values.length) {\n    result[values[index].toLowerCase()] = values[index]\n  }\n\n  return result\n}\n","export const svgCaseSensitiveTagNames = [\n  'altGlyph',\n  'altGlyphDef',\n  'altGlyphItem',\n  'animateColor',\n  'animateMotion',\n  'animateTransform',\n  'clipPath',\n  'feBlend',\n  'feColorMatrix',\n  'feComponentTransfer',\n  'feComposite',\n  'feConvolveMatrix',\n  'feDiffuseLighting',\n  'feDisplacementMap',\n  'feDistantLight',\n  'feDropShadow',\n  'feFlood',\n  'feFuncA',\n  'feFuncB',\n  'feFuncG',\n  'feFuncR',\n  'feGaussianBlur',\n  'feImage',\n  'feMerge',\n  'feMergeNode',\n  'feMorphology',\n  'feOffset',\n  'fePointLight',\n  'feSpecularLighting',\n  'feSpotLight',\n  'feTile',\n  'feTurbulence',\n  'foreignObject',\n  'glyphRef',\n  'linearGradient',\n  'radialGradient',\n  'solidColor',\n  'textArea',\n  'textPath'\n]\n","/**\n * @typedef {import('./core.js').HChild} Child\n *   Acceptable child value.\n * @typedef {import('./core.js').HProperties} Properties\n *   Acceptable value for element properties.\n * @typedef {import('./core.js').HResult} Result\n *   Result from a `h` (or `s`) call.\n *\n * @typedef {import('./jsx-classic.js').Element} s.JSX.Element\n * @typedef {import('./jsx-classic.js').IntrinsicAttributes} s.JSX.IntrinsicAttributes\n * @typedef {import('./jsx-classic.js').IntrinsicElements} s.JSX.IntrinsicElements\n * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} s.JSX.ElementChildrenAttribute\n */\n\nimport {svg} from 'property-information'\nimport {core} from './core.js'\nimport {svgCaseSensitiveTagNames} from './svg-case-sensitive-tag-names.js'\n\nexport const s = core(svg, 'g', svgCaseSensitiveTagNames)\n","/**\n * @typedef {import('./core.js').HChild} Child\n *   Acceptable child value.\n * @typedef {import('./core.js').HProperties} Properties\n *   Acceptable value for element properties.\n * @typedef {import('./core.js').HResult} Result\n *   Result from a `h` (or `s`) call.\n *\n * @typedef {import('./jsx-classic.js').Element} h.JSX.Element\n * @typedef {import('./jsx-classic.js').IntrinsicAttributes} h.JSX.IntrinsicAttributes\n * @typedef {import('./jsx-classic.js').IntrinsicElements} h.JSX.IntrinsicElements\n * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} h.JSX.ElementChildrenAttribute\n */\n\nimport {html} from 'property-information'\nimport {core} from './core.js'\n\nexport const h = core(html, 'div')\n","/**\n * @typedef {import('hast').Parent} HastParent\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').DocType} HastDoctype\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('hast').Comment} HastComment\n * @typedef {HastParent['children'][number]} HastChild\n * @typedef {HastChild|HastRoot} HastNode\n */\n\nimport {webNamespaces} from 'web-namespaces'\nimport {h, s} from 'hastscript'\n\nconst ELEMENT_NODE = 1\nconst TEXT_NODE = 3\nconst COMMENT_NODE = 8\nconst DOCUMENT_NODE = 9\nconst DOCUMENT_TYPE_NODE = 10\nconst DOCUMENT_FRAGMENT_NODE = 11\n\n/**\n * @param {Node} node\n * @returns {HastNode|undefined}\n */\nfunction transform(node) {\n  switch (node.nodeType) {\n    case ELEMENT_NODE:\n      // @ts-expect-error TypeScript is wrong.\n      return element(node)\n    case DOCUMENT_NODE:\n    case DOCUMENT_FRAGMENT_NODE:\n      // @ts-expect-error TypeScript is wrong.\n      return root(node)\n    case TEXT_NODE:\n      // @ts-expect-error TypeScript is wrong.\n      return text(node)\n    case COMMENT_NODE:\n      // @ts-expect-error TypeScript is wrong.\n      return comment(node)\n    case DOCUMENT_TYPE_NODE:\n      return doctype()\n    default:\n      return undefined\n  }\n}\n\n/**\n * Transform a document.\n *\n * @param {Document|DocumentFragment} node\n * @returns {HastRoot}\n */\nfunction root(node) {\n  return {type: 'root', children: all(node)}\n}\n\n/**\n * Transform a doctype.\n *\n * @returns {HastDoctype}\n */\nfunction doctype() {\n  // @ts-expect-error hast types out of date.\n  return {type: 'doctype'}\n}\n\n/**\n * Transform a text.\n *\n * @param {Text} node\n * @returns {HastText}\n */\nfunction text(node) {\n  return {type: 'text', value: node.nodeValue || ''}\n}\n\n/**\n * Transform a comment.\n *\n * @param {Comment} node\n * @returns {HastComment}\n */\nfunction comment(node) {\n  return {type: 'comment', value: node.nodeValue || ''}\n}\n\n/**\n * Transform an element.\n *\n * @param {Element} node\n * @returns {HastElement}\n */\nfunction element(node) {\n  const space = node.namespaceURI\n  const fn = space === webNamespaces.svg ? s : h\n  const tagName =\n    space === webNamespaces.html ? node.tagName.toLowerCase() : node.tagName\n  /** @type {DocumentFragment|Element} */\n  const content =\n    // @ts-expect-error Types are wrong.\n    space === webNamespaces.html && tagName === 'template' ? node.content : node\n  const attributes = node.getAttributeNames()\n  /** @type {Object.<string, string>} */\n  const props = {}\n  let index = -1\n\n  while (++index < attributes.length) {\n    props[attributes[index]] = node.getAttribute(attributes[index]) || ''\n  }\n\n  return fn(tagName, props, all(content))\n}\n\n/**\n * Transform an element.\n *\n * @param {Document|DocumentFragment|Element} node\n * @returns {Array.<HastChild>}\n */\nfunction all(node) {\n  const nodes = node.childNodes\n  /** @type {Array.<HastChild>} */\n  const children = []\n  let index = -1\n\n  while (++index < nodes.length) {\n    const child = transform(nodes[index])\n\n    if (child !== undefined) {\n      // @ts-expect-error Assume no document inside document.\n      children.push(child)\n    }\n  }\n\n  return children\n}\n\n/**\n * @param {Node} node\n * @returns {HastNode}\n */\nexport function fromDom(node) {\n  return transform(node || {}) || {type: 'root', children: []}\n}\n","/**\n * @typedef {import('hast').Root} Root\n *\n * @typedef Options\n *   Configuration.\n * @property {boolean} [fragment=true]\n *   Specify whether to parse a fragment, instead of a complete document.\n *   In document mode, unopened `html`, `head`, and `body` elements are opened\n *   in just the right places.\n */\n\nimport {fromDom} from 'hast-util-from-dom'\n\n/** @type {import('unified').Plugin<[Options?] | Array<void>, string, Root>} */\nexport default function parse(options) {\n  const settings = /** @type {Options} */ (this.data('settings'))\n  const {fragment} = {...options, ...settings}\n\n  Object.assign(this, {Parser: parser})\n\n  /** @type {import('unified').ParserFunction<Root>} */\n  function parser(doc) {\n    const create =\n      fragment === null || fragment === undefined || fragment\n        ? createFragment\n        : createDocument\n    return /** @type {Root} */ (fromDom(create(doc)))\n  }\n}\n\nconst DOCUMENT_FRAGMENT_NODE = 11\n\n/**\n * @param {string} htmlString\n * @returns {DocumentFragment}\n */\nfunction createFragment(htmlString) {\n  const doc = createDocument('<!doctype html><body>' + htmlString)\n\n  /**\n   * Pretend as a DocumentFragment node,\n   * @see https://github.com/rehypejs/rehype-dom/pull/19 for more details\n   */\n  return /** @type {DocumentFragment} */ ({\n    nodeType: DOCUMENT_FRAGMENT_NODE,\n    childNodes: doc.body.childNodes\n  })\n}\n\n/**\n * @param {string} htmlString\n * @returns {Document}\n */\nfunction createDocument(htmlString) {\n  return new DOMParser().parseFromString(htmlString, 'text/html')\n}\n","export const own = {}.hasOwnProperty\n","/**\n * @typedef {import('../types.js').H} H\n */\n\n/**\n * @param {H} h\n * @param {string} value\n * @returns {string}\n */\nexport function wrapText(h, value) {\n  return h.wrapText ? value : value.replace(/\\r?\\n|\\r/g, ' ')\n}\n","/**\n * @typedef {import('./types.js').H} H\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').Parent} Parent\n * @typedef {import('./types.js').Handle} Handle\n * @typedef {import('./types.js').MdastNode} MdastNode\n */\n\nimport {all} from './all.js'\nimport {own} from './util/own.js'\nimport {wrapText} from './util/wrap-text.js'\n\n/**\n * @param {H} h\n * @param {Node} node\n * @param {Parent|undefined} parent\n * @returns {MdastNode|Array.<MdastNode>|void}\n */\nexport function one(h, node, parent) {\n  /** @type {Handle|undefined} */\n  let fn\n\n  if (node.type === 'element') {\n    if (node.properties && node.properties.dataMdast === 'ignore') {\n      return\n    }\n\n    if (own.call(h.handlers, node.tagName)) {\n      fn = h.handlers[node.tagName]\n    }\n  } else if (own.call(h.handlers, node.type)) {\n    fn = h.handlers[node.type]\n  }\n\n  if (typeof fn === 'function') {\n    return fn(h, node, parent)\n  }\n\n  return unknown(h, node)\n}\n\n/**\n * @type {Handle}\n * @param {Node} node\n */\nfunction unknown(h, node) {\n  // @ts-expect-error: Looks like a literal.\n  if (typeof node.value === 'string') {\n    // @ts-expect-error: Looks like a literal.\n    return h(node, 'text', wrapText(h, node.value))\n  }\n\n  return all(h, node)\n}\n","/**\n * @typedef {import('./types.js').H} H\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').Parent} Parent\n * @typedef {import('./types.js').Handle} Handle\n * @typedef {import('./types.js').MdastNode} MdastNode\n */\n\nimport {one} from './one.js'\n\n/**\n * @param {H} h\n * @param {Node} parent\n * @returns {Array.<MdastNode>}\n */\nexport function all(h, parent) {\n  /** @type {Array.<Node>} */\n  // @ts-expect-error Assume `parent` is a parent.\n  const nodes = parent.children || []\n  /** @type {Array.<MdastNode>} */\n  const values = []\n  let index = -1\n  let length = nodes.length\n  let child = nodes[index + 1]\n\n  // Trim initial and final `<br>`s.\n  // They’re not semantic per HTML, and they can’t be made in markdown things\n  // like paragraphs or headings.\n  while (child && child.type === 'element' && child.tagName === 'br') {\n    index++\n    child = nodes[index + 1]\n  }\n\n  child = nodes[length - 1]\n\n  while (\n    length - 1 > index &&\n    child &&\n    child.type === 'element' &&\n    child.tagName === 'br'\n  ) {\n    length--\n    child = nodes[length - 1]\n  }\n\n  while (++index < length) {\n    // @ts-expect-error assume `parent` is a parent.\n    const result = one(h, nodes[index], parent)\n\n    if (Array.isArray(result)) {\n      values.push(...result)\n    } else if (result) {\n      values.push(result)\n    }\n  }\n\n  return values\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('hast').Element} Element\n *\n * @typedef {string} TagName\n * @typedef {null|undefined|TagName|TestFunctionAnything|Array.<TagName|TestFunctionAnything>} Test\n */\n\n/**\n * @template {Element} T\n * @typedef {null|undefined|T['tagName']|TestFunctionPredicate<T>|Array.<T['tagName']|TestFunctionPredicate<T>>} PredicateTest\n */\n\n/**\n * Check if an element passes a test\n *\n * @callback TestFunctionAnything\n * @param {Element} element\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {boolean|void}\n */\n\n/**\n * Check if an element passes a certain node test\n *\n * @template {Element} X\n * @callback TestFunctionPredicate\n * @param {Element} element\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {element is X}\n */\n\n/**\n * Check if a node is an element and passes a certain node test\n *\n * @callback AssertAnything\n * @param {unknown} [node]\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {boolean}\n */\n\n/**\n * Check if a node is an element and passes a certain node test\n *\n * @template {Element} Y\n * @callback AssertPredicate\n * @param {unknown} [node]\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {node is Y}\n */\n\n// Check if `node` is an `element` and whether it passes the given test.\nexport const isElement =\n  /**\n   * Check if a node is an element and passes a test.\n   * When a `parent` node is known the `index` of node should also be given.\n   *\n   * @type {(\n   *   (() => false) &\n   *   (<T extends Element = Element>(node: unknown, test?: PredicateTest<T>, index?: number, parent?: Parent, context?: unknown) => node is T) &\n   *   ((node: unknown, test: Test, index?: number, parent?: Parent, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * Check if a node passes a test.\n     * When a `parent` node is known the `index` of node should also be given.\n     *\n     * @param {unknown} [node] Node to check\n     * @param {Test} [test] When nullish, checks if `node` is a `Node`.\n     * When `string`, works like passing `function (node) {return node.type === test}`.\n     * When `function` checks if function passed the node is true.\n     * When `array`, checks any one of the subtests pass.\n     * @param {number} [index] Position of `node` in `parent`\n     * @param {Parent} [parent] Parent of `node`\n     * @param {unknown} [context] Context object to invoke `test` with\n     * @returns {boolean} Whether test passed and `node` is an `Element` (object with `type` set to `element` and `tagName` set to a non-empty string).\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convertElement(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index for child node')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!parent.type || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      // @ts-expect-error Looks like a node.\n      if (!node || !node.type || typeof node.type !== 'string') {\n        return false\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return check.call(context, node, index, parent)\n    }\n  )\n\nexport const convertElement =\n  /**\n   * @type {(\n   *   (<T extends Element>(test: T['tagName']|TestFunctionPredicate<T>) => AssertPredicate<T>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * Generate an assertion from a check.\n     * @param {Test} [test]\n     * When nullish, checks if `node` is a `Node`.\n     * When `string`, works like passing `function (node) {return node.type === test}`.\n     * When `function` checks if function passed the node is true.\n     * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n     * When `array`, checks any one of the subtests pass.\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return element\n      }\n\n      if (typeof test === 'string') {\n        return tagNameFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return anyFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or array as test')\n    }\n  )\n\n/**\n * @param {Array.<TagName|TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array.<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convertElement(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {unknown[]} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) {\n        return true\n      }\n    }\n\n    return false\n  }\n}\n\n/**\n * Utility to convert a string into a function which checks a given node’s tag\n * name for said string.\n *\n * @param {TagName} check\n * @returns {AssertAnything}\n */\nfunction tagNameFactory(check) {\n  return tagName\n\n  /**\n   * @param {unknown} node\n   * @returns {boolean}\n   */\n  function tagName(node) {\n    return element(node) && node.tagName === check\n  }\n}\n\n/**\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array.<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    // @ts-expect-error: fine.\n    return element(node) && Boolean(check.call(this, node, ...parameters))\n  }\n}\n\n/**\n * Utility to return true if this is an element.\n * @param {unknown} node\n * @returns {node is Element}\n */\nfunction element(node) {\n  return Boolean(\n    node &&\n      typeof node === 'object' &&\n      // @ts-expect-error Looks like a node.\n      node.type === 'element' &&\n      // @ts-expect-error Looks like an element.\n      typeof node.tagName === 'string'\n  )\n}\n","/**\n * @typedef {import('hast').Element & {tagName: 'audio'|'canvas'|'embed'|'iframe'|'img'|'math'|'object'|'picture'|'svg'|'video'}} Embedded\n * @typedef {import('hast-util-is-element').AssertPredicate<Embedded>} AssertEmbedded\n */\n\nimport {convertElement} from 'hast-util-is-element'\n\n/**\n * Check if a node is an embedded element.\n * @type {AssertEmbedded}\n */\n// @ts-ignore Sure, the assertion matches.\nexport const embedded = convertElement([\n  'audio',\n  'canvas',\n  'embed',\n  'iframe',\n  'img',\n  'math',\n  'object',\n  'picture',\n  'svg',\n  'video'\n])\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","// See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>\nexport const blocks = [\n  'address', // Flow content.\n  'article', // Sections and headings.\n  'aside', // Sections and headings.\n  'blockquote', // Flow content.\n  'body', // Page.\n  'br', // Contribute whitespace intrinsically.\n  'caption', // Similar to block.\n  'center', // Flow content, legacy.\n  'col', // Similar to block.\n  'colgroup', // Similar to block.\n  'dd', // Lists.\n  'dialog', // Flow content.\n  'dir', // Lists, legacy.\n  'div', // Flow content.\n  'dl', // Lists.\n  'dt', // Lists.\n  'figcaption', // Flow content.\n  'figure', // Flow content.\n  'footer', // Flow content.\n  'form', // Flow content.\n  'h1', // Sections and headings.\n  'h2', // Sections and headings.\n  'h3', // Sections and headings.\n  'h4', // Sections and headings.\n  'h5', // Sections and headings.\n  'h6', // Sections and headings.\n  'head', // Page.\n  'header', // Flow content.\n  'hgroup', // Sections and headings.\n  'hr', // Flow content.\n  'html', // Page.\n  'legend', // Flow content.\n  'li', // Block-like.\n  'li', // Similar to block.\n  'listing', // Flow content, legacy\n  'main', // Flow content.\n  'menu', // Lists.\n  'nav', // Sections and headings.\n  'ol', // Lists.\n  'optgroup', // Similar to block.\n  'option', // Similar to block.\n  'p', // Flow content.\n  'plaintext', // Flow content, legacy\n  'pre', // Flow content.\n  'section', // Sections and headings.\n  'summary', // Similar to block.\n  'table', // Similar to block.\n  'tbody', // Similar to block.\n  'td', // Block-like.\n  'td', // Similar to block.\n  'tfoot', // Similar to block.\n  'th', // Block-like.\n  'th', // Similar to block.\n  'thead', // Similar to block.\n  'tr', // Similar to block.\n  'ul', // Lists.\n  'wbr', // Contribute whitespace intrinsically.\n  'xmp' // Flow content, legacy\n]\n","export const content = [\n  // Form.\n  'button',\n  'input',\n  'select',\n  'textarea'\n]\n","export const skippable = [\n  'area',\n  'base',\n  'basefont',\n  'dialog',\n  'datalist',\n  'head',\n  'link',\n  'meta',\n  'noembed',\n  'noframes',\n  'param',\n  'rp',\n  'script',\n  'source',\n  'style',\n  'template',\n  'track',\n  'title'\n]\n","/**\n * rehype plugin to minify whitespace between elements.\n *\n * ## What is this?\n *\n * This package is a plugin that can minify the whitespace between elements.\n *\n * ## When should I use this?\n *\n * You can use this plugin when you want to improve the size of HTML documents.\n *\n * ## API\n *\n * ### `unified().use(rehypeMinifyWhitespace[, options])`\n *\n * Minify whitespace.\n *\n * ##### `options`\n *\n * Configuration (optional).\n *\n * ##### `options.newlines`\n *\n * Whether to collapse runs of whitespace that include line endings to one\n * line ending (`boolean`, default: `false`).\n * The default is to collapse everything to one space.\n *\n * @example\n *   <h1>Heading</h1>\n *   <p><strong>This</strong> and <em>that</em></p>\n */\n\n/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {Root|Root['children'][number]} Node\n *\n * @typedef Options\n * @property {boolean} [newlines=false]\n *   If `newlines: true`, collapses whitespace containing newlines to `'\\n'`\n *   instead of `' '`.\n *   The default is to collapse to a single space.\n *\n * @typedef {'pre'|'nowrap'|'pre-wrap'|'normal'} Whitespace\n *\n * @typedef Context\n * @property {ReturnType<collapseFactory>} collapse\n * @property {Whitespace} whitespace\n * @property {boolean} [before]\n * @property {boolean} [after]\n *\n * @typedef Result\n * @property {boolean} remove\n * @property {boolean} ignore\n * @property {boolean} stripAtStart\n */\n\nimport {isElement} from 'hast-util-is-element'\nimport {embedded} from 'hast-util-embedded'\nimport {convert} from 'unist-util-is'\nimport {whitespace} from 'hast-util-whitespace'\nimport {blocks} from './block.js'\nimport {content as contents} from './content.js'\nimport {skippable as skippables} from './skippable.js'\n\nconst ignorableNode = convert(['doctype', 'comment'])\n\n/**\n * Minify whitespace.\n *\n * @type {import('unified').Plugin<[Options?]|Array<void>, Root>}\n */\nexport default function rehypeMinifyWhitespace(options = {}) {\n  const collapse = collapseFactory(\n    options.newlines ? replaceNewlines : replaceWhitespace\n  )\n\n  return (tree) => {\n    minify(tree, {collapse, whitespace: 'normal'})\n  }\n}\n\n/**\n * @param {Node} node\n * @param {Context} context\n * @returns {Result}\n */\nfunction minify(node, context) {\n  if ('children' in node) {\n    const settings = Object.assign({}, context)\n\n    if (node.type === 'root' || blocklike(node)) {\n      settings.before = true\n      settings.after = true\n    }\n\n    settings.whitespace = inferWhiteSpace(node, context)\n\n    return all(node, settings)\n  }\n\n  if (node.type === 'text') {\n    if (context.whitespace === 'normal') {\n      return minifyText(node, context)\n    }\n\n    // Naïve collapse, but no trimming:\n    if (context.whitespace === 'nowrap') {\n      node.value = context.collapse(node.value)\n    }\n\n    // The `pre-wrap` or `pre` whitespace settings are neither collapsed nor\n    // trimmed.\n  }\n\n  return {remove: false, ignore: ignorableNode(node), stripAtStart: false}\n}\n\n/**\n * @param {Text} node\n * @param {Context} context\n * @returns {Result}\n */\nfunction minifyText(node, context) {\n  const value = context.collapse(node.value)\n  const result = {remove: false, ignore: false, stripAtStart: false}\n  let start = 0\n  let end = value.length\n\n  if (context.before && removable(value.charAt(0))) {\n    start++\n  }\n\n  if (start !== end && removable(value.charAt(end - 1))) {\n    if (context.after) {\n      end--\n    } else {\n      result.stripAtStart = true\n    }\n  }\n\n  if (start === end) {\n    result.remove = true\n  } else {\n    node.value = value.slice(start, end)\n  }\n\n  return result\n}\n\n/**\n * @param {Root|Element} parent\n * @param {Context} context\n * @returns {Result}\n */\nfunction all(parent, context) {\n  let before = context.before\n  const after = context.after\n  const children = parent.children\n  let length = children.length\n  let index = -1\n\n  while (++index < length) {\n    const result = minify(\n      children[index],\n      Object.assign({}, context, {\n        before,\n        after: collapsableAfter(children, index, after)\n      })\n    )\n\n    if (result.remove) {\n      children.splice(index, 1)\n      index--\n      length--\n    } else if (!result.ignore) {\n      before = result.stripAtStart\n    }\n\n    // If this element, such as a `<select>` or `<img>`, contributes content\n    // somehow, allow whitespace again.\n    if (content(children[index])) {\n      before = false\n    }\n  }\n\n  return {remove: false, ignore: false, stripAtStart: Boolean(before || after)}\n}\n\n/**\n * @param {Array<Node>} nodes\n * @param {number} index\n * @param {boolean|undefined} [after]\n * @returns {boolean|undefined}\n */\nfunction collapsableAfter(nodes, index, after) {\n  while (++index < nodes.length) {\n    const node = nodes[index]\n    let result = inferBoundary(node)\n\n    if (result === undefined && 'children' in node && !skippable(node)) {\n      result = collapsableAfter(node.children, -1)\n    }\n\n    if (typeof result === 'boolean') {\n      return result\n    }\n  }\n\n  return after\n}\n\n/**\n * Infer two types of boundaries:\n *\n * 1. `true` — boundary for which whitespace around it does not contribute\n *    anything\n * 2. `false` — boundary for which whitespace around it *does* contribute\n *\n * No result (`undefined`) is returned if it is unknown.\n *\n * @param {Node} node\n * @returns {boolean|undefined}\n */\nfunction inferBoundary(node) {\n  if (node.type === 'element') {\n    if (content(node)) {\n      return false\n    }\n\n    if (blocklike(node)) {\n      return true\n    }\n\n    // Unknown: either depends on siblings if embedded or metadata, or on\n    // children.\n  } else if (node.type === 'text') {\n    if (!whitespace(node)) {\n      return false\n    }\n  } else if (!ignorableNode(node)) {\n    return false\n  }\n}\n\n/**\n * Infer whether a node is skippable.\n *\n * @param {Node} node\n * @returns {boolean}\n */\nfunction content(node) {\n  return embedded(node) || isElement(node, contents)\n}\n\n/**\n * See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>\n *\n * @param {Element} node\n * @returns {boolean}\n */\nfunction blocklike(node) {\n  return isElement(node, blocks)\n}\n\n/**\n * @param {Element|Root} node\n * @returns {boolean}\n */\nfunction skippable(node) {\n  return (\n    Boolean(\n      'properties' in node && node.properties && node.properties.hidden\n    ) ||\n    ignorableNode(node) ||\n    isElement(node, skippables)\n  )\n}\n\n/**\n * @param {string} character\n * @returns {boolean}\n */\nfunction removable(character) {\n  return character === ' ' || character === '\\n'\n}\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction replaceNewlines(value) {\n  const match = /\\r?\\n|\\r/.exec(value)\n  return match ? match[0] : ' '\n}\n\n/**\n * @returns {string}\n */\nfunction replaceWhitespace() {\n  return ' '\n}\n\n/**\n * @param {(value: string) => string} replace\n */\nfunction collapseFactory(replace) {\n  return collapse\n\n  /**\n   * @param {string} value\n   * @returns {string}\n   */\n  function collapse(value) {\n    return String(value).replace(/[\\t\\n\\v\\f\\r ]+/g, replace)\n  }\n}\n\n/**\n * We don’t need to support void elements here (so `nobr wbr` -> `normal` is\n * ignored).\n *\n * @param {Root|Element} node\n * @param {Context} context\n * @returns {Whitespace}\n */\nfunction inferWhiteSpace(node, context) {\n  if ('tagName' in node && node.properties) {\n    switch (node.tagName) {\n      // Whitespace in script/style, while not displayed by CSS as significant,\n      // could have some meaning in JS/CSS, so we can’t touch them.\n      case 'listing':\n      case 'plaintext':\n      case 'script':\n      case 'style':\n      case 'xmp':\n        return 'pre'\n      case 'nobr':\n        return 'nowrap'\n      case 'pre':\n        return node.properties.wrap ? 'pre-wrap' : 'pre'\n      case 'td':\n      case 'th':\n        return node.properties.noWrap ? 'nowrap' : context.whitespace\n      case 'textarea':\n        return 'pre-wrap'\n      default:\n    }\n  }\n\n  return context.whitespace\n}\n","/**\n * @param {unknown} thing\n * @returns {boolean}\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  var value =\n    // @ts-ignore looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-ignore looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://html.spec.whatwg.org/#space-character>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('unist-util-is').AssertPredicate<PhrasingContent>} AssertPredicatePhrasing\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * @type {AssertPredicatePhrasing}\n */\n// @ts-ignore hush, it’s fine!\nexport const phrasing = convert([\n  'break',\n  'delete',\n  'emphasis',\n  'footnote',\n  'footnoteReference',\n  'image',\n  'imageReference',\n  'inlineCode',\n  'link',\n  'linkReference',\n  'strong',\n  'text'\n])\n","/**\n * @typedef {import('../types.js').H} H\n * @typedef {import('../types.js').MdastNode} MdastNode\n * @typedef {import('../types.js').MdastPhrasingContent} MdastPhrasingContent\n */\n\nimport extend from 'extend'\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Array.<MdastNode>} nodes\n */\nexport function wrap(nodes) {\n  return runs(nodes, onphrasing)\n\n  /**\n   * @param {Array.<MdastPhrasingContent>} nodes\n   * @returns {MdastNode|Array.<MdastNode>}\n   */\n  function onphrasing(nodes) {\n    const head = nodes[0]\n\n    if (\n      nodes.length === 1 &&\n      head.type === 'text' &&\n      (head.value === ' ' || head.value === '\\n')\n    ) {\n      return []\n    }\n\n    return {type: 'paragraph', children: nodes}\n  }\n}\n\n/**\n * Check if there are non-phrasing mdast nodes returned.\n * This is needed if a fragment is given, which could just be a sentence, and\n * doesn’t need a wrapper paragraph.\n *\n * @param {Array.<MdastNode>} nodes\n * @returns {boolean}\n */\nexport function wrapNeeded(nodes) {\n  let index = -1\n  /** @type {MdastNode} */\n  let node\n\n  while (++index < nodes.length) {\n    node = nodes[index]\n\n    if (!phrasing(node) || ('children' in node && wrapNeeded(node.children))) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Wrap all runs of mdast phrasing content in `paragraph` nodes.\n *\n * @param {Array.<MdastNode>} nodes\n * @param {(nodes: Array.<MdastPhrasingContent>) => MdastNode|Array.<MdastNode>} onphrasing\n * @param {(node: MdastNode) => MdastNode} [onnonphrasing]\n */\nfunction runs(nodes, onphrasing, onnonphrasing) {\n  const nonphrasing = onnonphrasing || identity\n  /** @type {Array.<MdastNode>} */\n  const flattened = flatten(nodes)\n  /** @type {Array.<MdastNode>} */\n  let result = []\n  let index = -1\n  /** @type {Array.<MdastPhrasingContent>|undefined} */\n  let queue\n  /** @type {MdastNode} */\n  let node\n\n  while (++index < flattened.length) {\n    node = flattened[index]\n\n    if (phrasing(node)) {\n      if (!queue) queue = []\n      queue.push(node)\n    } else {\n      if (queue) {\n        result = result.concat(onphrasing(queue))\n        queue = undefined\n      }\n\n      result = result.concat(nonphrasing(node))\n    }\n  }\n\n  if (queue) {\n    result = result.concat(onphrasing(queue))\n  }\n\n  return result\n}\n\n/**\n * Flatten a list of nodes.\n *\n * @param {Array.<MdastNode>} nodes\n * @returns {Array.<MdastNode>}\n */\nfunction flatten(nodes) {\n  /** @type {Array.<MdastNode>} */\n  let flattened = []\n  let index = -1\n  /** @type {MdastNode} */\n  let node\n\n  while (++index < nodes.length) {\n    node = nodes[index]\n\n    // Straddling: some elements are *weird*.\n    // Namely: `map`, `ins`, `del`, and `a`, as they are hybrid elements.\n    // See: <https://html.spec.whatwg.org/#paragraphs>.\n    // Paragraphs are the weirdest of them all.\n    // See the straddling fixture for more info!\n    // `ins` is ignored in mdast, so we don’t need to worry about that.\n    // `map` maps to its content, so we don’t need to worry about that either.\n    // `del` maps to `delete` and `a` to `link`, so we do handle those.\n    // What we’ll do is split `node` over each of its children.\n    if (\n      (node.type === 'delete' || node.type === 'link') &&\n      wrapNeeded(node.children)\n    ) {\n      flattened = flattened.concat(split(node))\n    } else {\n      flattened.push(node)\n    }\n  }\n\n  return flattened\n}\n\n/**\n * @param {MdastNode} node\n * @returns {Array.<MdastNode>}\n */\nfunction split(node) {\n  // @ts-expect-error Assume parent.\n  return runs(node.children, onphrasing, onnonphrasing)\n\n  /**\n   * Use `child`, add `parent` as its first child, put the original children\n   * into `parent`.\n   * If `child` is not a parent, `parent` will not be added.\n   *\n   * @param {MdastNode} child\n   * @returns {MdastNode}\n   */\n  function onnonphrasing(child) {\n    if ('children' in child && 'children' in node) {\n      const {children, ...rest} = node\n      return {\n        ...child,\n        // @ts-expect-error: assume matching parent & child.\n        children: [{...extend(true, {}, rest), children: child.children}]\n      }\n    }\n\n    return {...child}\n  }\n\n  /**\n   * Use `parent`, put the phrasing run inside it.\n   *\n   * @param {Array.<MdastPhrasingContent>} nodes\n   * @returns {MdastNode}\n   */\n  function onphrasing(nodes) {\n    // @ts-expect-error: assume parent.\n    const {children, ...rest} = node\n    // @ts-expect-error: assume matching parent & child.\n    return {...extend(true, {}, rest), children: nodes}\n  }\n}\n\n/**\n * @template {unknown} T\n * @param {T} n\n * @returns {T}\n */\nfunction identity(n) {\n  return n\n}\n","/**\n * @typedef {import('../types.js').H} H\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').MdastNode} MdastNode\n */\n\nimport {all} from '../all.js'\nimport {wrap} from './wrap.js'\n\n/**\n * @param {H} h\n * @param {Node} node\n * @returns {Array.<MdastNode>}\n */\nexport function wrapChildren(h, node) {\n  return wrap(all(h, node))\n}\n","/**\n * @typedef {import('../types.js').H} H\n */\n\n/**\n * @param {H} h\n * @param {string|null|undefined} url\n * @returns {string}\n */\nexport function resolve(h, url) {\n  if (url === null || url === undefined) {\n    return ''\n  }\n\n  if (h.frozenBaseUrl) {\n    return String(new URL(url, h.frozenBaseUrl))\n  }\n\n  return url\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n *\n * @typedef {import('unist-util-is').Type} Type\n * @typedef {import('unist-util-is').Props} Props\n * @typedef {import('unist-util-is').TestFunctionAnything} TestFunctionAnything\n */\n\nimport {convert} from 'unist-util-is'\n\nexport var findAfter =\n  /**\n   * @type {(\n   *  (<T extends Node>(node: Parent, index: Node|number, test: T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>|Array.<T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>>) => T|null) &\n   *  ((node: Parent, index: Node|number, test?: null|undefined|Type|Props|TestFunctionAnything|Array<Type|Props|TestFunctionAnything>) => Node|null)\n   * )}\n   */\n  (\n    /**\n     * @param {Parent} parent Parent node\n     * @param {Node|number} index Child of `parent`, or it’s index\n     * @param {null|undefined|Type|Props|TestFunctionAnything|Array<Type|Props|TestFunctionAnything>} [test] is-compatible test (such as a type)\n     * @returns {Node|null}\n     */\n    function (parent, index, test) {\n      var is = convert(test)\n\n      if (!parent || !parent.type || !parent.children) {\n        throw new Error('Expected parent node')\n      }\n\n      if (typeof index === 'number') {\n        if (index < 0 || index === Number.POSITIVE_INFINITY) {\n          throw new Error('Expected positive finite number as index')\n        }\n      } else {\n        index = parent.children.indexOf(index)\n\n        if (index < 0) {\n          throw new Error('Expected child node or index')\n        }\n      }\n\n      while (++index < parent.children.length) {\n        if (is(parent.children[index], index, parent)) {\n          return parent.children[index]\n        }\n      }\n\n      return null\n    }\n  )\n","/**\n * @typedef {import('hast-util-is-element').TestFunctionAnything} TestFunctionAnything\n * @typedef {import('hast').Parent['children'][number]} HastChild\n * @typedef {import('hast').Text} HastText\n * @typedef {import('hast').Comment} HastComment\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {HastChild|HastRoot} HastNode\n * @typedef {HastRoot|HastElement} HastParent\n *\n * @typedef {'normal'|'pre'|'nowrap'|'pre-wrap'} Whitespace\n * @typedef {boolean} BreakValue\n * @typedef {1|2} BreakNumber\n * @typedef {'\\n'} BreakForce\n * @typedef {BreakValue|BreakNumber|undefined} BreakBefore\n * @typedef {BreakValue|BreakNumber|BreakForce|undefined} BreakAfter\n *\n * @typedef CollectionOptions\n * @property {Whitespace} whitespace\n * @property {BreakBefore} breakBefore\n * @property {BreakAfter} breakAfter\n *\n * @typedef Options\n *   Configuration.\n * @property {Whitespace} [whitespace='normal']\n *   Initial CSS whitespace setting to use.\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {findAfter} from 'unist-util-find-after'\n\nconst searchLineFeeds = /\\n/g\nconst searchTabOrSpaces = /[\\t ]+/g\n\nconst br = convertElement('br')\nconst p = convertElement('p')\nconst cell = convertElement(['th', 'td'])\nconst row = convertElement('tr')\n\n// Note that we don’t need to include void elements here as they don’t have text.\n// See: <https://github.com/wooorm/html-void-elements>\nconst notRendered = convertElement([\n  // List from: <https://html.spec.whatwg.org/#hidden-elements>\n  'datalist',\n  'head',\n  'noembed',\n  'noframes',\n  'noscript', // Act as if we support scripting.\n  'rp',\n  'script',\n  'style',\n  'template',\n  'title',\n  // Hidden attribute.\n  hidden,\n  // From: <https://html.spec.whatwg.org/#flow-content-3>\n  closedDialog\n])\n\n// See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>\nconst blockOrCaption = convertElement([\n  'address', // Flow content\n  'article', // Sections and headings\n  'aside', // Sections and headings\n  'blockquote', // Flow content\n  'body', // Page\n  'caption', // `table-caption`\n  'center', // Flow content (legacy)\n  'dd', // Lists\n  'dialog', // Flow content\n  'dir', // Lists (legacy)\n  'dl', // Lists\n  'dt', // Lists\n  'div', // Flow content\n  'figure', // Flow content\n  'figcaption', // Flow content\n  'footer', // Flow content\n  'form,', // Flow content\n  'h1', // Sections and headings\n  'h2', // Sections and headings\n  'h3', // Sections and headings\n  'h4', // Sections and headings\n  'h5', // Sections and headings\n  'h6', // Sections and headings\n  'header', // Flow content\n  'hgroup', // Sections and headings\n  'hr', // Flow content\n  'html', // Page\n  'legend', // Flow content\n  'listing', // Flow content (legacy)\n  'main', // Flow content\n  'menu', // Lists\n  'nav', // Sections and headings\n  'ol', // Lists\n  'p', // Flow content\n  'plaintext', // Flow content (legacy)\n  'pre', // Flow content\n  'section', // Sections and headings\n  'ul', // Lists\n  'xmp' // Flow content (legacy)\n])\n\n/**\n * Implementation of the `innerText` getter:\n * <https://html.spec.whatwg.org/#the-innertext-idl-attribute>\n * Note that we act as if `node` is being rendered, and as if we’re a\n * CSS-supporting user agent.\n *\n * @param {HastNode} node\n * @param {Options} [options={}]\n * @returns {string}\n */\nexport function toText(node, options = {}) {\n  /** @type {Array.<HastChild>} */\n  // @ts-ignore looks like a parent.\n  const children = node.children || []\n  const block = blockOrCaption(node)\n  const whitespace = inferWhitespace(node, {\n    whitespace: options.whitespace || 'normal',\n    breakBefore: false,\n    breakAfter: false\n  })\n  let index = -1\n  /** @type {Array.<string|BreakNumber>} */\n  let results\n  /** @type {string|BreakNumber} */\n  let value\n  /** @type {number|undefined} */\n  let count\n\n  // Treat `text` and `comment` as having normal white-space.\n  // This deviates from the spec as in the DOM the node’s `.data` has to be\n  // returned.\n  // If you want that behavior use `hast-util-to-string`.\n  // All other nodes are later handled as if they are `element`s (so the\n  // algorithm also works on a `root`).\n  // Nodes without children are treated as a void element, so `doctype` is thus\n  // ignored.\n  if (node.type === 'text' || node.type === 'comment') {\n    return collectText(node, {whitespace, breakBefore: true, breakAfter: true})\n  }\n\n  // 1.  If this element is not being rendered, or if the user agent is a\n  //     non-CSS user agent, then return the same value as the textContent IDL\n  //     attribute on this element.\n  //\n  //     Note: we’re not supporting stylesheets so we’re acting as if the node\n  //     is rendered.\n  //\n  //     If you want that behavior use `hast-util-to-string`.\n  //     Important: we’ll have to account for this later though.\n\n  // 2.  Let results be a new empty list.\n  results = []\n\n  // 3.  For each child node node of this element:\n  while (++index < children.length) {\n    // 3.1. Let current be the list resulting in running the inner text\n    //      collection steps with node.\n    //      Each item in results will either be a JavaScript string or a\n    //      positive integer (a required line break count).\n    // 3.2. For each item item in current, append item to results.\n    results = results.concat(\n      // @ts-ignore Looks like a parent.\n      innerTextCollection(children[index], node, {\n        whitespace,\n        breakBefore: index ? null : block,\n        breakAfter:\n          index < children.length - 1 ? br(children[index + 1]) : block\n      })\n    )\n  }\n\n  // 4.  Remove any items from results that are the empty string.\n  // 5.  Remove any runs of consecutive required line break count items at the\n  //     start or end of results.\n  // 6.  Replace each remaining run of consecutive required line break count\n  //     items with a string consisting of as many U+000A LINE FEED (LF)\n  //     characters as the maximum of the values in the required line break\n  //     count items.\n  index = -1\n  /** @type {Array.<string>} */\n  const result = []\n\n  while (++index < results.length) {\n    value = results[index]\n\n    if (typeof value === 'number') {\n      if (count !== undefined && value > count) count = value\n    } else if (value) {\n      if (count) result.push('\\n'.repeat(count))\n      count = 0\n      result.push(value)\n    }\n  }\n\n  // 7.  Return the concatenation of the string items in results.\n  return result.join('')\n}\n\n/**\n * <https://html.spec.whatwg.org/#inner-text-collection-steps>\n *\n * @param {HastNode} node\n * @param {HastParent} parent\n * @param {CollectionOptions} options\n * @returns {Array.<string|BreakNumber>}\n */\nfunction innerTextCollection(node, parent, options) {\n  if (node.type === 'element') {\n    return collectElement(node, parent, options)\n  }\n\n  if (node.type === 'text') {\n    return [\n      options.whitespace === 'normal'\n        ? collectText(node, options)\n        : collectPreText(node)\n    ]\n  }\n\n  return []\n}\n\n/**\n * Collect an element.\n *\n * @param {HastElement} node\n * @param {HastParent} parent\n * @param {CollectionOptions} options\n */\nfunction collectElement(node, parent, options) {\n  // First we infer the `white-space` property.\n  const whitespace = inferWhitespace(node, options)\n  const children = node.children || []\n  let index = -1\n  /** @type {Array.<string|BreakNumber>} */\n  let items = []\n  /** @type {BreakNumber|undefined} */\n  let prefix\n  /** @type {BreakNumber|BreakForce|undefined} */\n  let suffix\n\n  // We’re ignoring point 3, and exiting without any content here, because we\n  // deviated from the spec in `toText` at step 3.\n  if (notRendered(node)) {\n    return items\n  }\n\n  // Note: we first detect if there is going to be a break before or after the\n  // contents, as that changes the white-space handling.\n\n  // 2.  If node’s computed value of `visibility` is not `visible`, then return\n  //     items.\n  //\n  //     Note: Ignored, as everything is visible by default user agent styles.\n\n  // 3.  If node is not being rendered, then return items. [...]\n  //\n  //     Note: We already did this above.\n\n  // See `collectText` for step 4.\n\n  // 5.  If node is a `<br>` element, then append a string containing a single\n  //     U+000A LINE FEED (LF) character to items.\n  if (br(node)) {\n    suffix = '\\n'\n  }\n\n  // 7.  If node’s computed value of `display` is `table-row`, and node’s CSS\n  //     box is not the last `table-row` box of the nearest ancestor `table`\n  //     box, then append a string containing a single U+000A LINE FEED (LF)\n  //     character to items.\n  //\n  //     See: <https://html.spec.whatwg.org/#tables-2>\n  //     Note: needs further investigation as this does not account for implicit\n  //     rows.\n  else if (row(node) && findAfter(parent, node, row)) {\n    suffix = '\\n'\n  }\n\n  // 8.  If node is a `<p>` element, then append 2 (a required line break count)\n  //     at the beginning and end of items.\n  else if (p(node)) {\n    prefix = 2\n    suffix = 2\n  }\n\n  // 9.  If node’s used value of `display` is block-level or `table-caption`,\n  //     then append 1 (a required line break count) at the beginning and end of\n  //     items.\n  else if (blockOrCaption(node)) {\n    prefix = 1\n    suffix = 1\n  }\n\n  // 1.  Let items be the result of running the inner text collection steps with\n  //     each child node of node in tree order, and then concatenating the\n  //     results to a single list.\n  while (++index < children.length) {\n    items = items.concat(\n      innerTextCollection(children[index], node, {\n        whitespace,\n        breakBefore: index ? undefined : prefix,\n        breakAfter:\n          index < children.length - 1 ? br(children[index + 1]) : suffix\n      })\n    )\n  }\n\n  // 6.  If node’s computed value of `display` is `table-cell`, and node’s CSS\n  //     box is not the last `table-cell` box of its enclosing `table-row` box,\n  //     then append a string containing a single U+0009 CHARACTER TABULATION\n  //     (tab) character to items.\n  //\n  //     See: <https://html.spec.whatwg.org/#tables-2>\n  if (cell(node) && findAfter(parent, node, cell)) {\n    items.push('\\t')\n  }\n\n  // Add the pre- and suffix.\n  if (prefix) items.unshift(prefix)\n  if (suffix) items.push(suffix)\n\n  return items\n}\n\n/**\n * 4.  If node is a Text node, then for each CSS text box produced by node,\n *     in content order, compute the text of the box after application of the\n *     CSS `white-space` processing rules and `text-transform` rules, set\n *     items to the list of the resulting strings, and return items.\n *     The CSS `white-space` processing rules are slightly modified:\n *     collapsible spaces at the end of lines are always collapsed, but they\n *     are only removed if the line is the last line of the block, or it ends\n *     with a br element.\n *     Soft hyphens should be preserved.\n *\n *     Note: See `collectText` and `collectPreText`.\n *     Note: we don’t deal with `text-transform`, no element has that by\n *     default.\n *\n * See: <https://drafts.csswg.org/css-text/#white-space-phase-1>\n *\n * @param {HastText|HastComment} node\n * @param {CollectionOptions} options\n * @returns {string}\n */\nfunction collectText(node, options) {\n  const value = String(node.value)\n  /** @type {Array.<string>} */\n  const lines = []\n  /** @type {Array.<string>} */\n  const result = []\n  let start = 0\n  let index = -1\n  /** @type {RegExpMatchArray|null} */\n  let match\n  /** @type {number} */\n  let end\n  /** @type {string|undefined} */\n  let join\n\n  while (start < value.length) {\n    searchLineFeeds.lastIndex = start\n    match = searchLineFeeds.exec(value)\n    // @ts-expect-error: `index` is set.\n    end = match ? match.index : value.length\n\n    lines.push(\n      // Any sequence of collapsible spaces and tabs immediately preceding or\n      // following a segment break is removed.\n      trimAndCollapseSpacesAndTabs(\n        // [...] ignoring bidi formatting characters (characters with the\n        // Bidi_Control property [UAX9]: ALM, LTR, RTL, LRE-RLO, LRI-PDI) as if\n        // they were not there.\n        value\n          .slice(start, end)\n          .replace(/[\\u061C\\u200E\\u200F\\u202A-\\u202E\\u2066-\\u2069]/g, ''),\n        options.breakBefore,\n        options.breakAfter\n      )\n    )\n\n    start = end + 1\n  }\n\n  // Collapsible segment breaks are transformed for rendering according to the\n  // segment break transformation rules.\n  // So here we jump to 4.1.2 of [CSSTEXT]:\n  // Any collapsible segment break immediately following another collapsible\n  // segment break is removed\n  while (++index < lines.length) {\n    // *   If the character immediately before or immediately after the segment\n    //     break is the zero-width space character (U+200B), then the break is\n    //     removed, leaving behind the zero-width space.\n    if (\n      lines[index].charCodeAt(lines[index].length - 1) === 0x200b /* ZWSP */ ||\n      (index < lines.length - 1 &&\n        lines[index + 1].charCodeAt(0) === 0x200b) /* ZWSP */\n    ) {\n      result.push(lines[index])\n      join = ''\n    }\n\n    // *   Otherwise, if the East Asian Width property [UAX11] of both the\n    //     character before and after the segment break is Fullwidth, Wide, or\n    //     Halfwidth (not Ambiguous), and neither side is Hangul, then the\n    //     segment break is removed.\n    //\n    //     Note: ignored.\n    // *   Otherwise, if the writing system of the segment break is Chinese,\n    //     Japanese, or Yi, and the character before or after the segment break\n    //     is punctuation or a symbol (Unicode general category P* or S*) and\n    //     has an East Asian Width property of Ambiguous, and the character on\n    //     the other side of the segment break is Fullwidth, Wide, or Halfwidth,\n    //     and not Hangul, then the segment break is removed.\n    //\n    //     Note: ignored.\n\n    // *   Otherwise, the segment break is converted to a space (U+0020).\n    else if (lines[index]) {\n      if (join) result.push(join)\n      result.push(lines[index])\n      join = ' '\n    }\n  }\n\n  return result.join('')\n}\n\n/**\n * @param {HastText|HastComment} node\n * @returns {string}\n */\nfunction collectPreText(node) {\n  return String(node.value)\n}\n\n/**\n * 3.  Every collapsible tab is converted to a collapsible space (U+0020).\n * 4.  Any collapsible space immediately following another collapsible\n *     space—even one outside the boundary of the inline containing that\n *     space, provided both spaces are within the same inline formatting\n *     context—is collapsed to have zero advance width. (It is invisible,\n *     but retains its soft wrap opportunity, if any.)\n *\n * @param {string} value\n * @param {BreakBefore} breakBefore\n * @param {BreakAfter} breakAfter\n * @returns {string}\n */\nfunction trimAndCollapseSpacesAndTabs(value, breakBefore, breakAfter) {\n  /** @type {Array.<string>} */\n  const result = []\n  let start = 0\n  /** @type {RegExpMatchArray|null} */\n  let match\n  /** @type {number} */\n  let end\n\n  while (start < value.length) {\n    searchTabOrSpaces.lastIndex = start\n    match = searchTabOrSpaces.exec(value)\n    // @ts-expect-error: `index` is set.\n    end = match ? match.index : value.length\n\n    // If we’re not directly after a segment break, but there was white space,\n    // add an empty value that will be turned into a space.\n    if (!start && !end && match && !breakBefore) {\n      result.push('')\n    }\n\n    if (start !== end) {\n      result.push(value.slice(start, end))\n    }\n\n    start = match ? end + match[0].length : end\n  }\n\n  // If we reached the end, there was trailing white space, and there’s no\n  // segment break after this node, add an empty value that will be turned\n  // into a space.\n  // @ts-expect-error: `end` is defined.\n  if (start !== end && !breakAfter) {\n    result.push('')\n  }\n\n  return result.join(' ')\n}\n\n/**\n * We don’t support void elements here (so `nobr wbr` -> `normal` is ignored).\n *\n * @param {HastNode} node\n * @param {CollectionOptions} options\n * @returns {Whitespace}\n */\nfunction inferWhitespace(node, options) {\n  /** @type {HastProperties} */\n  let props\n\n  if (node.type === 'element') {\n    props = node.properties || {}\n    switch (node.tagName) {\n      case 'listing':\n      case 'plaintext':\n      case 'xmp':\n        return 'pre'\n      case 'nobr':\n        return 'nowrap'\n      case 'pre':\n        return props.wrap ? 'pre-wrap' : 'pre'\n      case 'td':\n      case 'th':\n        return props.noWrap ? 'nowrap' : options.whitespace\n      case 'textarea':\n        return 'pre-wrap'\n      default:\n    }\n  }\n\n  return options.whitespace\n}\n\n/** @type {TestFunctionAnything} */\nfunction hidden(node) {\n  return Boolean((node.properties || {}).hidden)\n}\n\n/** @type {TestFunctionAnything} */\nfunction closedDialog(node) {\n  return node.tagName === 'dialog' && !(node.properties || {}).open\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').ElementChild} ElementChild\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {toText} from 'hast-util-to-text'\nimport {trimTrailingLines} from 'trim-trailing-lines'\nimport {wrapText} from '../util/wrap-text.js'\n\nconst prefix = 'language-'\n\nconst pre = convertElement('pre')\nconst isCode = convertElement('code')\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function code(h, node) {\n  const children = node.children\n  let index = -1\n  /** @type {Array.<string|number>|undefined} */\n  let classList\n  /** @type {string|undefined} */\n  let lang\n\n  if (pre(node)) {\n    while (++index < children.length) {\n      const child = children[index]\n\n      if (\n        isCode(child) &&\n        child.properties &&\n        child.properties.className &&\n        Array.isArray(child.properties.className)\n      ) {\n        classList = child.properties.className\n        break\n      }\n    }\n  }\n\n  if (classList) {\n    index = -1\n\n    while (++index < classList.length) {\n      if (String(classList[index]).slice(0, prefix.length) === prefix) {\n        lang = String(classList[index]).slice(prefix.length)\n        break\n      }\n    }\n  }\n\n  return h(\n    node,\n    'code',\n    {lang: lang || null, meta: null},\n    trimTrailingLines(wrapText(h, toText(node)))\n  )\n}\n","/**\n * Remove final newline characters from `value`.\n *\n * @param {unknown} value Value with trailing line feeds, coerced to string.\n * @return {string} Value without trailing newlines.\n */\nexport function trimTrailingLines(value) {\n  return String(value).replace(/\\n+$/, '')\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function del(h, node) {\n  return h(node, 'delete', all(h, node))\n}\n","/**\n * @typedef {import('../types.js').MdastListContent} MdastListContent\n */\n\n/**\n * @param {Array.<MdastListContent>} children\n * @returns {boolean}\n */\nexport function listItemsSpread(children) {\n  let index = -1\n\n  if (children.length > 1) {\n    while (++index < children.length) {\n      if (children[index].spread) {\n        return true\n      }\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('../types.js').H} H\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Child} Child\n * @typedef {import('../types.js').MdastListContent} MdastListContent\n */\n\nimport {all} from '../all.js'\n\n/**\n * @param {H} h\n * @param {Child} node\n * @returns {Array.<MdastListContent>}\n */\nexport function wrapListItems(h, node) {\n  const children = all(h, node)\n  let index = -1\n\n  while (++index < children.length) {\n    const child = children[index]\n    if (child.type !== 'listItem') {\n      children[index] = {\n        type: 'listItem',\n        spread: false,\n        checked: null,\n        // @ts-expect-error Assume `children[index]` is block content.\n        children: [child]\n      }\n    }\n  }\n\n  // @ts-expect-error Assume all `listItem`s\n  return children\n}\n","/**\n * @typedef {import('../types.js').H} H\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').ElementChild} ElementChild\n * @typedef {import('../types.js').MdastNode} MdastNode\n * @typedef {import('../types.js').MdastListContent} MdastListContent\n * @typedef {import('../types.js').MdastBlockContent} MdastBlockContent\n * @typedef {import('../types.js').MdastDefinitionContent} MdastDefinitionContent\n *\n * @typedef Group\n * @property {Array.<Element>} titles\n * @property {Array.<ElementChild>} definitions\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {listItemsSpread} from '../util/list-items-spread.js'\nimport {wrapListItems} from '../util/wrap-list-items.js'\n\nconst div = convertElement('div')\nconst dt = convertElement('dt')\nconst dd = convertElement('dd')\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function dl(h, node) {\n  const children = node.children\n  let index = -1\n  /** @type {Array.<ElementChild>} */\n  let clean = []\n  /** @type {Array.<Group>} */\n  const groups = []\n  /** @type {Group} */\n  let group = {titles: [], definitions: []}\n  /** @type {ElementChild} */\n  let child\n  /** @type {Array.<MdastBlockContent|MdastDefinitionContent>} */\n  let result\n\n  // Unwrap `<div>`s\n  while (++index < children.length) {\n    child = children[index]\n    clean = clean.concat(div(child) ? child.children : child)\n  }\n\n  index = -1\n\n  // Group titles and definitions.\n  while (++index < clean.length) {\n    child = clean[index]\n\n    if (dt(child)) {\n      if (dd(clean[index - 1])) {\n        groups.push(group)\n        group = {titles: [], definitions: []}\n      }\n\n      group.titles.push(child)\n    } else {\n      group.definitions.push(child)\n    }\n  }\n\n  groups.push(group)\n\n  // Create items.\n  index = -1\n  /** @type {Array.<MdastListContent>} */\n  const content = []\n\n  while (++index < groups.length) {\n    result = [\n      ...handle(h, groups[index].titles),\n      ...handle(h, groups[index].definitions)\n    ]\n\n    if (result.length > 0) {\n      content.push({\n        type: 'listItem',\n        spread: result.length > 1,\n        checked: null,\n        children: result\n      })\n    }\n  }\n\n  // Create a list if there are items.\n  if (content.length > 0) {\n    return h(\n      node,\n      'list',\n      {ordered: false, start: null, spread: listItemsSpread(content)},\n      content\n    )\n  }\n}\n\n/**\n * @param {H} h\n * @param {Array.<ElementChild>} children\n * @returns {Array.<MdastBlockContent|MdastDefinitionContent>}\n */\nfunction handle(h, children) {\n  const nodes = wrapListItems(h, {type: 'element', tagName: 'x', children})\n\n  if (nodes.length === 0) {\n    return []\n  }\n\n  if (nodes.length === 1) {\n    return nodes[0].children\n  }\n\n  return [\n    {\n      type: 'list',\n      ordered: false,\n      start: null,\n      spread: listItemsSpread(nodes),\n      children: nodes\n    }\n  ]\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function em(h, node) {\n  return h(node, 'emphasis', all(h, node))\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').MdastNode} MdastNode\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function heading(h, node) {\n  // `else` shouldn’t happen, of course…\n  /* c8 ignore next */\n  const depth = Number(node.tagName.charAt(1)) || 1\n  const wrap = h.wrapText\n\n  h.wrapText = false\n  const result = h(node, 'heading', {depth}, all(h, node))\n  h.wrapText = wrap\n\n  return result\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Properties} Properties\n */\n\nimport {resolve} from '../util/resolve.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function img(h, node) {\n  /** @type {Properties} */\n  // @ts-expect-error: `props` are defined.\n  const props = node.properties\n  return h(node, 'image', {\n    url: resolve(h, String(props.src || '') || null),\n    title: props.title || null,\n    alt: props.alt || ''\n  })\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {toText} from 'hast-util-to-text'\nimport {wrapText} from '../util/wrap-text.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function inlineCode(h, node) {\n  return h(node, 'inlineCode', wrapText(h, toText(node)))\n}\n","var own = {}.hasOwnProperty\n\n/**\n * Check if `node` has a set `name` property.\n *\n * @param {unknown} node\n * @param {string} name\n * @returns {boolean}\n */\nexport function hasProperty(node, name) {\n  /** @type {unknown} */\n  var value =\n    name &&\n    node &&\n    typeof node === 'object' &&\n    // @ts-ignore Looks like a node.\n    node.type === 'element' &&\n    // @ts-ignore Looks like an element.\n    node.properties &&\n    // @ts-ignore Looks like an element.\n    own.call(node.properties, name) &&\n    // @ts-ignore Looks like an element.\n    node.properties[name]\n\n  return value !== null && value !== undefined && value !== false\n}\n","/**\n * @typedef {import('../types.js').H} H\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Child} Child\n * @typedef {import('../types.js').Properties} Properties\n */\n\nimport {hasProperty} from 'hast-util-has-property'\nimport {convertElement} from 'hast-util-is-element'\nimport {toText} from 'hast-util-to-text'\nimport {wrapText} from './wrap-text.js'\n\nconst option = convertElement('option')\n\n/**\n * @param {H} h\n * @param {Element} node\n * @param {Properties} [properties]\n * @returns {Array.<[string, string|null]>}\n */\nexport function findSelectedOptions(h, node, properties) {\n  /** @type {Properties} */\n  // @ts-expect-error: `props` exist.\n  const props = properties || node.properties\n  let options = findOptions(node)\n  const size =\n    Math.min(Number.parseInt(String(props.size), 10), 0) ||\n    (props.multiple ? 4 : 1)\n  let index = -1\n  /** @type {Array.<Element>} */\n  const selectedOptions = []\n  /** @type {Array.<[string, string|null]>} */\n  const values = []\n\n  while (++index < options.length) {\n    if (hasProperty(options[index], 'selected')) {\n      selectedOptions.push(options[index])\n    }\n  }\n\n  const list = selectedOptions.length > 0 ? selectedOptions : options\n  options = list.slice(0, size)\n  index = -1\n\n  while (++index < options.length) {\n    const option = options[index]\n    const content = wrapText(h, toText(option))\n    /** @type {Properties} */\n    // @ts-expect-error: `props` exist.\n    const props = option.properties\n    const label = content || String(props.label || '')\n    const value = String(props.value || '') || content\n    values.push([value, label === value ? null : label])\n  }\n\n  return values\n}\n\n/**\n * @param {Parent} node\n */\nfunction findOptions(node) {\n  const children = node.children\n  let index = -1\n  /** @type {Array.<Element>} */\n  let results = []\n  /** @type {Child} */\n  let child\n\n  while (++index < children.length) {\n    child = children[index]\n\n    // @ts-expect-error Looks like a parent.\n    if (Array.isArray(child.children)) {\n      // @ts-expect-error Looks like a parent.\n      results = results.concat(findOptions(child))\n    }\n\n    if (option(child) && !hasProperty(child, 'disabled')) {\n      results.push(child)\n    }\n  }\n\n  return results\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Properties} Properties\n * @typedef {import('../types.js').MdastNode} MdastNode\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {findSelectedOptions} from '../util/find-selected-options.js'\nimport {own} from '../util/own.js'\nimport {resolve} from '../util/resolve.js'\nimport {wrapText} from '../util/wrap-text.js'\n\nconst datalist = convertElement('datalist')\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\n// eslint-disable-next-line complexity\nexport function input(h, node) {\n  /** @type {Properties} */\n  // @ts-expect-error: `props` are defined.\n  const props = node.properties\n  let value = String(props.value || props.placeholder || '')\n  /** @type {Array.<MdastNode>} */\n  const results = []\n  /** @type {Array.<string>} */\n  const texts = []\n  /** @type {Array.<[string, string|null]>} */\n  let values = []\n  let index = -1\n  /** @type {string} */\n  let list\n\n  if (props.disabled || props.type === 'hidden' || props.type === 'file') {\n    return\n  }\n\n  if (props.type === 'checkbox' || props.type === 'radio') {\n    return h(\n      node,\n      'text',\n      wrapText(h, h[props.checked ? 'checked' : 'unchecked'])\n    )\n  }\n\n  if (props.type === 'image') {\n    return props.alt || value\n      ? h(node, 'image', {\n          url: resolve(h, String(props.src || '') || null),\n          title: wrapText(h, String(props.title || '')) || null,\n          alt: wrapText(h, String(props.alt || value))\n        })\n      : []\n  }\n\n  if (value) {\n    values = [[value, null]]\n  } else if (\n    // `list` is not supported on these types:\n    props.type !== 'password' &&\n    props.type !== 'file' &&\n    props.type !== 'submit' &&\n    props.type !== 'reset' &&\n    props.type !== 'button' &&\n    props.list\n  ) {\n    list = String(props.list).toUpperCase()\n\n    if (own.call(h.nodeById, list) && datalist(h.nodeById[list])) {\n      values = findSelectedOptions(h, h.nodeById[list], props)\n    }\n  }\n\n  if (values.length === 0) {\n    return\n  }\n\n  // Hide password value.\n  if (props.type === 'password') {\n    // Passwords don’t support `list`.\n    values[0] = ['•'.repeat(values[0][0].length), null]\n  }\n\n  if (props.type === 'url' || props.type === 'email') {\n    while (++index < values.length) {\n      value = resolve(h, values[index][0])\n\n      results.push(\n        h(\n          node,\n          'link',\n          {\n            title: null,\n            url: wrapText(h, props.type === 'email' ? 'mailto:' + value : value)\n          },\n          [{type: 'text', value: wrapText(h, values[index][1] || value)}]\n        )\n      )\n\n      if (index !== values.length - 1) {\n        results.push({type: 'text', value: ', '})\n      }\n    }\n\n    return results\n  }\n\n  while (++index < values.length) {\n    texts.push(\n      values[index][1]\n        ? values[index][1] + ' (' + values[index][0] + ')'\n        : values[index][0]\n    )\n  }\n\n  return h(node, 'text', wrapText(h, texts.join(', ')))\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').ElementChild} ElementChild\n * @typedef {import('../types.js').MdastNode} MdastNode\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {wrapChildren} from '../util/wrap-children.js'\n\nconst p = convertElement('p')\nconst input = convertElement('input')\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function li(h, node) {\n  const head = node.children[0]\n  /** @type {boolean|null} */\n  let checked = null\n  /** @type {ElementChild} */\n  let checkbox\n  /** @type {Element|undefined} */\n  let clone\n\n  // Check if this node starts with a checkbox.\n  if (p(head)) {\n    checkbox = head.children[0]\n\n    if (\n      input(checkbox) &&\n      checkbox.properties &&\n      (checkbox.properties.type === 'checkbox' ||\n        checkbox.properties.type === 'radio')\n    ) {\n      checked = Boolean(checkbox.properties.checked)\n      clone = {\n        ...node,\n        children: [\n          {...head, children: head.children.slice(1)},\n          ...node.children.slice(1)\n        ]\n      }\n    }\n  }\n\n  const content = wrapChildren(h, clone || node)\n\n  return h(node, 'listItem', {spread: content.length > 1, checked}, content)\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {hasProperty} from 'hast-util-has-property'\nimport {listItemsSpread} from '../util/list-items-spread.js'\nimport {wrapListItems} from '../util/wrap-list-items.js'\n\nconst ol = convertElement('ol')\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function list(h, node) {\n  const ordered = ol(node)\n  const children = wrapListItems(h, node)\n  /** @type {number|null} */\n  let start = null\n\n  if (ordered) {\n    start = hasProperty(node, 'start')\n      ? // @ts-expect-error: `props` exist.\n        Number.parseInt(String(node.properties.start), 10)\n      : 1\n  }\n\n  return h(\n    node,\n    'list',\n    {ordered, start, spread: listItemsSpread(children)},\n    children\n  )\n}\n","/**\n * @typedef Options\n * @property {boolean} [includeImageAlt=true]\n */\n\n/**\n * Get the text content of a node.\n * Prefer the node’s plain-text fields, otherwise serialize its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} node\n * @param {Options} [options]\n * @returns {string}\n */\nexport function toString(node, options) {\n  var {includeImageAlt = true} = options || {}\n  return one(node, includeImageAlt)\n}\n\n/**\n * @param {unknown} node\n * @param {boolean} includeImageAlt\n * @returns {string}\n */\nfunction one(node, includeImageAlt) {\n  return (\n    (node &&\n      typeof node === 'object' &&\n      // @ts-ignore looks like a literal.\n      (node.value ||\n        // @ts-ignore looks like an image.\n        (includeImageAlt ? node.alt : '') ||\n        // @ts-ignore looks like a parent.\n        ('children' in node && all(node.children, includeImageAlt)) ||\n        (Array.isArray(node) && all(node, includeImageAlt)))) ||\n    ''\n  )\n}\n\n/**\n * @param {Array.<unknown>} values\n * @param {boolean} includeImageAlt\n * @returns {string}\n */\nfunction all(values, includeImageAlt) {\n  /** @type {Array.<string>} */\n  var result = []\n  var index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt)\n  }\n\n  return result.join('')\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Properties} Properties\n * @typedef {import('../types.js').ElementChild} ElementChild\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {toString} from 'mdast-util-to-string'\nimport {visit, EXIT} from 'unist-util-visit'\nimport {all} from '../all.js'\nimport {resolve} from '../util/resolve.js'\nimport {wrapNeeded} from '../util/wrap.js'\n\nconst source = convertElement('source')\nconst video = convertElement('video')\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function media(h, node) {\n  let nodes = all(h, node)\n  /** @type {Properties} */\n  // @ts-expect-error: `props` are defined.\n  const properties = node.properties\n  const poster = video(node) && String(properties.poster || '')\n  let src = String(properties.src || '')\n  let index = -1\n  /** @type {boolean} */\n  let linkInFallbackContent = false\n  /** @type {ElementChild} */\n  let child\n\n  visit({type: 'root', children: nodes}, 'link', findLink)\n\n  // If the content links to something, or if it’s not phrasing…\n  if (linkInFallbackContent || wrapNeeded(nodes)) {\n    return nodes\n  }\n\n  // Find the source.\n  while (!src && ++index < node.children.length) {\n    child = node.children[index]\n    if (source(child)) {\n      // @ts-expect-error: `props` are defined.\n      src = String(child.properties.src || '')\n    }\n  }\n\n  // If there’s a poster defined on the video, create an image.\n  if (poster) {\n    nodes = [\n      {\n        type: 'image',\n        title: null,\n        url: resolve(h, poster),\n        alt: toString({children: nodes})\n      }\n    ]\n  }\n\n  // Link to the media resource.\n  return {\n    type: 'link',\n    // @ts-expect-error Types are broken.\n    title: node.properties.title || null,\n    url: resolve(h, src),\n    // @ts-expect-error Assume phrasing content.\n    children: nodes\n  }\n\n  function findLink() {\n    linkInFallbackContent = true\n    return EXIT\n  }\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function p(h, node) {\n  const nodes = all(h, node)\n\n  if (nodes.length > 0) {\n    return h(node, 'paragraph', nodes)\n  }\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function strong(h, node) {\n  return h(node, 'strong', all(h, node))\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').MdastNode} MdastNode\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function tableCell(h, node) {\n  const wrap = h.wrapText\n\n  h.wrapText = false\n\n  const result = h(node, 'tableCell', all(h, node))\n\n  if (node.properties && (node.properties.rowSpan || node.properties.colSpan)) {\n    const data = result.data || (result.data = {})\n    if (node.properties.rowSpan) data.rowSpan = node.properties.rowSpan\n    if (node.properties.colSpan) data.colSpan = node.properties.colSpan\n  }\n\n  h.wrapText = wrap\n\n  return result\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').MdastNode} MdastNode\n * @typedef {import('../types.js').MdastTableContent} MdastTableContent\n * @typedef {import('../types.js').MdastRowContent} MdastRowContent\n * @typedef {import('../types.js').MdastPhrasingContent} MdastPhrasingContent\n *\n * @typedef Info\n * @property {Array.<string|null>} align\n * @property {boolean} headless\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {toText} from 'hast-util-to-text'\nimport {visit, SKIP} from 'unist-util-visit'\nimport {wrapText} from '../util/wrap-text.js'\nimport {all} from '../all.js'\n\nconst thead = convertElement('thead')\nconst tr = convertElement('tr')\nconst cell = convertElement(['th', 'td'])\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function table(h, node) {\n  if (h.inTable) {\n    return h(node, 'text', wrapText(h, toText(node)))\n  }\n\n  h.inTable = true\n\n  const {headless, align} = inspect(node)\n  const rows = toRows(all(h, node), headless)\n  let columns = 1\n  let rowIndex = -1\n\n  while (++rowIndex < rows.length) {\n    const cells = rows[rowIndex].children\n    let cellIndex = -1\n\n    while (++cellIndex < cells.length) {\n      const cell = cells[cellIndex]\n\n      if (cell.data) {\n        const colSpan = Number.parseInt(String(cell.data.colSpan), 10) || 1\n        const rowSpan = Number.parseInt(String(cell.data.rowSpan), 10) || 1\n\n        if (colSpan > 1 || rowSpan > 1) {\n          let otherRowIndex = rowIndex - 1\n\n          while (++otherRowIndex < rowIndex + rowSpan) {\n            let colIndex = cellIndex - 1\n\n            while (++colIndex < cellIndex + colSpan) {\n              if (!rows[otherRowIndex]) {\n                // Don’t add rows that don’t exist.\n                // Browsers don’t render them either.\n                break\n              }\n\n              /** @type {Array.<MdastRowContent>} */\n              const newCells = []\n\n              if (otherRowIndex !== rowIndex || colIndex !== cellIndex) {\n                newCells.push({type: 'tableCell', children: []})\n              }\n\n              rows[otherRowIndex].children.splice(colIndex, 0, ...newCells)\n            }\n          }\n        }\n\n        // Clean the data fields.\n        if ('colSpan' in cell.data) delete cell.data.colSpan\n        if ('rowSpan' in cell.data) delete cell.data.rowSpan\n        if (Object.keys(cell.data).length === 0) delete cell.data\n      }\n    }\n\n    if (cells.length > columns) columns = cells.length\n  }\n\n  // Add extra empty cells.\n  rowIndex = -1\n\n  while (++rowIndex < rows.length) {\n    const cells = rows[rowIndex].children\n    let cellIndex = cells.length - 1\n    while (++cellIndex < columns) {\n      cells.push({type: 'tableCell', children: []})\n    }\n  }\n\n  let alignIndex = align.length - 1\n  while (++alignIndex < columns) {\n    align.push(null)\n  }\n\n  h.inTable = false\n\n  return h(node, 'table', {align}, rows)\n}\n\n/**\n * Infer whether the HTML table has a head and how it aligns.\n *\n * @param {Element} node\n * @returns {Info}\n */\nfunction inspect(node) {\n  let headless = true\n  let rowIndex = 0\n  let cellIndex = 0\n  /** @type {Array.<string|null>} */\n  const align = [null]\n\n  visit(node, 'element', (child) => {\n    if (child.tagName === 'table' && node !== child) {\n      return SKIP\n    }\n\n    // If there is a `thead`, assume there is a header row.\n    if (cell(child) && child.properties) {\n      if (!align[cellIndex]) {\n        align[cellIndex] = String(child.properties.align || '') || null\n      }\n\n      // If there is a th in the first row, assume there is a header row.\n      if (headless && rowIndex < 2 && child.tagName === 'th') {\n        headless = false\n      }\n\n      cellIndex++\n    } else if (thead(child)) {\n      headless = false\n    } else if (tr(child)) {\n      rowIndex++\n      cellIndex = 0\n    }\n  })\n\n  return {align, headless}\n}\n\n/**\n * Ensure the rows are properly structured.\n *\n * @param {Array.<MdastNode>} children\n * @param {boolean} headless\n * @returns {Array.<MdastTableContent>}\n */\nfunction toRows(children, headless) {\n  let index = -1\n  /** @type {Array.<MdastTableContent>} */\n  const nodes = []\n  /** @type {Array.<MdastRowContent>|undefined} */\n  let queue\n\n  // Add an empty header row.\n  if (headless) {\n    nodes.push({type: 'tableRow', children: []})\n  }\n\n  while (++index < children.length) {\n    const node = children[index]\n\n    if (node.type === 'tableRow') {\n      if (queue) {\n        node.children.unshift(...queue)\n        queue = undefined\n      }\n\n      nodes.push(node)\n    } else {\n      if (!queue) queue = []\n      // @ts-expect-error Assume row content.\n      queue.push(node)\n    }\n  }\n\n  if (queue) {\n    nodes[nodes.length - 1].children.push(...queue)\n  }\n\n  index = -1\n\n  while (++index < nodes.length) {\n    nodes[index].children = toCells(nodes[index].children)\n  }\n\n  return nodes\n}\n\n/**\n * Ensure the cells in a row are properly structured.\n *\n * @param {Array.<MdastNode>} children\n * @returns {Array.<MdastRowContent>}\n */\nfunction toCells(children) {\n  /** @type {Array.<MdastRowContent>} */\n  const nodes = []\n  let index = -1\n  /** @type {MdastNode} */\n  let node\n  /** @type {Array.<MdastPhrasingContent>|undefined} */\n  let queue\n\n  while (++index < children.length) {\n    node = children[index]\n\n    if (node.type === 'tableCell') {\n      if (queue) {\n        node.children.unshift(...queue)\n        queue = undefined\n      }\n\n      nodes.push(node)\n    } else {\n      if (!queue) queue = []\n      // @ts-expect-error Assume phrasing content.\n      queue.push(node)\n    }\n  }\n\n  if (queue) {\n    node = nodes[nodes.length - 1]\n\n    if (!node) {\n      node = {type: 'tableCell', children: []}\n      nodes.push(node)\n    }\n\n    node.children.push(...queue)\n  }\n\n  return nodes\n}\n","import {all} from '../all.js'\nimport {wrapChildren} from '../util/wrap-children.js'\nimport {a} from './a.js'\nimport {base} from './base.js'\nimport {blockquote} from './blockquote.js'\nimport {br} from './br.js'\nimport {code} from './code.js'\nimport {comment} from './comment.js'\nimport {del} from './del.js'\nimport {dl} from './dl.js'\nimport {em} from './em.js'\nimport {heading} from './heading.js'\nimport {hr} from './hr.js'\nimport {iframe} from './iframe.js'\nimport {img} from './img.js'\nimport {inlineCode} from './inline-code.js'\nimport {input} from './input.js'\nimport {li} from './li.js'\nimport {list} from './list.js'\nimport {media} from './media.js'\nimport {p} from './p.js'\nimport {q} from './q.js'\nimport {root} from './root.js'\nimport {select} from './select.js'\nimport {strong} from './strong.js'\nimport {tableCell} from './table-cell.js'\nimport {tableRow} from './table-row.js'\nimport {table} from './table.js'\nimport {text} from './text.js'\nimport {textarea} from './textarea.js'\nimport {wbr} from './wbr.js'\n\nexport const handlers = {\n  root,\n  text,\n  comment,\n  doctype: ignore,\n\n  applet: ignore,\n  area: ignore,\n  basefont: ignore,\n  bgsound: ignore,\n  caption: ignore,\n  col: ignore,\n  colgroup: ignore,\n  command: ignore,\n  content: ignore,\n  datalist: ignore,\n  dialog: ignore,\n  element: ignore,\n  embed: ignore,\n  frame: ignore,\n  frameset: ignore,\n  isindex: ignore,\n  keygen: ignore,\n  link: ignore,\n  math: ignore,\n  menu: ignore,\n  menuitem: ignore,\n  meta: ignore,\n  nextid: ignore,\n  noembed: ignore,\n  noframes: ignore,\n  optgroup: ignore,\n  option: ignore,\n  param: ignore,\n  script: ignore,\n  shadow: ignore,\n  source: ignore,\n  spacer: ignore,\n  style: ignore,\n  svg: ignore,\n  template: ignore,\n  title: ignore,\n  track: ignore,\n\n  abbr: all,\n  acronym: all,\n  bdi: all,\n  bdo: all,\n  big: all,\n  blink: all,\n  button: all,\n  canvas: all,\n  cite: all,\n  data: all,\n  details: all,\n  dfn: all,\n  font: all,\n  ins: all,\n  label: all,\n  map: all,\n  marquee: all,\n  meter: all,\n  nobr: all,\n  noscript: all,\n  object: all,\n  output: all,\n  progress: all,\n  rb: all,\n  rbc: all,\n  rp: all,\n  rt: all,\n  rtc: all,\n  ruby: all,\n  slot: all,\n  small: all,\n  span: all,\n  sup: all,\n  sub: all,\n  tbody: all,\n  tfoot: all,\n  thead: all,\n  time: all,\n\n  address: wrapChildren,\n  article: wrapChildren,\n  aside: wrapChildren,\n  body: wrapChildren,\n  center: wrapChildren,\n  div: wrapChildren,\n  fieldset: wrapChildren,\n  figcaption: wrapChildren,\n  figure: wrapChildren,\n  form: wrapChildren,\n  footer: wrapChildren,\n  header: wrapChildren,\n  hgroup: wrapChildren,\n  html: wrapChildren,\n  legend: wrapChildren,\n  main: wrapChildren,\n  multicol: wrapChildren,\n  nav: wrapChildren,\n  picture: wrapChildren,\n  section: wrapChildren,\n\n  a,\n  audio: media,\n  b: strong,\n  base,\n  blockquote,\n  br,\n  code: inlineCode,\n  dir: list,\n  dl,\n  dt: li,\n  dd: li,\n  del,\n  em,\n  h1: heading,\n  h2: heading,\n  h3: heading,\n  h4: heading,\n  h5: heading,\n  h6: heading,\n  hr,\n  i: em,\n  iframe,\n  img,\n  image: img,\n  input,\n  kbd: inlineCode,\n  li,\n  listing: code,\n  mark: em,\n  ol: list,\n  p,\n  plaintext: code,\n  pre: code,\n  q,\n  s: del,\n  samp: inlineCode,\n  select,\n  strike: del,\n  strong,\n  summary: p,\n  table,\n  td: tableCell,\n  textarea,\n  th: tableCell,\n  tr: tableRow,\n  tt: inlineCode,\n  u: em,\n  ul: list,\n  var: inlineCode,\n  video: media,\n  wbr,\n  xmp: code\n}\n\nfunction ignore() {}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Root} Root\n */\n\nimport {all} from '../all.js'\nimport {wrap, wrapNeeded} from '../util/wrap.js'\n\n/**\n * @type {Handle}\n * @param {Root} node\n */\nexport function root(h, node) {\n  let children = all(h, node)\n\n  if (h.document || wrapNeeded(children)) {\n    children = wrap(children)\n  }\n\n  return h(node, 'root', children)\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Text} Text\n */\n\nimport {wrapText} from '../util/wrap-text.js'\n\n/**\n * @type {Handle}\n * @param {Text} node\n */\nexport function text(h, node) {\n  return h(node, 'text', wrapText(h, node.value))\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Comment} Comment\n */\nimport {wrapText} from '../util/wrap-text.js'\n\n/**\n * @type {Handle}\n * @param {Comment} node\n */\nexport function comment(h, node) {\n  return h(node, 'html', '<!--' + wrapText(h, node.value) + '-->')\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Properties} Properties\n */\n\nimport {all} from '../all.js'\nimport {resolve} from '../util/resolve.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function a(h, node) {\n  /** @type {Properties} */\n  // @ts-expect-error: `props` are defined.\n  const props = node.properties\n  return h(\n    node,\n    'link',\n    {\n      title: props.title || null,\n      url: resolve(h, String(props.href || '') || null)\n    },\n    all(h, node)\n  )\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function base(h, node) {\n  if (!h.baseFound) {\n    h.frozenBaseUrl =\n      String((node.properties && node.properties.href) || '') || null\n    h.baseFound = true\n  }\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {wrapChildren} from '../util/wrap-children.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function blockquote(h, node) {\n  return h(node, 'blockquote', wrapChildren(h, node))\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function br(h, node) {\n  return h.wrapText ? h(node, 'break') : h(node, 'text', ' ')\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function hr(h, node) {\n  return h(node, 'thematicBreak')\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Properties} Properties\n */\n\nimport {resolve} from '../util/resolve.js'\nimport {wrapText} from '../util/wrap-text.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function iframe(h, node) {\n  /** @type {Properties} */\n  // @ts-expect-error: `props` are defined.\n  const props = node.properties\n  const src = String(props.src || '')\n  const title = String(props.title || '')\n\n  // Only create a link if there is a title.\n  // We can’t use the content of the frame because conforming HTML parsers treat\n  // it as text, whereas legacy parsers treat it as HTML, so it will likely\n  // contain tags that will show up in text.\n  if (src && title) {\n    return {\n      type: 'link',\n      title: null,\n      url: resolve(h, src),\n      children: [{type: 'text', value: wrapText(h, title)}]\n    }\n  }\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').MdastNode} MdastNode\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function q(h, node) {\n  const expected = h.quotes[h.qNesting % h.quotes.length]\n\n  h.qNesting++\n  const contents = all(h, node)\n  h.qNesting--\n\n  contents.unshift({type: 'text', value: expected.charAt(0)})\n\n  contents.push({\n    type: 'text',\n    value: expected.length > 1 ? expected.charAt(1) : expected\n  })\n\n  return contents\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {findSelectedOptions} from '../util/find-selected-options.js'\nimport {wrapText} from '../util/wrap-text.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function select(h, node) {\n  const values = findSelectedOptions(h, node)\n  let index = -1\n  /** @type {Array.<string>} */\n  const results = []\n  /** @type {[string, string|null]} */\n  let value\n\n  while (++index < values.length) {\n    value = values[index]\n    results.push(value[1] ? value[1] + ' (' + value[0] + ')' : value[0])\n  }\n\n  if (results.length > 0) {\n    return h(node, 'text', wrapText(h, results.join(', ')))\n  }\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {toText} from 'hast-util-to-text'\nimport {wrapText} from '../util/wrap-text.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function textarea(h, node) {\n  return h(node, 'text', wrapText(h, toText(node)))\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function tableRow(h, node) {\n  return h(node, 'tableRow', all(h, node))\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function wbr(h, node) {\n  return h(node, 'text', '\\u200B')\n}\n","/**\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').Element} Element\n * @typedef {import('./types.js').Text} Text\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').Context} Context\n * @typedef {import('./types.js').Properties} Properties\n * @typedef {import('./types.js').H} H\n * @typedef {import('./types.js').HWithoutProps} HWithoutProps\n * @typedef {import('./types.js').HWithProps} HWithProps\n * @typedef {import('./types.js').MdastNode} MdastNode\n * @typedef {import('./types.js').MdastRoot} MdastRoot\n */\n\nimport rehypeMinifyWhitespace from 'rehype-minify-whitespace'\nimport {convert} from 'unist-util-is'\nimport {visit} from 'unist-util-visit'\nimport {one} from './one.js'\nimport {handlers} from './handlers/index.js'\nimport {own} from './util/own.js'\n\nexport {one} from './one.js'\nexport {all} from './all.js'\n\nconst block = convert(['heading', 'paragraph', 'root'])\n\n/**\n * @param {Node} tree\n * @param {Options} [options]\n */\nexport function toMdast(tree, options = {}) {\n  /** @type {Object.<string, Element>} */\n  const byId = {}\n  /** @type {MdastNode|MdastRoot} */\n  let mdast\n\n  /**\n   * @type {H}\n   */\n  const h = Object.assign(\n    /**\n     * @type {HWithProps & HWithoutProps}\n     */\n    (\n      /**\n       * @param {Node} node\n       * @param {string} type\n       * @param {Properties|string|Array.<Node>} [props]\n       * @param {string|Array.<Node>} [children]\n       */\n      (node, type, props, children) => {\n        /** @type {Properties|undefined} */\n        let properties\n\n        if (typeof props === 'string' || Array.isArray(props)) {\n          children = props\n          properties = {}\n        } else {\n          properties = props\n        }\n\n        /** @type {Node} */\n        // @ts-expect-error Assume valid `type` and `children`/`value`.\n        const result = {type, ...properties}\n\n        if (typeof children === 'string') {\n          // @ts-expect-error: Looks like a literal.\n          result.value = children\n        } else if (children) {\n          // @ts-expect-error: Looks like a parent.\n          result.children = children\n        }\n\n        if (node.position) {\n          result.position = node.position\n        }\n\n        return result\n      }\n    ),\n    {\n      nodeById: byId,\n      baseFound: false,\n      inTable: false,\n      wrapText: true,\n      /** @type {string|null} */\n      frozenBaseUrl: null,\n      qNesting: 0,\n      handlers: options.handlers\n        ? {...handlers, ...options.handlers}\n        : handlers,\n      document: options.document,\n      checked: options.checked || '[x]',\n      unchecked: options.unchecked || '[ ]',\n      quotes: options.quotes || ['\"']\n    }\n  )\n\n  visit(tree, 'element', (node) => {\n    const id =\n      node.properties &&\n      'id' in node.properties &&\n      String(node.properties.id).toUpperCase()\n\n    if (id && !own.call(byId, id)) {\n      byId[id] = node\n    }\n  })\n\n  // @ts-expect-error: does return a transformer, that does accept any node.\n  rehypeMinifyWhitespace({newlines: options.newlines === true})(tree)\n\n  const result = one(h, tree, undefined)\n\n  if (!result) {\n    mdast = {type: 'root', children: []}\n  } else if (Array.isArray(result)) {\n    mdast = {type: 'root', children: result}\n  } else {\n    mdast = result\n  }\n\n  visit(mdast, 'text', ontext)\n\n  return mdast\n\n  /**\n   * Collapse text nodes, and fix whitespace.\n   * Most of this is taken care of by `rehype-minify-whitespace`, but\n   * we’re generating some whitespace too, and some nodes are in the end\n   * ignored.\n   * So clean up.\n   *\n   * @type {import('unist-util-visit/complex-types').BuildVisitor<MdastRoot, 'text'>}\n   */\n  function ontext(node, index, parent) {\n    /* c8 ignore next 3 */\n    if (index === null || !parent) {\n      return\n    }\n\n    const previous = parent.children[index - 1]\n\n    if (previous && previous.type === node.type) {\n      previous.value += node.value\n      parent.children.splice(index, 1)\n\n      if (previous.position && node.position) {\n        previous.position.end = node.position.end\n      }\n\n      // Iterate over the previous node again, to handle its total value.\n      return index - 1\n    }\n\n    node.value = node.value.replace(/[\\t ]*(\\r?\\n|\\r)[\\t ]*/, '$1')\n\n    // We don’t care about other phrasing nodes in between (e.g., `[ asd ]()`),\n    // as there the whitespace matters.\n    if (parent && block(parent)) {\n      if (!index) {\n        node.value = node.value.replace(/^[\\t ]+/, '')\n      }\n\n      if (index === parent.children.length - 1) {\n        node.value = node.value.replace(/[\\t ]+$/, '')\n      }\n    }\n\n    if (!node.value) {\n      parent.children.splice(index, 1)\n      return index\n    }\n  }\n}\n\nexport {handlers as defaultHandlers} from './handlers/index.js'\n","/**\n * @typedef {import('hast-util-to-mdast').Options} Options\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n */\n\nimport {toMdast} from 'hast-util-to-mdast'\n\n/**\n * Plugin to bridge or mutate to rehype.\n *\n * If a destination is given, runs the destination with the new mdast\n * tree (bridge-mode).\n * Without destination, returns the mdast tree: further plugins run on that\n * tree (mutate-mode).\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `hast-util-to-mdast`.\n */\nconst rehypeRemark =\n  /**\n   * @type {(import('unified').Plugin<[Processor, Options?], HastRoot> & import('unified').Plugin<[Options?]|void[], HastRoot, MdastRoot>)}\n   */\n  (\n    /**\n     * @param {Processor|Options} [destination]\n     * @param {Options} [options]\n     */\n    function (destination, options) {\n      /** @type {Options|undefined} */\n      let settings\n      /** @type {Processor|undefined} */\n      let processor\n\n      if (typeof destination === 'function') {\n        processor = destination\n        settings = options || {}\n      } else {\n        settings = destination || {}\n      }\n\n      if (settings.document === undefined || settings.document === null) {\n        settings = Object.assign({}, settings, {document: true})\n      }\n\n      return processor ? bridge(processor, settings) : mutate(settings)\n    }\n  )\n\nexport default rehypeRemark\n\n/**\n * Bridge-mode.\n * Runs the destination with the new mdast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], HastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toMdast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further transformers run on the mdast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], HastRoot, MdastRoot>}\n */\nfunction mutate(options = {}) {\n  return (node) => {\n    const result = /** @type {MdastRoot} */ (toMdast(node, options))\n    return result\n  }\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiControl,\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n}\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n}\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n}\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n}\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n}\nconst wwwAutolink = {\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n}\nconst protocolAutolink = {\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n}\nconst emailAutolink = {\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n}\n\n/** @type {ConstructRecord} */\nconst text = {}\n\n// To do: next major: expose functions that yields extension.\n\n/**\n * Extension for `micromark` that can be passed in `extensions` to enable GFM\n * autolink literal syntax.\n *\n * @type {Extension}\n */\nexport const gfmAutolinkLiteral = {\n  text\n}\n\n/** @type {Code} */\nlet code = 48\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink\n  code++\n  if (code === 58) code = 65\n  else if (code === 91) code = 97\n}\ntext[43] = emailAutolink\ntext[45] = emailAutolink\ntext[46] = emailAutolink\ntext[95] = emailAutolink\ntext[72] = [emailAutolink, protocolAutolink]\ntext[104] = [emailAutolink, protocolAutolink]\ntext[87] = [emailAutolink, wwwAutolink]\ntext[119] = [emailAutolink, wwwAutolink]\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this\n  /** @type {boolean | undefined} */\n  let dot\n  /** @type {boolean} */\n  let data\n  return start\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (\n      !gfmAtext(code) ||\n      !previousEmail.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkEmail')\n    return atext(code)\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code)\n      return atext\n    }\n    if (code === 64) {\n      effects.consume(code)\n      return emailDomain\n    }\n    return nok(code)\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(\n        emailDomainDotTrail,\n        emailDomainAfter,\n        emailDomainDot\n      )(code)\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true\n      effects.consume(code)\n      return emailDomain\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code)\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code)\n    dot = true\n    return emailDomain\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail')\n      effects.exit('literalAutolink')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this\n  return wwwStart\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (\n      (code !== 87 && code !== 119) ||\n      !previousWww.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkWww')\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(\n      wwwPrefix,\n      effects.attempt(domain, effects.attempt(path, wwwAfter), nok),\n      nok\n    )(code)\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this\n  let buffer = ''\n  let seen = false\n  return protocolStart\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if (\n      (code === 72 || code === 104) &&\n      previousProtocol.call(self, self.previous) &&\n      !previousUnbalanced(self.events)\n    ) {\n      effects.enter('literalAutolink')\n      effects.enter('literalAutolinkHttp')\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase()\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code)\n        return protocolSlashesInside\n      }\n    }\n    return nok(code)\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code)\n      if (seen) {\n        return afterProtocol\n      }\n      seen = true\n      return protocolSlashesInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null ||\n      asciiControl(code) ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)\n      ? nok(code)\n      : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code)\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0\n  return wwwPrefixInside\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++\n      effects.consume(code)\n      return wwwPrefixInside\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code)\n      return wwwPrefixAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment\n  /** @type {boolean | undefined} */\n  let seen\n  return domainInside\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code)\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      (code !== 45 && unicodePunctuation(code))\n    ) {\n      return domainAfter(code)\n    }\n    seen = true\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment\n      underscoreInLastSegment = undefined\n    }\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code)\n    }\n    return ok(code)\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0\n  let sizeClose = 0\n  return pathInside\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++\n      effects.consume(code)\n      return pathInside\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code)\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 38 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 60 ||\n      code === 63 ||\n      code === 93 ||\n      code === 95 ||\n      code === 126\n    ) {\n      return effects.check(trail, ok, pathAtPunctuation)(code)\n    }\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    effects.consume(code)\n    return pathInside\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++\n    }\n    effects.consume(code)\n    return pathInside\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 63 ||\n      code === 95 ||\n      code === 126\n    ) {\n      effects.consume(code)\n      return trail\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code)\n      return trailCharRefStart\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code)\n      return trailBracketAfter\n    }\n    if (\n      // `<` is an end.\n      code === 60 ||\n      // So is whitespace.\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (\n      code === null ||\n      code === 40 ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return trail(code)\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharRefInside(code) : nok(code)\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code)\n      return trail\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return trailCharRefInside\n    }\n\n    // It’s not a trail.\n    return nok(code)\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code)\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return (\n    code === null ||\n    code === 40 ||\n    code === 42 ||\n    code === 95 ||\n    code === 91 ||\n    code === 93 ||\n    code === 126 ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code)\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code))\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return (\n    code === 43 ||\n    code === 45 ||\n    code === 46 ||\n    code === 95 ||\n    asciiAlphanumeric(code)\n  )\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length\n  let result = false\n  while (index--) {\n    const token = events[index][1]\n    if (\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\n      !token._balanced\n    ) {\n      result = true\n      break\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false\n      break\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\n  }\n  return result\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1]\n    if (token.type === 'labelImage') {\n      labelStart = token\n      break\n    }\n\n    // Exit if we’ve walked far enough.\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === 'labelLink' ||\n      token.type === 'label' ||\n      token.type === 'image' ||\n      token.type === 'link'\n    ) {\n      break\n    }\n  }\n  return start\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n    const id = normalizeIdentifier(\n      self.sliceSerialize({\n        start: labelStart.end,\n        end: self.now()\n      })\n    )\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token | undefined} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    if (\n      events[index][1].type === 'labelImage' &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data'\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker'\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  }\n  // Increment the end 1 character.\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  /** @type {Token} */\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n\n  /** @type {Array<Event>} */\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context],\n    // The `[`\n    events[index + 3],\n    events[index + 4],\n    // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context],\n    // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context],\n    // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n  events.splice(index, events.length - index + 1, ...replacement)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n  let data\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteCallString')\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code)\n      }\n      effects.enter('gfmFootnoteCallLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteCallLabelMarker')\n      effects.exit('gfmFootnoteCall')\n      return ok\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? callEscape : callData\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n    return callData(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n  let identifier\n  let size = 0\n  /** @type {boolean | undefined} */\n  let data\n  return start\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelAtMarker\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      effects.enter('chunkString').contentType = 'string'\n      return labelInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      if (!defined.includes(identifier)) {\n        defined.push(identifier)\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(\n        effects,\n        whitespaceAfter,\n        'gfmFootnoteDefinitionWhitespace'\n      )\n    }\n    return nok(code)\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    4 + 1\n  )\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde.\n *\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\n\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {}\n  let single = options_.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n  if (single === null || single === undefined) {\n    single = true\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open &&\n            // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            }\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ]\n            const insideSpan = context.parser.constructs.insideSpan.null\n            if (insideSpan) {\n              // Between.\n              splice(\n                nextEvents,\n                nextEvents.length,\n                0,\n                resolveAll(insideSpan, events.slice(open + 1, index), context)\n              )\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n    return events\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous)\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = []\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {void}\n   */\n  add(index, remove, add) {\n    addImpl(this, index, remove, add)\n  }\n\n  // To do: not used here.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {void}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImpl(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {void}\n   */\n  consume(events) {\n    this.map.sort((a, b) => a[0] - b[0])\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length\n    /** @type {Array<Array<Event>>} */\n    const vecs = []\n    while (index > 0) {\n      index -= 1\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]))\n      // eslint-disable-next-line unicorn/no-array-push-push\n      vecs.push(this.map[index][2])\n\n      // Truncate rest.\n      events.length = this.map[index][0]\n    }\n    vecs.push([...events])\n    events.length = 0\n    let slice = vecs.pop()\n    while (slice) {\n      events.push(...slice)\n      slice = vecs.pop()\n    }\n\n    // Truncate everything.\n    this.map.length = 0\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {void}\n */\nfunction addImpl(editMap, at, remove, add) {\n  let index = 0\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove\n\n      // To do: before not used.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add)\n      // }\n\n      return\n    }\n    index += 1\n  }\n  editMap.map.push([at, remove, add])\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       console.log('to do: links?', add, rmCurr)\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef {'left' | 'center' | 'right' | 'none'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Array<Event>} events\n * @param {number} index\n * @returns {Array<Align>}\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false\n  /** @type {Array<Align>} */\n  const align = []\n  while (index < events.length) {\n    const event = events[index]\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(\n            events[index + 1][1].type === 'tableDelimiterMarker'\n              ? 'left'\n              : 'none'\n          )\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right'\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true\n    }\n    index += 1\n  }\n  return align\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {EditMap} from './edit-map.js'\nimport {gfmTableAlign} from './infer.js'\n\n// To do: next major: expose functions.\n\n/**\n * Extension for `micromark` that can be passed in `extensions` to enable GFM\n * table syntax.\n *\n * @type {Extension}\n */\nexport const gfmTable = {\n  flow: {\n    null: {\n      tokenize: tokenizeTable,\n      resolveAll: resolveTable\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this\n  let size = 0\n  let sizeB = 0\n  /** @type {boolean | undefined} */\n  let seen\n  return start\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1\n    while (index > -1) {\n      const type = self.events[index][1].type\n      if (\n        type === 'lineEnding' ||\n        // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n        type === 'linePrefix'\n      )\n        index--\n      else break\n    }\n    const tail = index > -1 ? self.events[index][1].type : null\n    const next =\n      tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    return next(code)\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead')\n    effects.enter('tableRow')\n    return headRowStart(code)\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code)\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1\n    return headRowBreak(code)\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true\n        effects.exit('tableRow')\n        effects.enter('lineEnding')\n        effects.consume(code)\n        effects.exit('lineEnding')\n        return headDelimiterStart\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, 'whitespace')(code)\n    }\n    sizeB += 1\n    if (seen) {\n      seen = false\n      // Header cell count.\n      size += 1\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      // Whether a delimiter was seen.\n      seen = true\n      return headRowBreak\n    }\n\n    // Anything else is cell data.\n    effects.enter('data')\n    return headRowData(code)\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return headRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? headRowEscape : headRowData\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return headRowData\n    }\n    return headRowData(code)\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    effects.enter('tableDelimiterRow')\n    // Track if we’ve seen a `:` or `|`.\n    seen = false\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        headDelimiterBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return headDelimiterBefore(code)\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code)\n    }\n    if (code === 124) {\n      seen = true\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return headDelimiterCellBefore\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, 'whitespace')(code)\n    }\n    return headDelimiterValueBefore(code)\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1\n      seen = true\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterLeftAlignmentAfter\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      return headDelimiterFiller(code)\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return headDelimiterFiller\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true\n      effects.exit('tableDelimiterFiller')\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterRightAlignmentAfter\n    }\n    effects.exit('tableDelimiterFiller')\n    return headDelimiterRightAlignmentAfter(code)\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, 'whitespace')(code)\n    }\n    return headDelimiterCellAfter(code)\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code)\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow')\n      effects.exit('tableHead')\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code)\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow')\n    return bodyRowBreak(code)\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return bodyRowBreak\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow')\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, 'whitespace')(code)\n    }\n\n    // Anything else is cell content.\n    effects.enter('data')\n    return bodyRowData(code)\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return bodyRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? bodyRowEscape : bodyRowData\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return bodyRowData\n    }\n    return bodyRowData(code)\n  }\n}\n\n/** @type {Resolver} */\n// eslint-disable-next-line complexity\nfunction resolveTable(events, context) {\n  let index = -1\n  let inFirstCellAwaitingPipe = true\n  /** @type {RowKind} */\n  let rowKind = 0\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0]\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0]\n  let afterHeadAwaitingFirstBodyRow = false\n  let lastTableEnd = 0\n  /** @type {Token | undefined} */\n  let currentTable\n  /** @type {Token | undefined} */\n  let currentBody\n  /** @type {Token | undefined} */\n  let currentCell\n  const map = new EditMap()\n  while (++index < events.length) {\n    const event = events[index]\n    const token = event[1]\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n          currentBody = undefined\n          lastTableEnd = 0\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        }\n        map.add(index, 0, [['enter', currentTable, context]])\n      } else if (\n        token.type === 'tableRow' ||\n        token.type === 'tableDelimiterRow'\n      ) {\n        inFirstCellAwaitingPipe = true\n        currentCell = undefined\n        lastCell = [0, 0, 0, 0]\n        cell = [0, index + 1, 0, 0]\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          }\n          map.add(index, 0, [['enter', currentBody, context]])\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1\n      }\n      // Cell data.\n      else if (\n        rowKind &&\n        (token.type === 'data' ||\n          token.type === 'tableDelimiterMarker' ||\n          token.type === 'tableDelimiterFiller')\n      ) {\n        inFirstCellAwaitingPipe = false\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n            lastCell = [0, 0, 0, 0]\n          }\n          cell[2] = index\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n          }\n          lastCell = cell\n          cell = [lastCell[1], index, 0, 0]\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true\n      lastTableEnd = index\n    } else if (\n      token.type === 'tableRow' ||\n      token.type === 'tableDelimiterRow'\n    ) {\n      lastTableEnd = index\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1]\n        currentCell = flushCell(\n          map,\n          context,\n          lastCell,\n          rowKind,\n          index,\n          currentCell\n        )\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell)\n      }\n      rowKind = 0\n    } else if (\n      rowKind &&\n      (token.type === 'data' ||\n        token.type === 'tableDelimiterMarker' ||\n        token.type === 'tableDelimiterFiller')\n    ) {\n      cell[3] = index\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n  }\n  map.consume(context.events)\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1\n  while (++index < context.events.length) {\n    const event = context.events[index]\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index)\n    }\n  }\n  return events\n}\n\n/// Generate a cell.\n/**\n *\n * @param {EditMap} map\n * @param {TokenizeContext} context\n * @param {Range} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName =\n    rowKind === 1\n      ? 'tableHeader'\n      : rowKind === 2\n      ? 'tableDelimiter'\n      : 'tableData'\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent'\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]))\n    map.add(range[0], 0, [['exit', previousCell, context]])\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1])\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  }\n  map.add(range[1], 0, [['enter', previousCell, context]])\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2])\n    const relatedEnd = getPoint(context.events, range[3])\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    }\n    map.add(range[2], 0, [['enter', valueToken, context]])\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]]\n      const end = context.events[range[3]]\n      start[1].end = Object.assign({}, end[1].end)\n      start[1].type = 'chunkText'\n      start[1].contentType = 'text'\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1\n        const b = range[3] - range[2] - 1\n        map.add(a, b, [])\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]])\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd))\n    map.add(rowEnd, 0, [['exit', previousCell, context]])\n    previousCell = undefined\n  }\n  return previousCell\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {EditMap} map\n * @param {TokenizeContext} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = []\n  const related = getPoint(context.events, index)\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related)\n    exits.push(['exit', tableBody, context])\n  }\n  table.end = Object.assign({}, related)\n  exits.push(['exit', table, context])\n  map.add(index + 1, 0, exits)\n}\n\n/**\n * @param {Array<Event>} events\n * @param {number} index\n * @returns {readonly Point}\n */\nfunction getPoint(events, index) {\n  const event = events[index]\n  const side = event[0] === 'enter' ? 'start' : 'end'\n  return event[1][side]\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  markdownSpace\n} from 'micromark-util-character'\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n}\n\n// To do: next major: expose function to make extension.\n\n/**\n * Extension for `micromark` that can be passed in `extensions`, to\n * enable GFM task list items syntax.\n *\n * @type {Extension}\n */\nexport const gfmTaskListItem = {\n  text: {\n    [91]: tasklistCheck\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n  return open\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== null ||\n      // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n    return nok(code)\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code)\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check(\n        {\n          tokenize: spaceThenNonSpace\n        },\n        ok,\n        nok\n      )(code)\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, 'whitespace')\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Content | Root} Node\n * @typedef {Extract<Node, MdastParent>} Parent\n * @typedef {Exclude<Parent, Root>} ContentParent\n *\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[Root, ...Array<ContentParent>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | undefined | null}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {string | RegExp} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n * @typedef {Record<string, Replace>} FindAndReplaceSchema\n *   Several find and replaces, in object form.\n * @typedef {[Find, Replace]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n * @typedef {string | ReplaceFunction} Replace\n *   Thing to replace with.\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore.\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param tree\n *   Tree to change.\n * @param find\n *   Patterns to find.\n * @param replace\n *   Things to replace with (when `find` is `Find`) or configuration.\n * @param options\n *   Configuration (when `find` is not `Find`).\n * @returns\n *   Given, modified, tree.\n */\n// To do: next major: remove `find` & `replace` combo, remove schema.\nexport const findAndReplace =\n  /**\n   * @type {(\n   *   (<Tree extends Node>(tree: Tree, find: Find, replace?: Replace | null | undefined, options?: Options | null | undefined) => Tree) &\n   *   (<Tree extends Node>(tree: Tree, schema: FindAndReplaceSchema | FindAndReplaceList, options?: Options | null | undefined) => Tree)\n   * )}\n   **/\n  (\n    /**\n     * @template {Node} Tree\n     * @param {Tree} tree\n     * @param {Find | FindAndReplaceSchema | FindAndReplaceList} find\n     * @param {Replace | Options | null | undefined} [replace]\n     * @param {Options | null | undefined} [options]\n     * @returns {Tree}\n     */\n    function (tree, find, replace, options) {\n      /** @type {Options | null | undefined} */\n      let settings\n      /** @type {FindAndReplaceSchema|FindAndReplaceList} */\n      let schema\n\n      if (typeof find === 'string' || find instanceof RegExp) {\n        // @ts-expect-error don’t expect options twice.\n        schema = [[find, replace]]\n        settings = options\n      } else {\n        schema = find\n        // @ts-expect-error don’t expect replace twice.\n        settings = replace\n      }\n\n      if (!settings) {\n        settings = {}\n      }\n\n      const ignored = convert(settings.ignore || [])\n      const pairs = toPairs(schema)\n      let pairIndex = -1\n\n      while (++pairIndex < pairs.length) {\n        visitParents(tree, 'text', visitor)\n      }\n\n      // To do next major: don’t return the given tree.\n      return tree\n\n      /** @type {import('unist-util-visit-parents/complex-types.js').BuildVisitor<Root, 'text'>} */\n      function visitor(node, parents) {\n        let index = -1\n        /** @type {Parent | undefined} */\n        let grandparent\n\n        while (++index < parents.length) {\n          const parent = parents[index]\n\n          if (\n            ignored(\n              parent,\n              // @ts-expect-error: TS doesn’t understand but it’s perfect.\n              grandparent ? grandparent.children.indexOf(parent) : undefined,\n              grandparent\n            )\n          ) {\n            return\n          }\n\n          grandparent = parent\n        }\n\n        if (grandparent) {\n          return handler(node, parents)\n        }\n      }\n\n      /**\n       * Handle a text node which is not in an ignored parent.\n       *\n       * @param {Text} node\n       *   Text node.\n       * @param {Array<Parent>} parents\n       *   Parents.\n       * @returns {VisitorResult}\n       *   Result.\n       */\n      function handler(node, parents) {\n        const parent = parents[parents.length - 1]\n        const find = pairs[pairIndex][0]\n        const replace = pairs[pairIndex][1]\n        let start = 0\n        // @ts-expect-error: TS is wrong, some of these children can be text.\n        const index = parent.children.indexOf(node)\n        let change = false\n        /** @type {Array<PhrasingContent>} */\n        let nodes = []\n\n        find.lastIndex = 0\n\n        let match = find.exec(node.value)\n\n        while (match) {\n          const position = match.index\n          /** @type {RegExpMatchObject} */\n          const matchObject = {\n            index: match.index,\n            input: match.input,\n            // @ts-expect-error: stack is fine.\n            stack: [...parents, node]\n          }\n          let value = replace(...match, matchObject)\n\n          if (typeof value === 'string') {\n            value = value.length > 0 ? {type: 'text', value} : undefined\n          }\n\n          // It wasn’t a match after all.\n          if (value !== false) {\n            if (start !== position) {\n              nodes.push({\n                type: 'text',\n                value: node.value.slice(start, position)\n              })\n            }\n\n            if (Array.isArray(value)) {\n              nodes.push(...value)\n            } else if (value) {\n              nodes.push(value)\n            }\n\n            start = position + match[0].length\n            change = true\n          }\n\n          if (!find.global) {\n            break\n          }\n\n          match = find.exec(node.value)\n        }\n\n        if (change) {\n          if (start < node.value.length) {\n            nodes.push({type: 'text', value: node.value.slice(start)})\n          }\n\n          parent.children.splice(index, 1, ...nodes)\n        } else {\n          nodes = [node]\n        }\n\n        return index + nodes.length\n      }\n    }\n  )\n\n/**\n * Turn a schema into pairs.\n *\n * @param {FindAndReplaceSchema | FindAndReplaceList} schema\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(schema) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (typeof schema !== 'object') {\n    throw new TypeError('Expected array or object as schema')\n  }\n\n  if (Array.isArray(schema)) {\n    let index = -1\n\n    while (++index < schema.length) {\n      result.push([\n        toExpression(schema[index][0]),\n        toFunction(schema[index][1])\n      ])\n    }\n  } else {\n    /** @type {string} */\n    let key\n\n    for (key in schema) {\n      if (own.call(schema, key)) {\n        result.push([toExpression(key), toFunction(schema[key])])\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function' ? replace : () => replace\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n */\n\nimport {ccount} from 'ccount'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n// To do: next major: expose functions instead of extensions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM autolink literals.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmAutolinkLiteralFromMarkdown = {\n  transforms: [transformGfmAutolinkLiterals],\n  enter: {\n    literalAutolink: enterLiteralAutolink,\n    literalAutolinkEmail: enterLiteralAutolinkValue,\n    literalAutolinkHttp: enterLiteralAutolinkValue,\n    literalAutolinkWww: enterLiteralAutolinkValue\n  },\n  exit: {\n    literalAutolink: exitLiteralAutolink,\n    literalAutolinkEmail: exitLiteralAutolinkEmail,\n    literalAutolinkHttp: exitLiteralAutolinkHttp,\n    literalAutolinkWww: exitLiteralAutolinkWww\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmAutolinkLiteralToMarkdown = {\n  unsafe: [\n    {\n      character: '@',\n      before: '[+\\\\-.\\\\w]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {\n      character: '.',\n      before: '[Ww]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {character: ':', before: '[ps]', after: '\\\\/', inConstruct, notInConstruct}\n  ]\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = /** @type {Link} */ (this.stack[this.stack.length - 1])\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Link | Array<PhrasingContent> | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","/**\n * @typedef {import('../types.js').AssociationId} AssociationId\n */\n\nimport {decodeString} from 'micromark-util-decode-string'\n\n/**\n * Get an identifier from an association to match it to others.\n *\n * Associations are nodes that match to something else through an ID:\n * <https://github.com/syntax-tree/mdast#association>.\n *\n * The `label` of an association is the string value: character escapes and\n * references work, and casing is intact.\n * The `identifier` is used to match one association to another:\n * controversially, character escapes and references don’t work in this\n * matching: `&copy;` does not match `©`, and `\\+` does not match `+`.\n *\n * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\\nb`\n * matches `a b`.\n * So, we do prefer the label when figuring out how we’re going to serialize:\n * it has whitespace, casing, and we can ignore most useless character\n * escapes and all character references.\n *\n * @type {AssociationId}\n */\nexport function association(node) {\n  if (node.label || !node.identifier) {\n    return node.label || ''\n  }\n\n  return decodeString(node.identifier)\n}\n","/**\n * @typedef {import('../types.js').FlowContent} FlowContent\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * @param {Parent & {children: Array<FlowContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nexport function containerFlow(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  const tracker = state.createTracker(info)\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          before: '\\n',\n          after: '\\n',\n          ...tracker.current()\n        })\n      )\n    )\n\n    if (child.type !== 'list') {\n      state.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(\n        tracker.move(between(child, children[index + 1], parent, state))\n      )\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n\n/**\n * @param {Node} left\n * @param {Node} right\n * @param {Parent} parent\n * @param {State} state\n * @returns {string}\n */\nfunction between(left, right, parent, state) {\n  let index = state.join.length\n\n  while (index--) {\n    const result = state.join[index](left, right, parent, state)\n\n    if (result === true || result === 1) {\n      break\n    }\n\n    if (typeof result === 'number') {\n      return '\\n'.repeat(1 + result)\n    }\n\n    if (result === false) {\n      return '\\n\\n<!---->\\n\\n'\n    }\n  }\n\n  return '\\n\\n'\n}\n","/**\n * @typedef {import('../types.js').IndentLines} IndentLines\n */\n\nconst eol = /\\r?\\n|\\r/g\n\n/**\n * @type {IndentLines}\n */\nexport function indentLines(value, map) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  let line = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = eol.exec(value))) {\n    one(value.slice(start, match.index))\n    result.push(match[0])\n    start = match.index + match[0].length\n    line++\n  }\n\n  one(value.slice(start))\n\n  return result.join('')\n\n  /**\n   * @param {string} value\n   */\n  function one(value) {\n    result.push(map(value, line, !value))\n  }\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Unsafe} pattern\n * @returns {RegExp}\n */\nexport function patternCompile(pattern) {\n  if (!pattern._compiled) {\n    const before =\n      (pattern.atBreak ? '[\\\\r\\\\n][\\\\t ]*' : '') +\n      (pattern.before ? '(?:' + pattern.before + ')' : '')\n\n    pattern._compiled = new RegExp(\n      (before ? '(' + before + ')' : '') +\n        (/[|\\\\{}()[\\]^$+*?.-]/.test(pattern.character) ? '\\\\' : '') +\n        pattern.character +\n        (pattern.after ? '(?:' + pattern.after + ')' : ''),\n      'g'\n    )\n  }\n\n  return pattern._compiled\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n * @typedef {import('../types.js').ConstructName} ConstructName\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').SafeConfig} SafeConfig\n */\n\nimport {patternCompile} from './pattern-compile.js'\nimport {patternInScope} from './pattern-in-scope.js'\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {string | null | undefined} input\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nexport function safe(state, input, config) {\n  const value = (config.before || '') + (input || '') + (config.after || '')\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {Record<number, {before: boolean, after: boolean}>} */\n  const infos = {}\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n\n    if (!patternInScope(state.stack, pattern)) {\n      continue\n    }\n\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    while ((match = expression.exec(value))) {\n      const before = 'before' in pattern || Boolean(pattern.atBreak)\n      const after = 'after' in pattern\n      const position = match.index + (before ? match[1].length : 0)\n\n      if (positions.includes(position)) {\n        if (infos[position].before && !before) {\n          infos[position].before = false\n        }\n\n        if (infos[position].after && !after) {\n          infos[position].after = false\n        }\n      } else {\n        positions.push(position)\n        infos[position] = {before, after}\n      }\n    }\n  }\n\n  positions.sort(numerical)\n\n  let start = config.before ? config.before.length : 0\n  const end = value.length - (config.after ? config.after.length : 0)\n  index = -1\n\n  while (++index < positions.length) {\n    const position = positions[index]\n\n    // Character before or after matched:\n    if (position < start || position >= end) {\n      continue\n    }\n\n    // If this character is supposed to be escaped because it has a condition on\n    // the next character, and the next character is definitly being escaped,\n    // then skip this escape.\n    if (\n      (position + 1 < end &&\n        positions[index + 1] === position + 1 &&\n        infos[position].after &&\n        !infos[position + 1].before &&\n        !infos[position + 1].after) ||\n      (positions[index - 1] === position - 1 &&\n        infos[position].before &&\n        !infos[position - 1].before &&\n        !infos[position - 1].after)\n    ) {\n      continue\n    }\n\n    if (start !== position) {\n      // If we have to use a character reference, an ampersand would be more\n      // correct, but as backslashes only care about punctuation, either will\n      // do the trick\n      result.push(escapeBackslashes(value.slice(start, position), '\\\\'))\n    }\n\n    start = position\n\n    if (\n      /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&\n      (!config.encode || !config.encode.includes(value.charAt(position)))\n    ) {\n      // Character escape.\n      result.push('\\\\')\n    } else {\n      // Character reference.\n      result.push(\n        '&#x' + value.charCodeAt(position).toString(16).toUpperCase() + ';'\n      )\n      start++\n    }\n  }\n\n  result.push(escapeBackslashes(value.slice(start, end), config.after))\n\n  return result.join('')\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction numerical(a, b) {\n  return a - b\n}\n\n/**\n * @param {string} value\n * @param {string} after\n * @returns {string}\n */\nfunction escapeBackslashes(value, after) {\n  const expression = /\\\\(?=[!-/:-@[-`{-~])/g\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const results = []\n  const whole = value + after\n  let index = -1\n  let start = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = expression.exec(whole))) {\n    positions.push(match.index)\n  }\n\n  while (++index < positions.length) {\n    if (start !== positions[index]) {\n      results.push(value.slice(start, positions[index]))\n    }\n\n    results.push('\\\\')\n    start = positions[index]\n  }\n\n  results.push(value.slice(start))\n\n  return results.join('')\n}\n","/**\n * @typedef {import('../types.js').CreateTracker} CreateTracker\n * @typedef {import('../types.js').TrackCurrent} TrackCurrent\n * @typedef {import('../types.js').TrackMove} TrackMove\n * @typedef {import('../types.js').TrackShift} TrackShift\n */\n\n/**\n * Track positional info in the output.\n *\n * @type {CreateTracker}\n */\nexport function track(config) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = config || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @type {TrackCurrent}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @type {TrackShift}\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past some generated markdown.\n   *\n   * @type {TrackMove}\n   */\n  function move(input) {\n    // eslint-disable-next-line unicorn/prefer-default-parameters\n    const value = input || ''\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n */\n\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {association} from 'mdast-util-to-markdown/lib/util/association.js'\nimport {containerFlow} from 'mdast-util-to-markdown/lib/util/container-flow.js'\nimport {indentLines} from 'mdast-util-to-markdown/lib/util/indent-lines.js'\nimport {safe} from 'mdast-util-to-markdown/lib/util/safe.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n// To do: next major: rename `context` -> `state`, `safeOptions` to `info`, use\n// utilities on `state`.\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteReference')\n  const subexit = context.enter('reference')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteDefinition')\n  const subexit = context.enter('label')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    indentLines(containerFlow(node, context, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').PhrasingContent} PhrasingContent\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @param {Parent & {children: Array<PhrasingContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nexport function containerPhrasing(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n  let before = info.before\n\n  indexStack.push(-1)\n  let tracker = state.createTracker(info)\n\n  while (++index < children.length) {\n    const child = children[index]\n    /** @type {string} */\n    let after\n\n    indexStack[indexStack.length - 1] = index\n\n    if (index + 1 < children.length) {\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = state.handle.handlers[children[index + 1].type]\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      if (handle && handle.peek) handle = handle.peek\n      after = handle\n        ? handle(children[index + 1], parent, state, {\n            before: '',\n            after: '',\n            ...tracker.current()\n          }).charAt(0)\n        : ''\n    } else {\n      after = info.after\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (\n      results.length > 0 &&\n      (before === '\\r' || before === '\\n') &&\n      child.type === 'html'\n    ) {\n      results[results.length - 1] = results[results.length - 1].replace(\n        /(\\r?\\n|\\r)$/,\n        ' '\n      )\n      before = ' '\n\n      // To do: does this work to reset tracker?\n      tracker = state.createTracker(info)\n      tracker.move(results.join(''))\n    }\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          ...tracker.current(),\n          before,\n          after\n        })\n      )\n    )\n\n    before = results[results.length - 1].slice(-1)\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: expose functions.\n// To do: next major: use `state`, state utilities.\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmStrikethroughFromMarkdown = {\n  canContainEols: ['delete'],\n  enter: {strikethrough: enterStrikethrough},\n  exit: {strikethrough: exitStrikethrough}\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmStrikethroughToMarkdown = {\n  unsafe: [\n    {\n      character: '~',\n      inConstruct: 'phrasing',\n      notInConstruct: constructsWithoutStrikethrough\n    }\n  ],\n  handlers: {delete: handleDelete}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  const exit = context.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += containerPhrasing(node, context, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternCompile} from '../util/pattern-compile.js'\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|ReadonlyArray<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its “visible” size.\n *   Note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */\n\n/**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {ReadonlyArray<ReadonlyArray<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */\nexport function markdownTable(table, options = {}) {\n  const align = (options.align || []).concat()\n  const stringLength = options.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (options.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      options.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (options.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (options.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (options.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        options.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(options.alignDelimiters === false && cell === '') &&\n        (options.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (options.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (options.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (options.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        options.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      options.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string} value\n * @returns {number}\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n    ? 108 /* `l` */\n    : code === 82 /* `R` */ || code === 114 /* `r` */\n    ? 114 /* `r` */\n    : 0\n}\n","/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').InlineCode} InlineCode\n *\n * @typedef {import('markdown-table').MarkdownTableOptions} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Context} ToMarkdownContext\n * @typedef {import('mdast-util-to-markdown').SafeOptions} SafeOptions\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells.\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters.\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {inlineCode} from 'mdast-util-to-markdown/lib/handle/inline-code.js'\nimport {markdownTable} from 'markdown-table'\n\n// To do: next major: use `state` and `state` utilities from `mdast-util-to-markdown`.\n// To do: next major: use `defaultHandlers.inlineCode`.\n// To do: next major: expose functions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM tables.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTableFromMarkdown = {\n  enter: {\n    table: enterTable,\n    tableData: enterCell,\n    tableHeader: enterCell,\n    tableRow: enterRow\n  },\n  exit: {\n    codeText: exitCodeText,\n    table: exitTable,\n    tableData: exit,\n    tableHeader: exit,\n    tableRow: exit\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  /** @type {Array<'left' | 'right' | 'center' | 'none'>} */\n  // @ts-expect-error: `align` is custom.\n  const align = token._align\n  this.enter(\n    {\n      type: 'table',\n      align: align.map((d) => (d === 'none' ? null : d)),\n      children: []\n    },\n    token\n  )\n  this.setData('inTable', true)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.setData('inTable')\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.getData('inTable')) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = /** @type {InlineCode} */ (this.stack[this.stack.length - 1])\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      table: handleTable,\n      tableRow: handleTableRow,\n      tableCell: handleTableCell,\n      inlineCode: inlineCodeWithTable\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, context, safeOptions) {\n    return serializeData(\n      handleTableAsData(node, context, safeOptions),\n      node.align\n    )\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, context, safeOptions) {\n    const row = handleTableRowAsData(node, context, safeOptions)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, context, safeOptions) {\n    const exit = context.enter('tableCell')\n    const subexit = context.enter('phrasing')\n    const value = containerPhrasing(node, context, {\n      ...safeOptions,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = context.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(\n        children[index],\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableRowAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = context.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(\n        children[index],\n        node,\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, context) {\n    let value = inlineCode(node, parent, context)\n\n    if (context.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parent | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'tab'\n\n  // To do: remove in a major.\n  // @ts-expect-error: deprecated.\n  if (style === 1 || style === '1') {\n    return 'one'\n  }\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\n/**\n * @typedef {Extract<Root | Content, Parent>} Parents\n */\n\nimport {listItem} from 'mdast-util-to-markdown/lib/handle/list-item.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: rename `context` -> `state`, `safeOptions` -> `info`, use\n// `track` from `state`.\n// To do: next major: replace exports with functions.\n// To do: next major: use `defaulthandlers.listItem`.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM task list items.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTaskListItemFromMarkdown = {\n  exit: {\n    taskListCheckValueChecked: exitCheck,\n    taskListCheckValueUnchecked: exitCheck,\n    paragraph: exitParagraphWithTaskListItem\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM task list items.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmTaskListItemToMarkdown = {\n  unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n  handlers: {listItem: listItemWithTaskListItem}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  const node = /** @type {ListItem} */ (this.stack[this.stack.length - 2])\n  // We’re always in a paragraph, in a list item.\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = /** @type {Parents} */ (this.stack[this.stack.length - 2])\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = /** @type {Paragraph} */ (this.stack[this.stack.length - 1])\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, context, safeOptions) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = track(safeOptions)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = listItem(node, parent, context, {\n    ...safeOptions,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @callback Handler\n *   Handle a value, with a certain ID field set to a certain value.\n *   The ID field is passed to `zwitch`, and it’s value is this function’s\n *   place on the `handlers` record.\n * @param {...any} parameters\n *   Arbitrary parameters passed to the zwitch.\n *   The first will be an object with a certain ID field set to a certain value.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback UnknownHandler\n *   Handle values that do have a certain ID field, but it’s set to a value\n *   that is not listed in the `handlers` record.\n * @param {unknown} value\n *   An object with a certain ID field set to an unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback InvalidHandler\n *   Handle values that do not have a certain ID field.\n * @param {unknown} value\n *   Any unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {void|null|undefined|never}\n *   This should crash or return nothing.\n */\n\n/**\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @typedef Options\n *   Configuration (required).\n * @property {Invalid} [invalid]\n *   Handler to use for invalid values.\n * @property {Unknown} [unknown]\n *   Handler to use for unknown values.\n * @property {Handlers} [handlers]\n *   Handlers to use.\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Handle values based on a field.\n *\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @param {string} key\n *   Field to switch on.\n * @param {Options<Invalid, Unknown, Handlers>} [options]\n *   Configuration (required).\n * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}\n */\nexport function zwitch(key, options) {\n  const settings = options || {}\n\n  /**\n   * Handle one value.\n   *\n   * Based on the bound `key`, a respective handler will be called.\n   * If `value` is not an object, or doesn’t have a `key` property, the special\n   * “invalid” handler will be called.\n   * If `value` has an unknown `key`, the special “unknown” handler will be\n   * called.\n   *\n   * All arguments, and the context object, are passed through to the handler,\n   * and it’s result is returned.\n   *\n   * @this {unknown}\n   *   Any context object.\n   * @param {unknown} [value]\n   *   Any value.\n   * @param {...unknown} parameters\n   *   Arbitrary parameters passed to the zwitch.\n   * @property {Handler} invalid\n   *   Handle for values that do not have a certain ID field.\n   * @property {Handler} unknown\n   *   Handle values that do have a certain ID field, but it’s set to a value\n   *   that is not listed in the `handlers` record.\n   * @property {Handlers} handlers\n   *   Record of handlers.\n   * @returns {unknown}\n   *   Anything.\n   */\n  function one(value, ...parameters) {\n    /** @type {Handler|undefined} */\n    let fn = one.invalid\n    const handlers = one.handlers\n\n    if (value && own.call(value, key)) {\n      // @ts-expect-error Indexable.\n      const id = String(value[key])\n      // @ts-expect-error Indexable.\n      fn = own.call(handlers, id) ? handlers[id] : one.unknown\n    }\n\n    if (fn) {\n      return fn.call(this, value, ...parameters)\n    }\n  }\n\n  one.handlers = settings.handlers || {}\n  one.invalid = settings.invalid\n  one.unknown = settings.unknown\n\n  // @ts-expect-error: matches!\n  return one\n}\n","/**\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').State} State\n */\n\n/**\n * @param {State} base\n * @param {Options} extension\n * @returns {State}\n */\nexport function configure(base, extension) {\n  let index = -1\n  /** @type {keyof Options} */\n  let key\n\n  // First do subextensions.\n  if (extension.extensions) {\n    while (++index < extension.extensions.length) {\n      configure(base, extension.extensions[index])\n    }\n  }\n\n  for (key in extension) {\n    if (key === 'extensions') {\n      // Empty.\n    } else if (key === 'unsafe' || key === 'join') {\n      /* c8 ignore next 2 */\n      // @ts-expect-error: hush.\n      base[key] = [...(base[key] || []), ...(extension[key] || [])]\n    } else if (key === 'handlers') {\n      base[key] = Object.assign(base[key], extension[key] || {})\n    } else {\n      // @ts-expect-error: hush.\n      base.options[key] = extension[key]\n    }\n  }\n\n  return base\n}\n","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parent | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    !state.options.fences &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\n\nemphasis.peek = emphasisPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Emphasis} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parent | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').State} State\n */\n\nimport {visit, EXIT} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, (node) => {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @typedef {import('mdast').HTML} HTML\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {HTML} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').State} State\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Exit} Exit\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkStrong} from '../util/check-strong.js'\n\nstrong.peek = strongPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Strong} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker + marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker + marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Strong} _\n * @param {Parent | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value =\n      '&#x' +\n      value.charCodeAt(0).toString(16).toUpperCase() +\n      ';' +\n      value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkBulletOrderedOther} from '../util/check-bullet-ordered-other.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parent | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? checkBulletOrderedOther(state)\n    : checkBulletOther(state)\n  const bulletLastUsed = state.bulletLastUsed\n  let useDifferentMarker = false\n\n  if (\n    parent &&\n    // Explicit `other` set.\n    (node.ordered\n      ? state.options.bulletOrderedOther\n      : state.options.bulletOther) &&\n    bulletLastUsed &&\n    bullet === bulletLastUsed\n  ) {\n    useDifferentMarker = true\n  }\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\nimport {checkBulletOrdered} from './check-bullet-ordered.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrderedOther(state) {\n  const bulletOrdered = checkBulletOrdered(state)\n  const bulletOrderedOther = state.options.bulletOrderedOther\n\n  if (!bulletOrderedOther) {\n    return bulletOrdered === '.' ? ')' : '.'\n  }\n\n  if (bulletOrderedOther !== '.' && bulletOrderedOther !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOrderedOther +\n        '` for `options.bulletOrderedOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOrderedOther === bulletOrdered) {\n    throw new Error(\n      'Expected `bulletOrdered` (`' +\n        bulletOrdered +\n        '`) and `bulletOrderedOther` (`' +\n        bulletOrderedOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOrderedOther\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some((d) => phrasing(d))\n  const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  // @ts-expect-error: `root`s are supposed to have one type of content\n  return fn.call(state, node, info)\n}\n","/**\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\n/**\n * @param {Text} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parent | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('./types.js').Join} Join\n */\n\nimport {formatCodeAsIndented} from './util/format-code-as-indented.js'\nimport {formatHeadingAsSetext} from './util/format-heading-as-setext.js'\n\n/** @type {Array<Join>} */\nexport const join = [joinDefaults]\n\n/** @type {Join} */\nfunction joinDefaults(left, right, parent, state) {\n  // Indented code after list or another indented code.\n  if (\n    right.type === 'code' &&\n    formatCodeAsIndented(right, state) &&\n    (left.type === 'list' ||\n      (left.type === right.type && formatCodeAsIndented(left, state)))\n  ) {\n    return false\n  }\n\n  // Two lists with the same marker.\n  if (\n    left.type === 'list' &&\n    left.type === right.type &&\n    Boolean(left.ordered) === Boolean(right.ordered) &&\n    !(left.ordered\n      ? state.options.bulletOrderedOther\n      : state.options.bulletOther)\n  ) {\n    return false\n  }\n\n  // Join children of a list or an item.\n  // In which case, `parent` has a `spread` field.\n  if ('spread' in parent && typeof parent.spread === 'boolean') {\n    if (\n      left.type === 'paragraph' &&\n      // Two paragraphs.\n      (left.type === right.type ||\n        right.type === 'definition' ||\n        // Paragraph followed by a setext heading.\n        (right.type === 'heading' && formatHeadingAsSetext(right, state)))\n    ) {\n      return\n    }\n\n    return parent.spread ? 1 : 0\n  }\n}\n","/**\n * @typedef {import('./types.js').Unsafe} Unsafe\n * @typedef {import('./types.js').ConstructName} ConstructName\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain things like attention (emphasis, strong), images, or links.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * @type {Array<ConstructName>}\n */\nconst fullPhrasingSpans = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\n/** @type {Array<Unsafe>} */\nexport const unsafe = [\n  {character: '\\t', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {character: '\\t', before: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {\n    character: '\\t',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']\n  },\n  {\n    character: '\\r',\n    inConstruct: [\n      'codeFencedLangGraveAccent',\n      'codeFencedLangTilde',\n      'codeFencedMetaGraveAccent',\n      'codeFencedMetaTilde',\n      'destinationLiteral',\n      'headingAtx'\n    ]\n  },\n  {\n    character: '\\n',\n    inConstruct: [\n      'codeFencedLangGraveAccent',\n      'codeFencedLangTilde',\n      'codeFencedMetaGraveAccent',\n      'codeFencedMetaTilde',\n      'destinationLiteral',\n      'headingAtx'\n    ]\n  },\n  {character: ' ', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {character: ' ', before: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {\n    character: ' ',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']\n  },\n  // An exclamation mark can start an image, if it is followed by a link or\n  // a link reference.\n  {\n    character: '!',\n    after: '\\\\[',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  // A quote can break out of a title.\n  {character: '\"', inConstruct: 'titleQuote'},\n  // A number sign could start an ATX heading if it starts a line.\n  {atBreak: true, character: '#'},\n  {character: '#', inConstruct: 'headingAtx', after: '(?:[\\r\\n]|$)'},\n  // Dollar sign and percentage are not used in markdown.\n  // An ampersand could start a character reference.\n  {character: '&', after: '[#A-Za-z]', inConstruct: 'phrasing'},\n  // An apostrophe can break out of a title.\n  {character: \"'\", inConstruct: 'titleApostrophe'},\n  // A left paren could break out of a destination raw.\n  {character: '(', inConstruct: 'destinationRaw'},\n  // A left paren followed by `]` could make something into a link or image.\n  {\n    before: '\\\\]',\n    character: '(',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  // A right paren could start a list item or break out of a destination\n  // raw.\n  {atBreak: true, before: '\\\\d+', character: ')'},\n  {character: ')', inConstruct: 'destinationRaw'},\n  // An asterisk can start thematic breaks, list items, emphasis, strong.\n  {atBreak: true, character: '*', after: '(?:[ \\t\\r\\n*])'},\n  {character: '*', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // A plus sign could start a list item.\n  {atBreak: true, character: '+', after: '(?:[ \\t\\r\\n])'},\n  // A dash can start thematic breaks, list items, and setext heading\n  // underlines.\n  {atBreak: true, character: '-', after: '(?:[ \\t\\r\\n-])'},\n  // A dot could start a list item.\n  {atBreak: true, before: '\\\\d+', character: '.', after: '(?:[ \\t\\r\\n]|$)'},\n  // Slash, colon, and semicolon are not used in markdown for constructs.\n  // A less than can start html (flow or text) or an autolink.\n  // HTML could start with an exclamation mark (declaration, cdata, comment),\n  // slash (closing tag), question mark (instruction), or a letter (tag).\n  // An autolink also starts with a letter.\n  // Finally, it could break out of a destination literal.\n  {atBreak: true, character: '<', after: '[!/?A-Za-z]'},\n  {\n    character: '<',\n    after: '[!/?A-Za-z]',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  {character: '<', inConstruct: 'destinationLiteral'},\n  // An equals to can start setext heading underlines.\n  {atBreak: true, character: '='},\n  // A greater than can start block quotes and it can break out of a\n  // destination literal.\n  {atBreak: true, character: '>'},\n  {character: '>', inConstruct: 'destinationLiteral'},\n  // Question mark and at sign are not used in markdown for constructs.\n  // A left bracket can start definitions, references, labels,\n  {atBreak: true, character: '['},\n  {character: '[', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  {character: '[', inConstruct: ['label', 'reference']},\n  // A backslash can start an escape (when followed by punctuation) or a\n  // hard break (when followed by an eol).\n  // Note: typical escapes are handled in `safe`!\n  {character: '\\\\', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  // A right bracket can exit labels.\n  {character: ']', inConstruct: ['label', 'reference']},\n  // Caret is not used in markdown for constructs.\n  // An underscore can start emphasis, strong, or a thematic break.\n  {atBreak: true, character: '_'},\n  {character: '_', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // A grave accent can start code (fenced or text), or it can break out of\n  // a grave accent code fence.\n  {atBreak: true, character: '`'},\n  {\n    character: '`',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedMetaGraveAccent']\n  },\n  {character: '`', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // Left brace, vertical bar, right brace are not used in markdown for\n  // constructs.\n  // A tilde can start code (fenced).\n  {atBreak: true, character: '~'}\n]\n","/**\n * @typedef {import('./types.js').Enter} Enter\n * @typedef {import('./types.js').Info} Info\n * @typedef {import('./types.js').Join} Join\n * @typedef {import('./types.js').FlowContent} FlowContent\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').Parent} Parent\n * @typedef {import('./types.js').PhrasingContent} PhrasingContent\n * @typedef {import('./types.js').SafeConfig} SafeConfig\n * @typedef {import('./types.js').State} State\n * @typedef {import('./types.js').TrackFields} TrackFields\n */\n\nimport {zwitch} from 'zwitch'\nimport {configure} from './configure.js'\nimport {handle as handlers} from './handle/index.js'\nimport {join} from './join.js'\nimport {unsafe} from './unsafe.js'\nimport {association} from './util/association.js'\nimport {containerPhrasing} from './util/container-phrasing.js'\nimport {containerFlow} from './util/container-flow.js'\nimport {indentLines} from './util/indent-lines.js'\nimport {safe} from './util/safe.js'\nimport {track} from './util/track.js'\n\n/**\n * Turn an mdast syntax tree into markdown.\n *\n * @param {Node} tree\n *   Tree to serialize.\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized markdown representing `tree`.\n */\nexport function toMarkdown(tree, options = {}) {\n  /** @type {State} */\n  const state = {\n    enter,\n    indentLines,\n    associationId: association,\n    containerPhrasing: containerPhrasingBound,\n    containerFlow: containerFlowBound,\n    createTracker: track,\n    safe: safeBound,\n    stack: [],\n    unsafe: [],\n    join: [],\n    // @ts-expect-error: we’ll fill it next.\n    handlers: {},\n    options: {},\n    indexStack: [],\n    // @ts-expect-error: we’ll add `handle` later.\n    handle: undefined\n  }\n\n  configure(state, {unsafe, join, handlers})\n  configure(state, options)\n\n  if (state.options.tightDefinitions) {\n    configure(state, {join: [joinDefinition]})\n  }\n\n  state.handle = zwitch('type', {\n    invalid,\n    unknown,\n    handlers: state.handlers\n  })\n\n  let result = state.handle(tree, undefined, state, {\n    before: '\\n',\n    after: '\\n',\n    now: {line: 1, column: 1},\n    lineShift: 0\n  })\n\n  if (\n    result &&\n    result.charCodeAt(result.length - 1) !== 10 &&\n    result.charCodeAt(result.length - 1) !== 13\n  ) {\n    result += '\\n'\n  }\n\n  return result\n\n  /** @type {Enter} */\n  function enter(name) {\n    state.stack.push(name)\n    return exit\n\n    function exit() {\n      state.stack.pop()\n    }\n  }\n}\n\n/**\n * @param {unknown} value\n * @returns {never}\n */\nfunction invalid(value) {\n  throw new Error('Cannot handle value `' + value + '`, expected node')\n}\n\n/**\n * @param {unknown} node\n * @returns {never}\n */\nfunction unknown(node) {\n  // @ts-expect-error: fine.\n  throw new Error('Cannot handle unknown node `' + node.type + '`')\n}\n\n/** @type {Join} */\nfunction joinDefinition(left, right) {\n  // No blank line between adjacent definitions.\n  if (left.type === 'definition' && left.type === right.type) {\n    return 0\n  }\n}\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Parent & {children: Array<PhrasingContent>}} parent\n *   Parent of flow nodes.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nfunction containerPhrasingBound(parent, info) {\n  return containerPhrasing(parent, this, info)\n}\n\n/**\n * Serialize the children of a parent that contains flow children.\n *\n * These children will typically be joined by blank lines.\n * What they are joined by exactly is defined by `Join` functions.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Parent & {children: Array<FlowContent>}} parent\n *   Parent of flow nodes.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nfunction containerFlowBound(parent, info) {\n  return containerFlow(parent, this, info)\n}\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {string | null | undefined} value\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nfunction safeBound(value, config) {\n  return safe(this, value, config)\n}\n","/**\n * Throw a given error.\n *\n * @param {Error | null | undefined} [error]\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","var own = {}.hasOwnProperty\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * Stringify one point, a position (start and end points), or a node’s\n * positional information.\n *\n * @param {Node|Position|Point} [value]\n * @returns {string}\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if (own.call(value, 'position') || own.call(value, 'type')) {\n    // @ts-ignore looks like a node.\n    return position(value.position)\n  }\n\n  // Position.\n  if (own.call(value, 'start') || own.call(value, 'end')) {\n    // @ts-ignore looks like a position.\n    return position(value)\n  }\n\n  // Point.\n  if (own.call(value, 'line') || own.call(value, 'column')) {\n    // @ts-ignore looks like a point.\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\nexport class VFileMessage extends Error {\n  /**\n   * Constructor of a message for `reason` at `place` from `origin`.\n   * When an error is passed in as `reason`, copies the `stack`.\n   *\n   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.\n   * @param {Node|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).\n   * @param {string} [origin] Place in code the message originates from (`string`, optional).\n   */\n  constructor(reason, place, origin) {\n    /** @type {[string?, string?]} */\n    var parts = [null, null]\n    /** @type {Position} */\n    var position = {\n      start: {line: null, column: null},\n      end: {line: null, column: null}\n    }\n    /** @type {number} */\n    var index\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = null\n    }\n\n    if (typeof origin === 'string') {\n      index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-ignore Looks like a position.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // @ts-ignore Looks like a point.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`\n    this.name = stringifyPosition(place) || '1:1'\n    this.message = typeof reason === 'object' ? reason.message : reason\n    this.stack = typeof reason === 'object' ? reason.stack : ''\n\n    /**\n     * Reason for message.\n     * @type {string}\n     */\n    this.reason = this.message\n    /**\n     * Starting line of error.\n     * @type {number?}\n     */\n    this.line = position.start.line\n    /**\n     * Starting column of error.\n     * @type {number?}\n     */\n    this.column = position.start.column\n    /**\n     * Namespace of warning.\n     * @type {string?}\n     */\n    this.source = parts[0]\n    /**\n     * Category of message.\n     * @type {string?}\n     */\n    this.ruleId = parts[1]\n    /**\n     * Full range information, when available.\n     * Has start and end properties, both set to an object with line and column, set to number?.\n     * @type {Position?}\n     */\n    this.position = position\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * You may add a file property with a path of a file (used throughout the VFile ecosystem).\n     * @type {string?}\n     */\n    this.file\n    /**\n     * If true, marks associated file as no longer processable.\n     * @type {boolean?}\n     */\n    this.fatal\n    /**\n     * You may add a url property with a link to documentation for the message.\n     * @type {string?}\n     */\n    this.url\n    /**\n     * You may add a note property with a long form description of the message (supported by vfile-reporter).\n     * @type {string?}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * @param {string} path\n * @param {string} [ext]\n * @returns {string}\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean|undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * @param {string} path\n * @returns {string}\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean|undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * @param {string} path\n * @returns {string}\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean|undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * @param {Array.<string>} segments\n * @returns {string}\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string|undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Note: `normalize` is not exposed as `path.normalize`, so some code is\n * manually removed from it.\n *\n * @param {string} path\n * @returns {string}\n */\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n * @param {boolean} allowAboveRoot\n * @returns {string}\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number|undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * @param {string} path\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * @param {unknown} fileURLOrPath\n * @returns {fileURLOrPath is URL}\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileURLOrPath) {\n  return (\n    fileURLOrPath !== null &&\n    typeof fileURLOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileURLOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileURLOrPath.origin\n  )\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n *\n * @typedef {'ascii'|'utf8'|'utf-8'|'utf16le'|'ucs2'|'ucs-2'|'base64'|'latin1'|'binary'|'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *   This is a copy of the typing from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/a2bc1d8/types/node/globals.d.ts#L174>\n *\n * @typedef {string|Uint8Array} VFileValue\n *   Contents of the file.\n *   Can either be text, or a Buffer like structure.\n *   This does not directly use type `Buffer`, because it can also be used in a\n *   browser context.\n *   Instead this leverages `Uint8Array` which is the base type for `Buffer`,\n *   and a native JavaScript construct.\n *\n * @typedef {VFileValue|VFileOptions|VFile|URL} VFileCompatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n * @property {VFileValue} [value]\n * @property {string} [cwd]\n * @property {Array.<string>} [history]\n * @property {string|URL} [path]\n * @property {string} [basename]\n * @property {string} [stem]\n * @property {string} [extname]\n * @property {string} [dirname]\n * @property {Object.<string, unknown>} [data]\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} VFileOptions\n *   Configuration: a bunch of keys that will be shallow copied over to the new\n *   file.\n *\n * @typedef {Object.<string, unknown>} VFileReporterSettings\n * @typedef {<T = VFileReporterSettings>(files: VFile[], options: T) => string} VFileReporter\n */\n\nimport buffer from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n// Order of setting (least specific to most), we need this because otherwise\n// `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n// stem can be set.\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * If `options` is `string` or `Buffer`, treats it as `{value: options}`.\n   * If `options` is a `VFile`, shallow copies its data over to the new file.\n   * All other given fields are set on the newly created `VFile`.\n   *\n   * Path related properties are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * It’s not possible to set either `dirname` or `extname` without setting\n   * either `history`, `path`, `basename`, or `stem` as well.\n   *\n   * @param {VFileCompatible} [value]\n   */\n  constructor(value) {\n    /** @type {VFileOptions} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      // @ts-expect-error Looks like a buffer.\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      // @ts-expect-error Looks like file or options.\n      options = value\n    }\n\n    /**\n     * Place to store custom information.\n     * It’s OK to store custom data directly on the file, moving it to `data`\n     * gives a little more privacy.\n     * @type {Object.<string, unknown>}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     * @type {Array.<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of file paths the file moved between.\n     * @type {Array.<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path`.\n     * Defaults to `process.cwd()` (`/` in browsers).\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     * @type {VFileValue}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     * This is used by vfile reporters.\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Sometimes files have a non-string representation.\n     * This can be stored in the `result` field.\n     * One example is when turning markdown into React nodes.\n     * This is used by unified to store non-string results.\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Sometimes files have a source map associated with them.\n     * This can be stored in the `map` field.\n     * This should be a `RawSourceMap` type from the `source-map` module.\n     * @type {unknown}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (prop in options && options[prop] !== undefined) {\n        // @ts-expect-error: TS is confused by the different types for `history`.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) this[prop] = options[prop]\n    }\n  }\n\n  /**\n   * Access full path (`~/index.min.js`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set full path (`~/index.min.js`).\n   * Cannot be nullified.\n   *\n   * @param {string|URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Access parent path (`~`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set parent path (`~`).\n   * Cannot be set if there's no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Access basename (including extname) (`index.min.js`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (`index.min.js`).\n   * Cannot contain path separators.\n   * Cannot be nullified either (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Access extname (including dot) (`.js`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set extname (including dot) (`.js`).\n   * Cannot be set if there's no `path` yet and cannot contain path separators.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Access stem (w/o extname) (`index.min`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set stem (w/o extname) (`index.min`).\n   * Cannot be nullified, and cannot contain path separators.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding} [encoding='utf8'] If `file.value` is a buffer, `encoding` is used to serialize buffers.\n   * @returns {string}\n   */\n  toString(encoding) {\n    // @ts-expect-error string’s don’t accept the parameter, but buffers do.\n    return (this.value || '').toString(encoding)\n  }\n\n  /**\n   * Create a message and associates it w/ the file.\n   *\n   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.\n   * @param {Node|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).\n   * @param {string} [origin] Place in code the message originates from (`string`, optional).\n   * @returns {VFileMessage}\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Info: create a message, associate it with the file, and mark the fatality\n   * as `null`.\n   * Calls `message()` internally.\n   *\n   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.\n   * @param {Node|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).\n   * @param {string} [origin] Place in code the message originates from (`string`, optional).\n   * @returns {VFileMessage}\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Fail: create a message, associate it with the file, mark the fatality as\n   * `true`.\n   * Note: fatal errors mean a file is no longer processable.\n   * Calls `message()` internally.\n   *\n   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.\n   * @param {Node|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).\n   * @param {string} [origin] Place in code the message originates from (`string`, optional).\n   * @returns {never}\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string|undefined} part\n * @param {string} name\n * @returns {void}\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string|undefined} part\n * @param {string} name\n * @returns {asserts part is string}\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string|undefined} path\n * @param {string} name\n * @returns {asserts path is string}\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\nexport {isUrl}\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string|URL} path\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * @param {URL} url\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: any[]) => void} Callback\n * @typedef {(...input: any[]) => any} Middleware\n *\n * @typedef {(...input: any[]) => void} Run Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Middleware[]} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {any[]} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @param {any[]} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware(...parameters)\n    } catch (error) {\n      /** @type {Error} */\n      const exception = error\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","import fixGoogleHtml from './fix-google-html.js';\n// rehype-dom-parse is a lightweight version of rehype-parse that leverages\n// browser APIs -- reduces bundle size by ~200 kB!\nimport parse from 'rehype-dom-parse';\nimport { all } from 'rehype-remark';\nimport rehype2remarkWithSpaces from './rehype-to-remark-with-spaces.js';\nimport remarkGfm from 'remark-gfm';\nimport stringify from 'remark-stringify';\nimport { unified } from 'unified';\n\n/** @typedef {import(\"mdast-util-to-markdown\").State} MdastState */\n/** @typedef {import(\"unist\").Node} UnistNode */\n\nfunction preserveTagAndConvertContents (h, node) {\n  return [\n    h(node, 'html', `<${node.tagName}>`),\n    ...all(h, node),\n    h(node, 'html', `</${node.tagName}>`)\n  ];\n}\n\nfunction headingWithId (h, node) {\n  const children = all(h, node)\n\n  if (node?.properties?.id) {\n    children.push(h(node, 'html', `<span id=\"${node.properties.id}\"></span>`))\n  }\n\n  return h(node, 'heading', { depth: parseInt(node.tagName.slice(1)) }, children)\n}\n\n/**\n * Use two blank lines before headings. This is a \"join\" function, which tells\n * remark-stringify how to join adjacent nodes.\n * @param {UnistNode} previous\n * @param {UnistNode} next\n * @param {UnistNode} _parent\n * @param {MdastState} _state\n * @returns {boolean|number|void}\n */\nfunction doubleBlankLinesBeforeHeadings (previous, next, _parent, _state) {\n  if (previous.type !== 'heading' && next.type === 'heading') {\n    return 2;\n  }\n  return undefined;\n}\n\nconst processor = unified()\n  .use(parse)\n  .use(fixGoogleHtml)\n  // .use(require('./lib/log-tree').default)\n  .use(rehype2remarkWithSpaces, {\n    handlers: {\n      // Preserve sup/sub markup; most Markdowns have no markup for it.\n      sub: preserveTagAndConvertContents,\n      sup: preserveTagAndConvertContents,\n      h1: headingWithId,\n      h2: headingWithId,\n      h3: headingWithId,\n      h4: headingWithId,\n      h5: headingWithId,\n      h6: headingWithId\n    }\n  })\n  .use(remarkGfm)\n  .use(stringify, {\n    bullet: '-',\n    emphasis: '_',\n    listItemIndent: '1',\n    strong: '*',\n    join: [doubleBlankLinesBeforeHeadings]\n  });\n\nexport function convertDocsHtmlToMarkdown(html) {\n  return processor.process(html).then(result => result.value);\n}\n","import rehypeRemark from 'rehype-remark';\n\n/**\n * The official rehype-remark plugin gets a little aggeressive with removing\n * spaces, so this wraps it with some space preservation.\n *\n * Ideally, this needs to be solved upstream in rehype-remark.\n * TODO: create a minimal test case and file a bug there!\n */\nexport default function rehype2remarkWithSpaces () {\n  const spaceToken = '++IAMASPACE++';\n\n  function preserveInitialSpaces (node) {\n    if (node.type === 'text' && node.value.startsWith(' ')) {\n      if (node.value.startsWith(' ')) {\n        node.value = spaceToken + node.value.slice(1);\n      }\n      if (node.value.endsWith(' ')) {\n        node.value = node.value.slice(0, -1) + spaceToken;\n      }\n    }\n    if (node.children) {\n      node.children.forEach(preserveInitialSpaces);\n    }\n  }\n\n  function recreateSpaces (node) {\n    if (node.value && typeof node.value === 'string') {\n      node.value = node.value.split(spaceToken).join(' ');\n    }\n    if (node.children) {\n      node.children.forEach(recreateSpaces);\n    }\n  }\n\n  const convert = rehypeRemark.apply(this, arguments);\n  return function (tree, file) {\n    preserveInitialSpaces(tree);\n    const markdownTree = convert.apply(this, [tree, file]);\n    recreateSpaces(markdownTree);\n    return markdownTree;\n  };\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('micromark-extension-gfm').Options & import('mdast-util-gfm').Options} Options\n */\n\nimport {gfm} from 'micromark-extension-gfm'\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\n\n/**\n * Plugin to support GFM (autolink literals, footnotes, strikethrough, tables, tasklists).\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nexport default function remarkGfm(options = {}) {\n  const data = this.data()\n\n  add('micromarkExtensions', gfm(options))\n  add('fromMarkdownExtensions', gfmFromMarkdown())\n  add('toMarkdownExtensions', gfmToMarkdown(options))\n\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n  function add(field, value) {\n    const list = /** @type {unknown[]} */ (\n      // Other extensions\n      /* c8 ignore next 2 */\n      data[field] ? data[field] : (data[field] = [])\n    )\n\n    list.push(value)\n  }\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral,\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable,\n    gfmTaskListItem\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration.\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml,\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml,\n    gfmTableHtml,\n    gfmTagfilterHtml,\n    gfmTaskListItemHtml\n  ])\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown,\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown,\n    gfmTableFromMarkdown,\n    gfmTaskListItemFromMarkdown\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown,\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown,\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown\n    ]\n  }\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownOptions\n * @typedef {Omit<ToMarkdownOptions, 'extensions'>} Options\n */\n\nimport {toMarkdown} from 'mdast-util-to-markdown'\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?]|void[], Node, string>}\n */\nexport default function remarkStringify(options) {\n  /** @type {import('unified').CompilerFunction<Node, string>} */\n  const compiler = (tree) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return toMarkdown(\n      tree,\n      Object.assign({}, settings, options, {\n        // Note: this option is not in the readme.\n        // The goal is for it to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions:\n          /** @type {ToMarkdownOptions['extensions']} */ (\n            this.data('toMarkdownExtensions')\n          ) || []\n      })\n    )\n  }\n\n  Object.assign(this, {Compiler: compiler})\n}\n","// This module is generated by `script/`.\n/* eslint-disable no-control-regex, no-misleading-character-class, no-useless-escape */\nexport const regex = /[\\0-\\x1F!-,\\.\\/:-@\\[-\\^`\\{-\\xA9\\xAB-\\xB4\\xB6-\\xB9\\xBB-\\xBF\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0378\\u0379\\u037E\\u0380-\\u0385\\u0387\\u038B\\u038D\\u03A2\\u03F6\\u0482\\u0530\\u0557\\u0558\\u055A-\\u055F\\u0589-\\u0590\\u05BE\\u05C0\\u05C3\\u05C6\\u05C8-\\u05CF\\u05EB-\\u05EE\\u05F3-\\u060F\\u061B-\\u061F\\u066A-\\u066D\\u06D4\\u06DD\\u06DE\\u06E9\\u06FD\\u06FE\\u0700-\\u070F\\u074B\\u074C\\u07B2-\\u07BF\\u07F6-\\u07F9\\u07FB\\u07FC\\u07FE\\u07FF\\u082E-\\u083F\\u085C-\\u085F\\u086B-\\u089F\\u08B5\\u08C8-\\u08D2\\u08E2\\u0964\\u0965\\u0970\\u0984\\u098D\\u098E\\u0991\\u0992\\u09A9\\u09B1\\u09B3-\\u09B5\\u09BA\\u09BB\\u09C5\\u09C6\\u09C9\\u09CA\\u09CF-\\u09D6\\u09D8-\\u09DB\\u09DE\\u09E4\\u09E5\\u09F2-\\u09FB\\u09FD\\u09FF\\u0A00\\u0A04\\u0A0B-\\u0A0E\\u0A11\\u0A12\\u0A29\\u0A31\\u0A34\\u0A37\\u0A3A\\u0A3B\\u0A3D\\u0A43-\\u0A46\\u0A49\\u0A4A\\u0A4E-\\u0A50\\u0A52-\\u0A58\\u0A5D\\u0A5F-\\u0A65\\u0A76-\\u0A80\\u0A84\\u0A8E\\u0A92\\u0AA9\\u0AB1\\u0AB4\\u0ABA\\u0ABB\\u0AC6\\u0ACA\\u0ACE\\u0ACF\\u0AD1-\\u0ADF\\u0AE4\\u0AE5\\u0AF0-\\u0AF8\\u0B00\\u0B04\\u0B0D\\u0B0E\\u0B11\\u0B12\\u0B29\\u0B31\\u0B34\\u0B3A\\u0B3B\\u0B45\\u0B46\\u0B49\\u0B4A\\u0B4E-\\u0B54\\u0B58-\\u0B5B\\u0B5E\\u0B64\\u0B65\\u0B70\\u0B72-\\u0B81\\u0B84\\u0B8B-\\u0B8D\\u0B91\\u0B96-\\u0B98\\u0B9B\\u0B9D\\u0BA0-\\u0BA2\\u0BA5-\\u0BA7\\u0BAB-\\u0BAD\\u0BBA-\\u0BBD\\u0BC3-\\u0BC5\\u0BC9\\u0BCE\\u0BCF\\u0BD1-\\u0BD6\\u0BD8-\\u0BE5\\u0BF0-\\u0BFF\\u0C0D\\u0C11\\u0C29\\u0C3A-\\u0C3C\\u0C45\\u0C49\\u0C4E-\\u0C54\\u0C57\\u0C5B-\\u0C5F\\u0C64\\u0C65\\u0C70-\\u0C7F\\u0C84\\u0C8D\\u0C91\\u0CA9\\u0CB4\\u0CBA\\u0CBB\\u0CC5\\u0CC9\\u0CCE-\\u0CD4\\u0CD7-\\u0CDD\\u0CDF\\u0CE4\\u0CE5\\u0CF0\\u0CF3-\\u0CFF\\u0D0D\\u0D11\\u0D45\\u0D49\\u0D4F-\\u0D53\\u0D58-\\u0D5E\\u0D64\\u0D65\\u0D70-\\u0D79\\u0D80\\u0D84\\u0D97-\\u0D99\\u0DB2\\u0DBC\\u0DBE\\u0DBF\\u0DC7-\\u0DC9\\u0DCB-\\u0DCE\\u0DD5\\u0DD7\\u0DE0-\\u0DE5\\u0DF0\\u0DF1\\u0DF4-\\u0E00\\u0E3B-\\u0E3F\\u0E4F\\u0E5A-\\u0E80\\u0E83\\u0E85\\u0E8B\\u0EA4\\u0EA6\\u0EBE\\u0EBF\\u0EC5\\u0EC7\\u0ECE\\u0ECF\\u0EDA\\u0EDB\\u0EE0-\\u0EFF\\u0F01-\\u0F17\\u0F1A-\\u0F1F\\u0F2A-\\u0F34\\u0F36\\u0F38\\u0F3A-\\u0F3D\\u0F48\\u0F6D-\\u0F70\\u0F85\\u0F98\\u0FBD-\\u0FC5\\u0FC7-\\u0FFF\\u104A-\\u104F\\u109E\\u109F\\u10C6\\u10C8-\\u10CC\\u10CE\\u10CF\\u10FB\\u1249\\u124E\\u124F\\u1257\\u1259\\u125E\\u125F\\u1289\\u128E\\u128F\\u12B1\\u12B6\\u12B7\\u12BF\\u12C1\\u12C6\\u12C7\\u12D7\\u1311\\u1316\\u1317\\u135B\\u135C\\u1360-\\u137F\\u1390-\\u139F\\u13F6\\u13F7\\u13FE-\\u1400\\u166D\\u166E\\u1680\\u169B-\\u169F\\u16EB-\\u16ED\\u16F9-\\u16FF\\u170D\\u1715-\\u171F\\u1735-\\u173F\\u1754-\\u175F\\u176D\\u1771\\u1774-\\u177F\\u17D4-\\u17D6\\u17D8-\\u17DB\\u17DE\\u17DF\\u17EA-\\u180A\\u180E\\u180F\\u181A-\\u181F\\u1879-\\u187F\\u18AB-\\u18AF\\u18F6-\\u18FF\\u191F\\u192C-\\u192F\\u193C-\\u1945\\u196E\\u196F\\u1975-\\u197F\\u19AC-\\u19AF\\u19CA-\\u19CF\\u19DA-\\u19FF\\u1A1C-\\u1A1F\\u1A5F\\u1A7D\\u1A7E\\u1A8A-\\u1A8F\\u1A9A-\\u1AA6\\u1AA8-\\u1AAF\\u1AC1-\\u1AFF\\u1B4C-\\u1B4F\\u1B5A-\\u1B6A\\u1B74-\\u1B7F\\u1BF4-\\u1BFF\\u1C38-\\u1C3F\\u1C4A-\\u1C4C\\u1C7E\\u1C7F\\u1C89-\\u1C8F\\u1CBB\\u1CBC\\u1CC0-\\u1CCF\\u1CD3\\u1CFB-\\u1CFF\\u1DFA\\u1F16\\u1F17\\u1F1E\\u1F1F\\u1F46\\u1F47\\u1F4E\\u1F4F\\u1F58\\u1F5A\\u1F5C\\u1F5E\\u1F7E\\u1F7F\\u1FB5\\u1FBD\\u1FBF-\\u1FC1\\u1FC5\\u1FCD-\\u1FCF\\u1FD4\\u1FD5\\u1FDC-\\u1FDF\\u1FED-\\u1FF1\\u1FF5\\u1FFD-\\u203E\\u2041-\\u2053\\u2055-\\u2070\\u2072-\\u207E\\u2080-\\u208F\\u209D-\\u20CF\\u20F1-\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F-\\u215F\\u2189-\\u24B5\\u24EA-\\u2BFF\\u2C2F\\u2C5F\\u2CE5-\\u2CEA\\u2CF4-\\u2CFF\\u2D26\\u2D28-\\u2D2C\\u2D2E\\u2D2F\\u2D68-\\u2D6E\\u2D70-\\u2D7E\\u2D97-\\u2D9F\\u2DA7\\u2DAF\\u2DB7\\u2DBF\\u2DC7\\u2DCF\\u2DD7\\u2DDF\\u2E00-\\u2E2E\\u2E30-\\u3004\\u3008-\\u3020\\u3030\\u3036\\u3037\\u303D-\\u3040\\u3097\\u3098\\u309B\\u309C\\u30A0\\u30FB\\u3100-\\u3104\\u3130\\u318F-\\u319F\\u31C0-\\u31EF\\u3200-\\u33FF\\u4DC0-\\u4DFF\\u9FFD-\\u9FFF\\uA48D-\\uA4CF\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA62C-\\uA63F\\uA673\\uA67E\\uA6F2-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA7C0\\uA7C1\\uA7CB-\\uA7F4\\uA828-\\uA82B\\uA82D-\\uA83F\\uA874-\\uA87F\\uA8C6-\\uA8CF\\uA8DA-\\uA8DF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA954-\\uA95F\\uA97D-\\uA97F\\uA9C1-\\uA9CE\\uA9DA-\\uA9DF\\uA9FF\\uAA37-\\uAA3F\\uAA4E\\uAA4F\\uAA5A-\\uAA5F\\uAA77-\\uAA79\\uAAC3-\\uAADA\\uAADE\\uAADF\\uAAF0\\uAAF1\\uAAF7-\\uAB00\\uAB07\\uAB08\\uAB0F\\uAB10\\uAB17-\\uAB1F\\uAB27\\uAB2F\\uAB5B\\uAB6A-\\uAB6F\\uABEB\\uABEE\\uABEF\\uABFA-\\uABFF\\uD7A4-\\uD7AF\\uD7C7-\\uD7CA\\uD7FC-\\uD7FF\\uE000-\\uF8FF\\uFA6E\\uFA6F\\uFADA-\\uFAFF\\uFB07-\\uFB12\\uFB18-\\uFB1C\\uFB29\\uFB37\\uFB3D\\uFB3F\\uFB42\\uFB45\\uFBB2-\\uFBD2\\uFD3E-\\uFD4F\\uFD90\\uFD91\\uFDC8-\\uFDEF\\uFDFC-\\uFDFF\\uFE10-\\uFE1F\\uFE30-\\uFE32\\uFE35-\\uFE4C\\uFE50-\\uFE6F\\uFE75\\uFEFD-\\uFF0F\\uFF1A-\\uFF20\\uFF3B-\\uFF3E\\uFF40\\uFF5B-\\uFF65\\uFFBF-\\uFFC1\\uFFC8\\uFFC9\\uFFD0\\uFFD1\\uFFD8\\uFFD9\\uFFDD-\\uFFFF]|\\uD800[\\uDC0C\\uDC27\\uDC3B\\uDC3E\\uDC4E\\uDC4F\\uDC5E-\\uDC7F\\uDCFB-\\uDD3F\\uDD75-\\uDDFC\\uDDFE-\\uDE7F\\uDE9D-\\uDE9F\\uDED1-\\uDEDF\\uDEE1-\\uDEFF\\uDF20-\\uDF2C\\uDF4B-\\uDF4F\\uDF7B-\\uDF7F\\uDF9E\\uDF9F\\uDFC4-\\uDFC7\\uDFD0\\uDFD6-\\uDFFF]|\\uD801[\\uDC9E\\uDC9F\\uDCAA-\\uDCAF\\uDCD4-\\uDCD7\\uDCFC-\\uDCFF\\uDD28-\\uDD2F\\uDD64-\\uDDFF\\uDF37-\\uDF3F\\uDF56-\\uDF5F\\uDF68-\\uDFFF]|\\uD802[\\uDC06\\uDC07\\uDC09\\uDC36\\uDC39-\\uDC3B\\uDC3D\\uDC3E\\uDC56-\\uDC5F\\uDC77-\\uDC7F\\uDC9F-\\uDCDF\\uDCF3\\uDCF6-\\uDCFF\\uDD16-\\uDD1F\\uDD3A-\\uDD7F\\uDDB8-\\uDDBD\\uDDC0-\\uDDFF\\uDE04\\uDE07-\\uDE0B\\uDE14\\uDE18\\uDE36\\uDE37\\uDE3B-\\uDE3E\\uDE40-\\uDE5F\\uDE7D-\\uDE7F\\uDE9D-\\uDEBF\\uDEC8\\uDEE7-\\uDEFF\\uDF36-\\uDF3F\\uDF56-\\uDF5F\\uDF73-\\uDF7F\\uDF92-\\uDFFF]|\\uD803[\\uDC49-\\uDC7F\\uDCB3-\\uDCBF\\uDCF3-\\uDCFF\\uDD28-\\uDD2F\\uDD3A-\\uDE7F\\uDEAA\\uDEAD-\\uDEAF\\uDEB2-\\uDEFF\\uDF1D-\\uDF26\\uDF28-\\uDF2F\\uDF51-\\uDFAF\\uDFC5-\\uDFDF\\uDFF7-\\uDFFF]|\\uD804[\\uDC47-\\uDC65\\uDC70-\\uDC7E\\uDCBB-\\uDCCF\\uDCE9-\\uDCEF\\uDCFA-\\uDCFF\\uDD35\\uDD40-\\uDD43\\uDD48-\\uDD4F\\uDD74\\uDD75\\uDD77-\\uDD7F\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDFF\\uDE12\\uDE38-\\uDE3D\\uDE3F-\\uDE7F\\uDE87\\uDE89\\uDE8E\\uDE9E\\uDEA9-\\uDEAF\\uDEEB-\\uDEEF\\uDEFA-\\uDEFF\\uDF04\\uDF0D\\uDF0E\\uDF11\\uDF12\\uDF29\\uDF31\\uDF34\\uDF3A\\uDF45\\uDF46\\uDF49\\uDF4A\\uDF4E\\uDF4F\\uDF51-\\uDF56\\uDF58-\\uDF5C\\uDF64\\uDF65\\uDF6D-\\uDF6F\\uDF75-\\uDFFF]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A-\\uDC5D\\uDC62-\\uDC7F\\uDCC6\\uDCC8-\\uDCCF\\uDCDA-\\uDD7F\\uDDB6\\uDDB7\\uDDC1-\\uDDD7\\uDDDE-\\uDDFF\\uDE41-\\uDE43\\uDE45-\\uDE4F\\uDE5A-\\uDE7F\\uDEB9-\\uDEBF\\uDECA-\\uDEFF\\uDF1B\\uDF1C\\uDF2C-\\uDF2F\\uDF3A-\\uDFFF]|\\uD806[\\uDC3B-\\uDC9F\\uDCEA-\\uDCFE\\uDD07\\uDD08\\uDD0A\\uDD0B\\uDD14\\uDD17\\uDD36\\uDD39\\uDD3A\\uDD44-\\uDD4F\\uDD5A-\\uDD9F\\uDDA8\\uDDA9\\uDDD8\\uDDD9\\uDDE2\\uDDE5-\\uDDFF\\uDE3F-\\uDE46\\uDE48-\\uDE4F\\uDE9A-\\uDE9C\\uDE9E-\\uDEBF\\uDEF9-\\uDFFF]|\\uD807[\\uDC09\\uDC37\\uDC41-\\uDC4F\\uDC5A-\\uDC71\\uDC90\\uDC91\\uDCA8\\uDCB7-\\uDCFF\\uDD07\\uDD0A\\uDD37-\\uDD39\\uDD3B\\uDD3E\\uDD48-\\uDD4F\\uDD5A-\\uDD5F\\uDD66\\uDD69\\uDD8F\\uDD92\\uDD99-\\uDD9F\\uDDAA-\\uDEDF\\uDEF7-\\uDFAF\\uDFB1-\\uDFFF]|\\uD808[\\uDF9A-\\uDFFF]|\\uD809[\\uDC6F-\\uDC7F\\uDD44-\\uDFFF]|[\\uD80A\\uD80B\\uD80E-\\uD810\\uD812-\\uD819\\uD824-\\uD82B\\uD82D\\uD82E\\uD830-\\uD833\\uD837\\uD839\\uD83D\\uD83F\\uD87B-\\uD87D\\uD87F\\uD885-\\uDB3F\\uDB41-\\uDBFF][\\uDC00-\\uDFFF]|\\uD80D[\\uDC2F-\\uDFFF]|\\uD811[\\uDE47-\\uDFFF]|\\uD81A[\\uDE39-\\uDE3F\\uDE5F\\uDE6A-\\uDECF\\uDEEE\\uDEEF\\uDEF5-\\uDEFF\\uDF37-\\uDF3F\\uDF44-\\uDF4F\\uDF5A-\\uDF62\\uDF78-\\uDF7C\\uDF90-\\uDFFF]|\\uD81B[\\uDC00-\\uDE3F\\uDE80-\\uDEFF\\uDF4B-\\uDF4E\\uDF88-\\uDF8E\\uDFA0-\\uDFDF\\uDFE2\\uDFE5-\\uDFEF\\uDFF2-\\uDFFF]|\\uD821[\\uDFF8-\\uDFFF]|\\uD823[\\uDCD6-\\uDCFF\\uDD09-\\uDFFF]|\\uD82C[\\uDD1F-\\uDD4F\\uDD53-\\uDD63\\uDD68-\\uDD6F\\uDEFC-\\uDFFF]|\\uD82F[\\uDC6B-\\uDC6F\\uDC7D-\\uDC7F\\uDC89-\\uDC8F\\uDC9A-\\uDC9C\\uDC9F-\\uDFFF]|\\uD834[\\uDC00-\\uDD64\\uDD6A-\\uDD6C\\uDD73-\\uDD7A\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDE41\\uDE45-\\uDFFF]|\\uD835[\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3\\uDFCC\\uDFCD]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85-\\uDE9A\\uDEA0\\uDEB0-\\uDFFF]|\\uD838[\\uDC07\\uDC19\\uDC1A\\uDC22\\uDC25\\uDC2B-\\uDCFF\\uDD2D-\\uDD2F\\uDD3E\\uDD3F\\uDD4A-\\uDD4D\\uDD4F-\\uDEBF\\uDEFA-\\uDFFF]|\\uD83A[\\uDCC5-\\uDCCF\\uDCD7-\\uDCFF\\uDD4C-\\uDD4F\\uDD5A-\\uDFFF]|\\uD83B[\\uDC00-\\uDDFF\\uDE04\\uDE20\\uDE23\\uDE25\\uDE26\\uDE28\\uDE33\\uDE38\\uDE3A\\uDE3C-\\uDE41\\uDE43-\\uDE46\\uDE48\\uDE4A\\uDE4C\\uDE50\\uDE53\\uDE55\\uDE56\\uDE58\\uDE5A\\uDE5C\\uDE5E\\uDE60\\uDE63\\uDE65\\uDE66\\uDE6B\\uDE73\\uDE78\\uDE7D\\uDE7F\\uDE8A\\uDE9C-\\uDEA0\\uDEA4\\uDEAA\\uDEBC-\\uDFFF]|\\uD83C[\\uDC00-\\uDD2F\\uDD4A-\\uDD4F\\uDD6A-\\uDD6F\\uDD8A-\\uDFFF]|\\uD83E[\\uDC00-\\uDFEF\\uDFFA-\\uDFFF]|\\uD869[\\uDEDE-\\uDEFF]|\\uD86D[\\uDF35-\\uDF3F]|\\uD86E[\\uDC1E\\uDC1F]|\\uD873[\\uDEA2-\\uDEAF]|\\uD87A[\\uDFE1-\\uDFFF]|\\uD87E[\\uDE1E-\\uDFFF]|\\uD884[\\uDF4B-\\uDFFF]|\\uDB40[\\uDC00-\\uDCFF\\uDDF0-\\uDFFF]/g\n","import { regex } from './regex.js'\n\nconst own = Object.hasOwnProperty\n\n/**\n * Slugger.\n */\nexport default class BananaSlug {\n  /**\n   * Create a new slug class.\n   */\n  constructor () {\n    /** @type {Record<string, number>} */\n    // eslint-disable-next-line no-unused-expressions\n    this.occurrences\n\n    this.reset()\n  }\n\n  /**\n   * Generate a unique slug.\n  *\n  * Tracks previously generated slugs: repeated calls with the same value\n  * will result in different slugs.\n  * Use the `slug` function to get same slugs.\n   *\n   * @param  {string} value\n   *   String of text to slugify\n   * @param  {boolean} [maintainCase=false]\n   *   Keep the current case, otherwise make all lowercase\n   * @return {string}\n   *   A unique slug string\n   */\n  slug (value, maintainCase) {\n    const self = this\n    let result = slug(value, maintainCase === true)\n    const originalSlug = result\n\n    while (own.call(self.occurrences, result)) {\n      self.occurrences[originalSlug]++\n      result = originalSlug + '-' + self.occurrences[originalSlug]\n    }\n\n    self.occurrences[result] = 0\n\n    return result\n  }\n\n  /**\n   * Reset - Forget all previous slugs\n   *\n   * @return void\n   */\n  reset () {\n    this.occurrences = Object.create(null)\n  }\n}\n\n/**\n * Generate a slug.\n *\n * Does not track previously generated slugs: repeated calls with the same value\n * will result in the exact same slug.\n * Use the `GithubSlugger` class to get unique slugs.\n *\n * @param  {string} value\n *   String of text to slugify\n * @param  {boolean} [maintainCase=false]\n *   Keep the current case, otherwise make all lowercase\n * @return {string}\n *   A unique slug string\n */\nexport function slug (value, maintainCase) {\n  if (typeof value !== 'string') return ''\n  if (!maintainCase) value = value.toLowerCase()\n  return value.replace(regex, '').replace(/ /g, '-')\n}\n","import { convertDocsHtmlToMarkdown } from './lib/convert.js';\nimport { slug } from 'github-slugger';\n\nconst inputElement = document.getElementById('input');\nconst outputElement = document.getElementById('output');\nconst inputInstructions = document.querySelector('#input-area .instructions');\nconst outputInstructions = document.querySelector('#output-area .instructions');\n\n/**\n * @template T\n * @template U\n * @param {() => T} fn \n * @param {(error: unknown) => U} errorHandler \n * @returns {T | U}\n */\nfunction tryCatch (fn, errorHandler = (error) => {\n  console.error(error)\n  return undefined\n}) {\n  try {\n    return fn()\n  } catch (err) {\n    return errorHandler(err)\n  }\n}\n\nfunction processNewInput () {\n  const hasContent = !!inputElement.textContent;\n  inputInstructions.style.display = hasContent ? 'none' : '';\n\n  convertDocsHtmlToMarkdown(inputElement.innerHTML)\n    .then(markdown => {\n      outputElement.value = markdown;\n      outputInstructions.style.display = markdown.trim() ? 'none' : '';\n    })\n    .catch(error => {\n      console.error(error);\n      outputInstructions.style.display = '';\n    });\n}\n\ninputElement.addEventListener('paste', event => {\n  event.preventDefault()\n\n  // transform internal content into useful data\n  const internalContent = tryCatch(() => {\n    const rawInternalContent = event.clipboardData.getData(event.clipboardData.types[0])\n    return JSON.parse(JSON.parse(rawInternalContent).data).resolved\n  })\n  \n  const internalHeadings = internalContent && tryCatch(() => {\n    return internalContent\n      .dsl_styleslices\n      .find(styleslice => styleslice.stsl_type === 'paragraph')\n      .stsl_styles\n      .filter(style => style?.ps_hdid)\n      .map(heading => ({ level: heading.ps_hd, id: heading.ps_hdid }))\n  })\n\n  // process HTML content\n  const htmlContent = event.clipboardData.getData('text/html')\n  const selection = window.getSelection();\n  if (!selection.rangeCount) return;\n  selection.deleteFromDocument();\n  const newContent = document.createElement('span');\n  newContent.innerHTML = htmlContent;\n\n  // process the pasted HTML based on the internal content\n  if (internalHeadings && internalHeadings.length > 0) {\n    const headings = Array.from(newContent.querySelectorAll('h1, h2, h3, h4, h5, h6'))\n\n    // check if the headings are the same\n    if (!headings.every(\n      (heading, index) => heading.nodeName.toLowerCase() === `h${internalHeadings[index].level}`)\n    ) {\n      console.log('headings are not the same')\n      return\n    }\n\n    // remove the initial heading IDs, if any\n    headings.forEach((heading) => {\n      heading.id = ''\n    })\n\n    // make new, readable heading IDs and\n    // map the internal heading IDs to the new heading IDs\n    const headingIdMap = new Map()\n    headings.forEach((heading, index) => {\n      const internalHeading = internalHeadings[index]\n      const rawNewId = slug(heading.textContent)\n      let count = 0\n      while (true) {\n        const newId = count === 0 ? rawNewId : `${rawNewId}-${count}`\n        const exists = inputElement.querySelector(`#${newId}`) || newContent.querySelector(`#${newId}`)\n        if (!exists) {\n          heading.id = newId\n          headingIdMap.set(internalHeading.id, newId)\n          break\n        }\n        count++\n      }\n    })\n\n    // update the internal links\n    const links = Array.from(newContent.querySelectorAll('a'))\n    links.forEach(link => {\n      const href = link.getAttribute('href')\n      const url = tryCatch(() => new URL(href))\n      console.log(url)\n      if (url && url.host === 'docs.google.com') {\n        const internalHeadingId = tryCatch(() => url.hash.match(/^#heading=([a-z0-9.]+)$/)[1])\n        const newId = headingIdMap.get(internalHeadingId)\n        console.log(internalHeadingId, newId)\n        if (newId) {\n          link.setAttribute('href', `#${newId}`)\n        }\n      }\n    })\n  }\n\n  // insert the new content\n  selection.getRangeAt(0).insertNode(newContent);\n  selection.collapseToEnd();\n\n  processNewInput();\n})\n\ninputElement.addEventListener('input', () => {\n  processNewInput();\n});\n\nwindow.convertDocsHtmlToMarkdown = convertDocsHtmlToMarkdown;\n\nconst copyButton = document.getElementById('copy-button');\nif (navigator.clipboard && navigator.clipboard.writeText) {\n  copyButton.style.display = '';\n  copyButton.addEventListener('click', () => {\n    navigator.clipboard.writeText(outputElement.value).catch((error) => {\n      alert(`Unable to copy markdown to clipboard: ${error}`);\n    });\n  });\n}\n\nconst downloadButton = document.getElementById('download-button');\nif (window.URL && window.File) {\n  downloadButton.style.display = '';\n  downloadButton.addEventListener('click', () => {\n    const file = new File([outputElement.value], 'Converted Text.md', {\n      type: 'text/markdown',\n    });\n\n    // Make a link to the file and click it to trigger a download. Chrome has a\n    // fancy API for opening a save dialog, but other browsers do not, and this\n    // is the most universal way to download a file created in the front-end.\n    let url, link;\n    try {\n      url = URL.createObjectURL(file);\n      link = document.createElement('a');\n      link.href = url;\n      link.download = file.name;\n      document.body.appendChild(link);\n      link.click();\n    }\n    finally {\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    }\n  });\n}\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","isBuffer","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","o","get","prop","r","Symbol","toStringTag","Schema","property","normal","space","this","merge","definitions","index","assign","normalize","toLowerCase","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","defined","powers","increment","checks","keys","DefinedInfo","mask","super","mark","values","own","create","info","properties","transform","attributes","includes","xlink","_","slice","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","alt","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","capture","charSet","checked","cite","className","cols","colSpan","content","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","default","defer","dir","dirName","disabled","download","draggable","encType","enterKeyHint","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","href","hrefLang","htmlFor","httpEquiv","id","imageSizes","imageSrcSet","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","lang","language","list","loading","loop","low","manifest","max","maxLength","media","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforePrint","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextMenu","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shape","size","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","start","step","style","tabIndex","title","translate","type","typeMustMatch","useMap","width","wrap","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","code","codeBase","codeType","color","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","rules","scheme","scrolling","standby","summary","text","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","prefix","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","end","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","from","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","offset","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","result","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","parse","token","tokens","input","String","indexOf","trim","push","search","valid","dash","cap","find","schema","Type","test","charAt","replace","camelcase","toUpperCase","datasetToProperty","kebab","datasetToAttribute","$0","split","buttonTypes","Set","createH","defaultTagName","caseSensitive","adjust","createAdjustMap","selector","children","node","child","unshift","props","previous","tagName","lastIndex","match","exec","subvalue","parseSelector","has","addProperty","addChild","Number","isNaN","join","parsePrimitive","concat","finalResult","nodes","Error","h","convert","ok","castFactory","tests","parameters","apply","anyFactory","check","checkAsRecord","nodeAsRecord","propsFactory","testFunction","parent","Boolean","looksLikeANode","empty","CONTINUE","EXIT","SKIP","visitParents","tree","visitor","reverse","factory","parents","visit","subresult","grandparents","toResult","nodeAsParent","testOrVisitor","visitorOrReverse","maybeReverse","isBlank","getResolvedStyleProperty","propertyName","ancestors","_resolvedStyle","_style","groups","error","console","warn","parseCssPropertyList","getNodeStyle","parentAncestors","resolveNodeStyle","Proxy","_receiver","blockElements","spaceSensitiveElements","isList","isBlock","isSpaceSensitive","isCell","spaceAtStartPattern","spaceAtEndPattern","wrapChildren","wrapper","unwrapLineBreaks","splice","removeLineBreaksBeforeBlocks","_extractInvalidSpace","totalSpace","spaceMatch","body","getNodeTextAlignment","alignMatch","isAllTextCode","hasText","childResult","createCodeBlocks","codeBlocks","activeCodeBlock","block","contents","flatMap","isChecklistItem","webNamespaces","mathml","core","ELEMENT_NODE","TEXT_NODE","COMMENT_NODE","DOCUMENT_NODE","DOCUMENT_TYPE_NODE","DOCUMENT_FRAGMENT_NODE","nodeType","namespaceURI","fn","getAttributeNames","getAttribute","root","nodeValue","comment","childNodes","createFragment","htmlString","createDocument","DOMParser","parseFromString","wrapText","one","dataMdast","handlers","unknown","isElement","context","convertElement","POSITIVE_INFINITY","embedded","blocks","skippable","ignorableNode","rehypeMinifyWhitespace","collapse","collapseFactory","newlines","replaceNewlines","replaceWhitespace","minify","whitespace","settings","blocklike","before","after","inferWhiteSpace","collapsableAfter","remove","ignore","stripAtStart","removable","minifyText","inferBoundary","thing","character","phrasing","runs","head","wrapNeeded","onphrasing","onnonphrasing","nonphrasing","identity","flattened","flatten","queue","rest","n","resolve","url","frozenBaseUrl","URL","findAfter","searchLineFeeds","searchTabOrSpaces","p","cell","row","notRendered","blockOrCaption","toText","inferWhitespace","breakBefore","breakAfter","count","collectText","innerTextCollection","repeat","suffix","items","collectElement","collectPreText","lines","trimAndCollapseSpacesAndTabs","charCodeAt","pre","isCode","classList","meta","del","listItemsSpread","spread","wrapListItems","div","dt","dd","handle","ordered","em","heading","depth","img","inlineCode","hasProperty","findSelectedOptions","findOptions","Math","parseInt","selectedOptions","option","datalist","li","checkbox","ol","includeImageAlt","source","video","linkInFallbackContent","strong","tableCell","thead","tr","toCells","document","doctype","applet","area","basefont","bgsound","caption","col","colgroup","command","dialog","element","embed","frameset","isindex","keygen","math","menu","menuitem","nextid","noembed","noframes","optgroup","param","script","shadow","spacer","template","track","acronym","bdi","bdo","big","blink","button","canvas","details","dfn","font","ins","map","marquee","meter","nobr","noscript","output","progress","rb","rbc","rp","rt","rtc","ruby","small","sup","sub","tbody","tfoot","time","address","article","aside","center","fieldset","figcaption","figure","footer","header","hgroup","legend","main","multicol","nav","picture","section","a","audio","b","base","baseFound","blockquote","br","dl","clean","group","titles","h1","h2","h3","h4","h5","h6","hr","iframe","image","texts","nodeById","kbd","listing","plaintext","q","expected","quotes","qNesting","s","samp","select","strike","table","inTable","headless","rowIndex","cellIndex","inspect","toRows","columns","cells","otherRowIndex","colIndex","newCells","alignIndex","td","textarea","th","tt","u","ul","var","wbr","xmp","toMdast","byId","mdast","position","unchecked","destination","processor","file","next","run","bridge","mutate","chunkStart","syntaxExtension","all","extension","hook","left","right","constructs","existing","add","asciiAlpha","regexCheck","asciiAlphanumeric","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","fromCharCode","wwwPrefix","tokenize","effects","nok","wwwPrefixInside","consume","wwwPrefixAfter","partial","domain","underscoreInLastSegment","underscoreInLastLastSegment","seen","domainInside","trail","domainAfter","domainAtPunctuation","sizeOpen","sizeClose","pathInside","pathAtPunctuation","trailCharRefStart","trailBracketAfter","trailCharRefInside","emailDomainDotTrail","wwwAutolink","self","previousWww","previousUnbalanced","events","enter","attempt","wwwAfter","exit","protocolAutolink","buffer","previousProtocol","fromCodePoint","protocolPrefixInside","protocol","protocolSlashesInside","afterProtocol","asciiControl","protocolAfter","emailAutolink","dot","gfmAtext","previousEmail","atext","emailDomain","emailDomainAfter","emailDomainDot","gfmAutolinkLiteral","_balanced","_gfmAutolinkLiteralWalkedInto","factorySpace","limit","blankLine","normalizeIdentifier","indent","tail","sliceSerialize","tokenizePotentialGfmFootnoteCall","parser","gfmFootnotes","labelStart","now","codePointAt","resolveToPotentialGfmFootnoteCall","marker","column","_bufferIndex","chunk","contentType","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","identifier","_container","labelAtMarker","labelInside","labelAfter","labelEscape","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","classifyCharacter","resolveAll","called","gfmStrikethrough","single","singleTilde","tokenizer","more","_open","_close","strikethrough","nextEvents","insideSpan","null","attentionMarkers","EditMap","editMap","at","addImpl","sort","vecs","pop","gfmTableAlign","inDelimiterRow","gfmTable","flow","sizeB","bodyRowStart","headRowBefore","lazy","line","headRowBreak","headRowStart","interrupt","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","disable","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","_align","range","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","tableBody","exits","related","tasklistCheck","_gfmTasklistFirstContentOfListItem","inside","close","spaceThenNonSpace","gfmTaskListItem","ccount","TypeError","toExpression","RegExp","toFunction","inConstruct","notInConstruct","gfmAutolinkLiteralFromMarkdown","transforms","ignored","pairs","toPairs","pairIndex","grandparent","change","matchObject","stack","global","findAndReplace","findUrl","findEmail","literalAutolink","literalAutolinkEmail","enterLiteralAutolinkValue","literalAutolinkHttp","literalAutolinkWww","config","autolinkEmail","autolinkProtocol","gfmAutolinkLiteralToMarkdown","unsafe","parts","isCorrectDomain","trailExec","closingParenIndex","openingParens","closingParens","splitUrl","email","createElement","characterEscapeOrReference","decode","$1","$2","hex","decodeNumericCharacterReference","characterReference","innerHTML","textContent","decodeNamedCharacterReference","association","containerFlow","state","indexStack","tracker","createTracker","move","current","bulletLastUsed","between","eol","indentLines","patternCompile","_compiled","atBreak","patternInScope","listInScope","none","safe","positions","infos","expression","numerical","escapeBackslashes","encode","whole","lineShift","chunks","shift","enterFootnoteDefinition","enterFootnoteDefinitionLabelString","exitFootnoteDefinitionLabelString","resume","exitFootnoteDefinition","enterFootnoteCall","enterFootnoteCallString","exitFootnoteCallString","exitFootnoteCall","footnoteReference","safeOptions","subexit","footnoteDefinition","blank","containerPhrasing","peek","handleDelete","gfmStrikethroughFromMarkdown","canContainEols","gfmStrikethroughToMarkdown","delete","sequence","defaultStringLength","toAlignment","gfmTableFromMarkdown","setData","tableData","enterCell","tableHeader","tableRow","codeText","getData","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableRowAsData","handleTableAsData","handleTableCell","matrix","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","columnIndex","delimiterStart","delimiterEnd","markdownTable","checkBullet","bullet","listItem","listItemIndent","checkListItemIndent","bulletCurrent","incrementListMarker","ceil","gfmTaskListItemFromMarkdown","taskListCheckValueChecked","exitCheck","taskListCheckValueUnchecked","paragraph","siblings","firstParaghraph","sibling","gfmTaskListItemToMarkdown","checkable","configure","extensions","hardBreak","_1","formatCodeAsIndented","fences","checkQuote","quote","emphasis","checkEmphasis","formatHeadingAsSetext","literalWithBreak","setext","imageReference","referenceType","reference","associationId","formatLinkAsAutolink","raw","resourceLink","linkReference","checkBulletOrdered","bulletOrdered","checkRule","rule","checkStrong","break","fence","checkFence","substring","longestStreak","rank","lastIndexOf","closeAtx","bulletOther","bulletOrderedOther","checkBulletOrderedOther","checkBulletOther","useDifferentMarker","firstListItem","item","some","thematicBreak","ruleSpaces","repetition","ruleRepetition","checkRuleRepetition","fullPhrasingSpans","invalid","joinDefinition","containerPhrasingBound","containerFlowBound","safeBound","bail","getPrototypeOf","iterator","stringifyPosition","point","pos","VFileMessage","reason","place","message","ruleId","fatal","note","basename","ext","assertPath","seenNonSlash","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","segments","joined","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","JSON","stringify","proc","isUrl","fileURLOrPath","VFile","messages","history","cwd","stored","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","urlToPath","assertNonEmpty","assertPart","stem","encoding","fail","part","sep","unified","transformers","fns","pipeline","middlewareIndex","callback","middleware","fnExpectsCallback","done","Promise","then","use","middelware","trough","attachers","frozen","namespace","freezeIndex","assertUnfrozen","Parser","Compiler","freeze","attacher","transformer","addPlugin","addList","addPreset","plugin","plugins","entry","doc","vfile","assertParser","newable","assertCompiler","assertNode","compile","executor","reject","runSync","complete","assertDone","process","processSync","asyncName","looksLikeAVFile","preserveTagAndConvertContents","headingWithId","fragment","_file","isStyled","weight","verticalAlign","decorationLine","startsWith","childrenCount","convertInlineStylesToElements","_index","_parent","newChildren","activeNode","mergeConsecutiveInlineStyles","nextIndex","startSpace","endSpace","fixNestedLists","alignment","childAlignment","detectTableColumnAlignment","fixChecklists","spaceToken","preserveInitialSpaces","endsWith","forEach","recreateSpaces","markdownTree","field","combineExtensions","continuation","resolveTo","gfm","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCall","gfmFootnoteCallString","gfmToMarkdown","tightDefinitions","zwitch","toMarkdown","_state","convertDocsHtmlToMarkdown","inputElement","getElementById","outputElement","inputInstructions","querySelector","outputInstructions","tryCatch","errorHandler","err","processNewInput","hasContent","markdown","catch","addEventListener","preventDefault","internalContent","rawInternalContent","clipboardData","types","resolved","internalHeadings","dsl_styleslices","styleslice","stsl_type","stsl_styles","ps_hdid","level","ps_hd","htmlContent","selection","window","getSelection","rangeCount","deleteFromDocument","newContent","headings","querySelectorAll","every","nodeName","log","headingIdMap","Map","internalHeading","rawNewId","maintainCase","newId","set","host","internalHeadingId","hash","setAttribute","getRangeAt","insertNode","collapseToEnd","copyButton","navigator","clipboard","writeText","alert","downloadButton","File","createObjectURL","appendChild","click","removeChild","revokeObjectURL"],"sourceRoot":""}